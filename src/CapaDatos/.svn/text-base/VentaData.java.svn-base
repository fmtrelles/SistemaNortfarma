package CapaDatos;

import CapaLogica.LogicaBoticas;
import CapaLogica.LogicaCPersonal;
import CapaLogica.LogicaFechaHora;
import CapaLogica.LogicaIGV;
import entidad.Cajas;
import entidad.Detalle_VentaDelivery;
import entidad.NotaCredito;
import entidad.Personal;
import entidad.Proforma;
import entidad.ResultadoVenta;
import entidad.TipoCambio;
import entidad.Venta;
import entidad.Venta_Delivery;
import entidad.Ventas_Tipo_Pago;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sistemanortfarma.FormImpresora;
import sistemanortfarma.MailClient;
import sistemanortfarma.OpcionesMenu;

/**
 *
 * @author Miguel Gomez S. 
 */
public class VentaData {

    Connection conex;
    Connection conex2;
    ResultadoVenta objresultado;
    private ConexionPool db;
    ResultSet rs, rs1, rs2;
    Statement stm;
    List<Venta> listventa = new ArrayList<Venta>();
    List<Venta> listVentas = new ArrayList<Venta>();
    List<Venta> listaInternos = new ArrayList<Venta>();
    LogicaFechaHora objFechaHora = new LogicaFechaHora();
    List<Integer> lisunidad = new ArrayList<Integer>();
    List<Integer> listfraccion = new ArrayList<Integer>();
    LogicaIGV objlogicaIGV = new LogicaIGV();
    MailClient objmail = new MailClient();
    LogicaBoticas objlistabotica = new LogicaBoticas();
    LogicaCPersonal logPersonal = new LogicaCPersonal();
    double mayor, menor, acumula, inserciones;
    double continsertar = 0;
    private String idbotica;
    OpcionesMenu obj;
    private String Impresora_Boleta = obj.getImpresora_Boleta();
    private String Impresora_Factura = obj.getImpresora_Factura();
    private double MIIGV;
    int podecimal = 2;
    JFrame ventana;

    public VentaData() {
        db = new ConexionPool();
    }

    public int Cantidad_Productos(int tipventa) {
        int cant = 0;
        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RETORNA_ITEM_IMPRESION ('" + tipventa + "') }");
            CallableStatement procedure1 = conex.prepareCall("{ call RETORNA_IGV }");
            rs1 = procedure1.executeQuery();
            rs1.next();
            MIIGV = rs1.getDouble("IGV");
            rs = procedure.executeQuery();
            rs.next();
            cant = rs.getInt("Items_Impresion");
            rs.close();
            rs1.close();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return cant;
    }

    public ResultadoVenta GuardarVenta(Venta obj, List<Venta> listasinigv, List<Venta> lista, List<Ventas_Tipo_Pago> lista_pagos, Proforma EntidadProforma, String PolizaCod) {

        double cantidad = 0;
        int ind = 0, posini = 0, posfin = 0;
        double total = 0.0, subtotal = 0.0, resto = 0;
        int cantsinigv = listasinigv.size();
        double tamano = lista.size();
        int tipventa = obj.getId_Tipo_Venta();
        CallableStatement procedure = null, procedure1 = null, procedure2 = null;
        int cantpag = lista_pagos.size();
        int idipopago = obj.getId_TipoPago();
        idbotica = obj.getId_Botica();
        String numero = "";
        PreparedStatement st1 = null, st2 = null;
        boolean varios = false;
        int Cantidad_En_Empaque = 0;
        int Almacen_Stock_Empaque = 0;
        int Almacen_Stock_Fraccion = 0;
        listaInternos.removeAll(listaInternos);
        String Id_TipoAlmacen = "";
        String Id_TipoMovimiento = "";
        String Id_Proveedor = "";
        int marcado = 0;
        boolean espositiva = false;
        String NumeroProforma = null;
        podecimal = OpcionesMenu.getCantidadDecimales();
        int esImprimible = 0;
        String VarPoliza = PolizaCod;


        if (cantpag > 1) //SI HAY MAS DE UN TIPO DE PAGO
        {
            mayor = lista_pagos.get(0).getMonto();
            menor = lista_pagos.get(1).getMonto();

            if (menor > mayor) {
                mayor = menor;
                menor = lista_pagos.get(0).getMonto();
                ind = 1;
            }
            varios = true;
        }


        cantidad = Cantidad_Productos(tipventa);     // recupera cantidad si es boleta (6)  -  2 si es factura
        inserciones = Math.ceil(cantsinigv / cantidad);
        posfin = (int) (cantidad - 1);

        /*
         * INSERTO LOS PRODUCTOS CON IGV
         */

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);

            for (int i = posini; i < inserciones; i++) {  //aqui entra cuando hay un producto exonerado de IGV
                total = 0;
                subtotal = 0;
                for (int j = posini; j <= posfin; j++) {
                    if (j < cantsinigv) {
                        total = total + listasinigv.get(j).getTotal();
                        subtotal = subtotal + listasinigv.get(j).getSubTotal();
                    }
                }

                if (total > 0) {
                    //INSETO EN LA CABECERA DE LA VENTA
                    String inserta1 = "";
                    String inserta2 = "";
                    procedure = conex.prepareCall("{ CALL GUARDA_VENTA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                    procedure.setString("SERIE1", obj.getSerie());
                    procedure.setString("IDPROFOR", obj.getId_proforma());
                    procedure.setInt("IdCliente", obj.getId_Cliente());
                    procedure.setInt("IdTipoPago", idipopago);
                    procedure.setInt("IdTipoVenta", tipventa);
                    procedure.setInt("IdCaja", obj.getId_Caja());
                    procedure.setString("IdBotica", idbotica);
                    procedure.setDouble("TOTAL", total);
                    procedure.setDouble("SUBTOTAL", subtotal);
                    procedure.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                    procedure.setString("DNI_MODIF", obj.getDniresp_modifica());
                    procedure.setString("RUCRESP", obj.getRUC());
                    procedure.setString("nomcliente", obj.getNomCliente());
                    procedure.setString("DNIAUX", obj.getDNI());
                    procedure.setString("DIRECCIONCLIENTE", obj.getDireccion());
                    procedure.setString("MIIDMEDICO", obj.getId_Medico());
                    procedure.setString("INCOLEGIATURA", obj.getIdcolegiatura());
                    procedure.setInt("ESDELIVERY", obj.getVentaDelivery());
                    procedure.setString("VPOLIZA", VarPoliza);
                    rs1 = procedure.executeQuery();
                    rs1.next();
                    String idventa = rs1.getString(1);

                    if (Integer.parseInt(idventa) == -2) {
                        objresultado = new ResultadoVenta(3, "", numero, espositiva, obj.getId_proforma()); //LO SENTIMOS NO HA APERTURADO CAJA
                        listaInternos.removeAll(listaInternos);
                        lisunidad.removeAll(lisunidad);
                        listfraccion.removeAll(listfraccion);
                        conex.rollback();
                        return objresultado;
                    }

                    String idventadeta = rs1.getString(3);//para venta detalle
                    String serie = rs1.getString(5);
                    String numer = rs1.getString(2);
                    String idmovde = rs1.getString(4); //para mi movimiento detalle
                    Id_TipoAlmacen = rs1.getString(6);
                    Id_TipoMovimiento = rs1.getString(7);
                    Id_Proveedor = rs1.getString(8);
                    inserta2 = rs1.getString(10);
                    inserta1 = rs1.getString(11);
                    esImprimible = rs1.getInt(12);
                    listaInternos.add(new Venta(idventa, serie, numer, total, tipventa));
                    int idvent = Integer.parseInt(idventadeta);
                    int nummonv = Integer.parseInt(idmovde);
                    Double descu = 0.0;
                    int mosunida;
                    int mosfraccion;

                    for (int j = posini; j <= posfin; j++) {
                        if (j < cantsinigv) {
                            descu = listasinigv.get(j).getPrecio_Venta() - ((listasinigv.get(j).getPrecio_Venta() * listasinigv.get(j).getDescuento()) / 100);
                            idvent++;
                            inserta1 += "('" + idbotica + "',"
                                    + "'" + (idvent) + "','" + idventa + "',"
                                    + "'" + listasinigv.get(j).getId_Tipo_Precio() + "','" + listasinigv.get(j).getId_Producto() + "',"
                                    + "'" + listasinigv.get(j).getUnidad() + "','" + listasinigv.get(j).getFraccion() + "',"
                                    + "'" + listasinigv.get(j).getPrecio_Venta() + "',"
                                    + "'" + listasinigv.get(j).getDescuento() + "','" + descu + "','" + listasinigv.get(j).getTotal() + "','" + 0 + "')" + ",";

                            procedure1 = conex.prepareCall("{ CALL MODIFICA_STOCK (?,?,?,?) }");
                            procedure1.setString("IdBotica", idbotica);
                            procedure1.setString("IdProducto", listasinigv.get(j).getId_Producto());
                            procedure1.setInt("unidad", listasinigv.get(j).getUnidad());
                            procedure1.setInt("fraccion", listasinigv.get(j).getFraccion());
                            rs = procedure1.executeQuery();
                            rs.next();

                            if (rs.getInt(1) != -1) {
                                mosunida = rs.getInt(1);
                                mosfraccion = rs.getInt(2);
                                Almacen_Stock_Empaque = rs.getInt(3);
                                Almacen_Stock_Fraccion = rs.getInt(4);
                            } else {
                                objresultado = new ResultadoVenta(1, listasinigv.get(j).getDescr_Producto(), numero, espositiva, NumeroProforma);
                                listaInternos.removeAll(listaInternos);
                                lisunidad.removeAll(lisunidad);
                                listfraccion.removeAll(listfraccion);
                                conex.rollback();
                                return objresultado;
                            }
                            nummonv++;
                            int TotalStockEmpaque = Almacen_Stock_Empaque + mosunida;
                            int Total_Stock_Fraccion = Almacen_Stock_Fraccion + mosfraccion;

                            inserta2 += "('" + idbotica + "',"
                                    + "'" + Id_TipoAlmacen + "','" + Id_TipoMovimiento + "',"
                                    + "'" + Id_Proveedor + "','" + idventa + "',"
                                    + "'" + nummonv + "','" + listasinigv.get(j).getId_Producto() + "',"
                                    + "'" + listasinigv.get(j).getPrecio_Venta() + "',"
                                    + "'" + listasinigv.get(j).getDescuento() + "','" + listasinigv.get(j).getUnidad() + "',"
                                    + "'" + listasinigv.get(j).getFraccion() + "','" + Cantidad_En_Empaque + "',"
                                    + "'" + Almacen_Stock_Empaque + "','" + Almacen_Stock_Fraccion + "',"
                                    + "'" + mosunida + "','" + mosfraccion + "','" + TotalStockEmpaque + "',"
                                    + "'" + Total_Stock_Fraccion + "','" + obj.getFecha_Venta() + "',"
                                    + "'" + obj.getId_Personal_Botica_Caja() + "','" + serie + "','" + numer + "')" + ",";

                        } else {
                            break;
                        }
                    }

                    inserta1 = inserta1.substring(0, inserta1.length() - 1);
                    st1 = conex.prepareStatement(inserta1);
                    st1.executeUpdate();

                    inserta2 = inserta2.substring(0, inserta2.length() - 1);
                    st2 = conex.prepareStatement(inserta2);
                    st2.executeUpdate();

                    //INSERTO EN VENTAS_TIPO_PAGO
                    if (marcado == 0) {
                        if (varios == true) {
                            resto = mayor - total;
                        } else {
                            resto = total;
                        }
                    } else {
                        resto = mayor;
                    }

                    if (resto < 0.0 && varios == true) {
                        for (int pos = 0; pos < lista_pagos.size(); pos++) {
                            if (pos == 0) {
                                procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                                procedure2.setString("IDBOTICA", idbotica);
                                procedure2.setString("IDVENTA", idventa);
                                procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                                procedure2.setDouble("MONTO", Math.abs(mayor));
                                procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());//
                                procedure2.setInt("IdCliente", obj.getId_Cliente());
                                procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                                procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());
                            } else {
                                if (ind == 1) {
                                    ind--;
                                } else {
                                    ind++;
                                }
                                procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                                procedure2.setString("IDBOTICA", idbotica);
                                procedure2.setString("IDVENTA", idventa);
                                procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                                procedure2.setDouble("MONTO", Math.abs(total - mayor));
                                procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());
                                procedure2.setInt("IdCliente", obj.getId_Cliente());
                                procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                                procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());
                            }
                            procedure2.executeQuery();
                            marcado = 1;
                        }

                        mayor = menor - Math.abs(total - mayor);

                    } else {
                        procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                        procedure2.setString("IDBOTICA", idbotica);
                        procedure2.setString("IDVENTA", idventa);
                        procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                        procedure2.setDouble("MONTO", total);
                        procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());
                        procedure2.setInt("IdCliente", obj.getId_Cliente());
                        procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                        procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());
                        procedure2.executeQuery();
                        marcado = 0;
                        mayor = mayor - total;
                    }

                    posini = (int) (posini + cantidad);
                    posfin = (int) (posfin + cantidad);
                } else {
                    objresultado = new ResultadoVenta(4, "", numero, espositiva, obj.getId_proforma()); //LO SENTIMOS NO HA APERTURADO CAJA
                    listaInternos.removeAll(listaInternos);
                    lisunidad.removeAll(lisunidad);
                    listfraccion.removeAll(listfraccion);
                    conex.rollback();
                    return objresultado;
                }

            }//CIERRE DEL FORM i

            lisunidad.removeAll(lisunidad);
            listfraccion.removeAll(listfraccion);
            listasinigv.removeAll(listasinigv);

            posini = 0;
            posfin = (int) (cantidad - 1);

            /*
             * RECUPERO LOS DAOS PARA LOS PRODUCTOS CON IGV
             */

            inserciones = Math.ceil(tamano / cantidad);

            if (inserciones > 0) {

                List<Venta> listaverifica = new ArrayList<Venta>();
                listaverifica = lista;


                cantsinigv = 0;
                inserciones = 0;
                int auxorden = -1;

                List<Object> ordenimpresion;
                ordenimpresion = new ArrayList<Object>();
                int maxitems = -1;
                Object[] itemprint = null;


                if (tipventa == 9){
                    for (int x = 0; x < listaverifica.size(); x++) {
                        Venta item = listaverifica.get(x);
                        item.setOrden("0");
                        listaverifica.set(x, item);
                    }
                }

                for (int x = 0; x < listaverifica.size(); x++) {
                    int orden = Integer.parseInt(listaverifica.get(x).getOrden());
                    if (auxorden != orden) {
                        maxitems = 1;
                        itemprint = new Object[2];
                        auxorden = orden;
                        inserciones = inserciones + 1;
                        itemprint[0] = inserciones;
                        itemprint[1] = maxitems;
                        ordenimpresion.add(itemprint);

                    } else {
                        maxitems = maxitems + 1;
                        itemprint[1] = maxitems;
                        int info = (int) inserciones - 1;
                        ordenimpresion.set(info, itemprint);
                    }


                }

                int PosicionInicial = 0;
                int PosicionFinal = 0;
                int IdxPosicion = 1;
                List<Object> LstPrintFinal = new ArrayList<Object>();
                Object[] itemprintfinal = null;

                for (int y = 0; y < ordenimpresion.size(); y++) {

                    Object[] valor = new Object[1];
                    valor[0] = ordenimpresion.get(y);

                    Object[] datos = new Object[2];
                    datos = (Object[]) valor[0];

                    if (Double.parseDouble(datos[1].toString()) > cantidad) {
                        PosicionInicial = 0;
                        PosicionFinal = -1;
                        double tamanoprint = 0;
                        tamanoprint = Math.ceil(Double.parseDouble(datos[1].toString()) / cantidad);

                        if (tamanoprint > 1) {
                            for (double z = 0; z < tamanoprint; z++) {
                                itemprintfinal = new Object[3];
                                itemprintfinal[0] = IdxPosicion;

                                if (z < tamanoprint - 1) {
                                    PosicionFinal = PosicionFinal + (int) cantidad ;
                                    itemprintfinal[1] = PosicionInicial;
                                    itemprintfinal[2] = PosicionFinal;

                                } else {
                                    PosicionFinal = (int) Integer.parseInt(datos[1].toString()) - 1;
                                    itemprintfinal[1] = PosicionInicial;
                                    itemprintfinal[2] = PosicionFinal;

                                }

                                LstPrintFinal.add(itemprintfinal);
                                IdxPosicion = IdxPosicion + 1;
                                PosicionInicial = PosicionFinal + 1;
                                //itemprintfinal = null;
                            }
                        }

                    } else {
                        PosicionFinal = PosicionInicial + Integer.parseInt(datos[1].toString()) - 1;
                        itemprintfinal = new Object[3];
                        itemprintfinal[0] = IdxPosicion;
                        itemprintfinal[1] = PosicionInicial;
                        itemprintfinal[2] = PosicionFinal;
                        LstPrintFinal.add(itemprintfinal);
                        //itemprintfinal = null;
                        PosicionInicial = PosicionFinal + 1;
                    }
                    IdxPosicion = IdxPosicion + 1;
                }


                //for (int i = posini; i < inserciones; i++) {
                for (int i = posini; i < LstPrintFinal.size(); i++) {
                    Object[] valor = new Object[1];
                    valor[0] = LstPrintFinal.get(i);

                    Object[] datos = new Object[3];
                    datos = (Object[]) valor[0];

                    PosicionInicial = Integer.parseInt(datos[1].toString());
                    PosicionFinal = Integer.parseInt(datos[2].toString());

                    total = 0;
                    subtotal = 0;

                    //for (int j = posini; j <= posfin; j++) {
                    for (int j = PosicionInicial; j <= PosicionFinal; j++) {
                        if (j < tamano) {
                            total = total + lista.get(j).getTotal();
                            subtotal = subtotal + lista.get(j).getSubTotal();
                        }
                    }

                    //INSETO EN LA CABECERA DE LA VENTA
                    String inserta1 = "";
                    String inserta2 = "";
                    procedure = conex.prepareCall("{ CALL GUARDA_VENTA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                    procedure.setString("SERIE1", obj.getSerie());
                    procedure.setString("IDPROFOR", obj.getId_proforma());
                    procedure.setInt("IdCliente", obj.getId_Cliente());
                    procedure.setInt("IdTipoPago", idipopago);
                    procedure.setInt("IdTipoVenta", tipventa);
                    procedure.setInt("IdCaja", obj.getId_Caja());
                    procedure.setString("IdBotica", idbotica);
                    procedure.setDouble("TOTAL", total);
                    procedure.setDouble("SUBTOTAL", subtotal);
                    procedure.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                    procedure.setString("DNI_MODIF", obj.getDniresp_modifica());
                    procedure.setString("RUCRESP", obj.getRUC());
                    procedure.setString("nomcliente", obj.getNomCliente());
                    procedure.setString("DNIAUX", obj.getDNI());
                    procedure.setString("DIRECCIONCLIENTE", obj.getDireccion());
                    procedure.setString("MIIDMEDICO", obj.getId_Medico());
                    procedure.setString("INCOLEGIATURA", obj.getIdcolegiatura());
                    procedure.setInt("ESDELIVERY", obj.getVentaDelivery());
                    procedure.setString("VPOLIZA", VarPoliza);

                    rs1 = procedure.executeQuery();
                    rs1.next();
                    String idventa = rs1.getString(1);

                    if (Integer.parseInt(idventa) == -2) {
                        objresultado = new ResultadoVenta(3, "", numero, espositiva, NumeroProforma); //LO SENTIMOS NO HA APERTURADO CAJA
                        conex.rollback();
                        listaInternos.removeAll(listaInternos);
                        return objresultado;
                    }

                    String idventadeta = rs1.getString(3);//para venta detalle
                    String serie = rs1.getString(5);
                    String numer = rs1.getString(2);
                    String idmovde = rs1.getString(4); //para mi movimiento detalle
                    Id_TipoAlmacen = rs1.getString(6);
                    Id_TipoMovimiento = rs1.getString(7);
                    Id_Proveedor = rs1.getString(8);
                    inserta2 = rs1.getString(10);
                    inserta1 = rs1.getString(11);
                    esImprimible = rs1.getInt(12);
                    listaInternos.add(new Venta(idventa, serie, numer, total, tipventa));

                    int idvent = Integer.parseInt(idventadeta);
                    int nummonv = Integer.parseInt(idmovde);
                    Double descu = 0.0;
                    int mosunida;
                    int mosfraccion;

                    //INSERTO EN LA VENTA_DETALLE Y MODIFICO MI STOCK                   

                    //for (int j = posini; j <= posfin; j++) {
                    for (int j = PosicionInicial; j <= PosicionFinal; j++) {
                        if (j < tamano) {
                            descu = lista.get(j).getPrecio_Venta() - ((lista.get(j).getPrecio_Venta() * lista.get(j).getDescuento()) / 100);
                            idvent++;

                            inserta1 += "('" + idbotica + "',"
                                    + "'" + (idvent) + "','" + idventa + "',"
                                    + "'" + lista.get(j).getId_Tipo_Precio() + "','" + lista.get(j).getId_Producto() + "',"
                                    + "'" + lista.get(j).getUnidad() + "','" + lista.get(j).getFraccion() + "',"
                                    + "'" + lista.get(j).getPrecio_Venta() + "',"
                                    + "'" + lista.get(j).getDescuento() + "','" + descu + "','" + lista.get(j).getTotal() + "','" + 0 + "')" + ",";

                            procedure1 = conex.prepareCall("{ CALL MODIFICA_STOCK (?,?,?,?) }");
                            procedure1.setString("IdBotica", idbotica);
                            procedure1.setString("IdProducto", lista.get(j).getId_Producto());
                            procedure1.setInt("unidad", lista.get(j).getUnidad());
                            procedure1.setInt("fraccion", lista.get(j).getFraccion());
                            rs = procedure1.executeQuery();
                            rs.next();

                            if (rs.getInt(1) != -1) {
                                mosunida = rs.getInt(1);
                                mosfraccion = rs.getInt(2);
                                Almacen_Stock_Empaque = rs.getInt(3);
                                Almacen_Stock_Fraccion = rs.getInt(4);
                            } else {
                                objresultado = new ResultadoVenta(1, lista.get(j).getDescr_Producto(), numero, espositiva, NumeroProforma);
                                listaInternos.removeAll(listaInternos);
                                lisunidad.removeAll(lisunidad);
                                listfraccion.removeAll(listfraccion);
                                conex.rollback();
                                return objresultado;
                            }

                            nummonv++;
                            int TotalStockEmpaque = Almacen_Stock_Empaque + mosunida;
                            int Total_Stock_Fraccion = Almacen_Stock_Fraccion + mosfraccion;

                            //inserto en MOVIMIENTOS_DETALLES

                            inserta2 += "('" + idbotica + "',"
                                    + "'" + Id_TipoAlmacen + "','" + Id_TipoMovimiento + "',"
                                    + "'" + Id_Proveedor + "','" + idventa + "',"
                                    + "'" + nummonv + "','" + lista.get(j).getId_Producto() + "',"
                                    + "'" + lista.get(j).getPrecio_Venta() + "',"
                                    + "'" + lista.get(j).getDescuento() + "','" + lista.get(j).getUnidad() + "',"
                                    + "'" + lista.get(j).getFraccion() + "','" + Cantidad_En_Empaque + "',"
                                    + "'" + Almacen_Stock_Empaque + "','" + Almacen_Stock_Fraccion + "',"
                                    + "'" + mosunida + "','" + mosfraccion + "','" + TotalStockEmpaque + "',"
                                    + "'" + Total_Stock_Fraccion + "','" + obj.getFecha_Venta() + "',"
                                    + "'" + obj.getId_Personal_Botica_Caja() + "','" + serie + "','" + numer + "')" + ",";

                        } else {
                            break;
                        }

                    }

                    inserta1 = inserta1.substring(0, inserta1.length() - 1);
                    st1 = conex.prepareStatement(inserta1);
                    st1.executeUpdate();

                    inserta2 = inserta2.substring(0, inserta2.length() - 1);
                    st2 = conex.prepareStatement(inserta2);
                    st2.executeUpdate();

                    //INSERTO EN VENTAS_TIPO_PAGO

                    if (marcado == 0) {
                        if (varios == true) {
                            resto = mayor - total;
                        } else {
                            resto = total;
                        }
                    } else {
                        resto = mayor;
                    }

                    if (resto <= 0.0 && varios == true) {
                        for (int pos = 0; pos < lista_pagos.size(); pos++) {
                            if (pos == 0) {
                                procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                                procedure2.setString("IDBOTICA", idbotica);
                                procedure2.setString("IDVENTA", idventa);
                                procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                                procedure2.setDouble("MONTO", Math.abs(mayor));
                                procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());//
                                procedure2.setInt("IdCliente", obj.getId_Cliente());
                                procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                                procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());

                            } else {
                                if (ind == 1) {
                                    ind--;
                                } else {
                                    ind++;
                                }

                                procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                                procedure2.setString("IDBOTICA", idbotica);
                                procedure2.setString("IDVENTA", idventa);
                                procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                                procedure2.setDouble("MONTO", Math.abs(total - mayor));
                                procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());
                                procedure2.setInt("IdCliente", obj.getId_Cliente());
                                procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                                procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());
                            }

                            procedure2.executeQuery();

                        }
                        mayor = menor - Math.abs(total - mayor);
                        marcado = 1;

                    } else {
                        procedure2 = conex.prepareCall("{ CALL GUARDA_TIPOS_PAGOS (?,?,?,?,?,?,?,?) }");
                        procedure2.setString("IDBOTICA", idbotica);
                        procedure2.setString("IDVENTA", idventa);
                        procedure2.setInt("TIPOPAGO", lista_pagos.get(ind).getId_TipoPago());
                        procedure2.setDouble("MONTO", total);
                        procedure2.setString("NUMERODOC", lista_pagos.get(ind).getNumDocumento());
                        procedure2.setInt("IdCliente", obj.getId_Cliente());
                        procedure2.setInt("IDPERSONAL_CAJA", obj.getId_Personal_Botica_Caja());
                        procedure2.setString("MIOPERADOR", lista_pagos.get(ind).getOperador());
                        procedure2.executeQuery();
                        mayor = mayor - total;
                        marcado = 0;
                    }

                    posini = (int) (posini + cantidad);
                    posfin = (int) (posfin + cantidad);

                } //CIERRE DEL FOR i

            } //CIERRE DEL IF

            /* VERIFICO SI EXISTE UN DESCUENTO ESPECIAL DE COASOCIADOS */
            if (EntidadProforma != null) {
                CallableStatement procedure5 = conex.prepareCall("{ call GUARDA_PROFORMA_DESCUENTO (?,?,?,?,?,?,?,?,?,?,?)}");
                procedure5.setString(1, EntidadProforma.getId_Boticas());
                procedure5.setString(2, EntidadProforma.getId_Tipo_Precio());
                procedure5.setDouble(3, EntidadProforma.getSubTotal());
                procedure5.setDouble(4, EntidadProforma.getIGV());
                procedure5.setDouble(5, EntidadProforma.getTotal());
                procedure5.setInt(6, EntidadProforma.getId_Personal_Botica_Venta());
                procedure5.setDouble(7, EntidadProforma.getPrecio_Venta());
                procedure5.setDouble(8, EntidadProforma.getDescuento());
                procedure5.setDouble(9, EntidadProforma.getPvx());
                procedure5.setDouble(10, EntidadProforma.getDsctoAdicional());
                procedure5.setString(11, EntidadProforma.getIdproducto());
                rs = procedure5.executeQuery();
                rs.next();
                NumeroProforma = rs.getString(1);
                rs.close();
                espositiva = true;
            }

            if (listaInternos.size() > 0) {
                conex.commit();
                objresultado = new ResultadoVenta(0, "", numero, espositiva, NumeroProforma);

                try {
                    //METODO QUE REALIZA LA IMPRESION                 
                    if (esImprimible == 1) {
                        if (tipventa == 9) {
                            Impresion_Ticketera(listaInternos, idbotica, tipventa);
                        } else {
                            GeneraImpresion(listaInternos);
                        }
                    }

                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }


        } catch (Exception ex) {
            try {
                System.out.println(ex.getMessage());
                objresultado = new ResultadoVenta(2, "", numero, espositiva, NumeroProforma);
                listaInternos.removeAll(listaInternos);
                lisunidad.removeAll(lisunidad);
                listfraccion.removeAll(listfraccion);
                listasinigv.removeAll(listasinigv);
                lista.removeAll(lista);
                lista_pagos.removeAll(lista_pagos);
                conex.rollback();
            } catch (SQLException ex1) {
                System.out.println(ex1.getMessage());
            }

        } finally {
            if (null != conex) {
                try {
                    listaInternos.removeAll(listaInternos);
                    lisunidad.removeAll(lisunidad);
                    listfraccion.removeAll(listfraccion);
                    lista.removeAll(lista);
                    listasinigv.removeAll(listasinigv);
                    conex.close();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
        return objresultado;
    }

    private boolean EsImprimible(int tipventa) {
        boolean valor = true;

        try {
            CallableStatement procedure = conex.prepareCall("{call ES_IMPRIMIBLE(?)  }");
            procedure.setInt("TIPVENTA", tipventa);
            rs = procedure.executeQuery();
            rs.next();

            if (rs.getInt(1) == 0) {
                valor = false;
            }
            rs.close();
        } catch (Exception ex) {
            System.out.println("Error Lista_Internos_Ventas" + ex.getMessage());
        }

        return valor;

    }

    public List<Venta> Lista_Mostrar_Cargos(Venta obj) {
        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_INTERNOS_MOVIMIENTOS (?,?,?,?,?) }");
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setString("ALMACEN", obj.getAlmacen());
            procedure.setString("IDPROVEEDOR", obj.getProveedor());
            procedure.setString("DOC", obj.getDocumento());
            procedure.setString("IDTIPMOV", obj.getIdMovimiento());
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(
                        new Venta(rs.getString("Numero_Documento"),
                        rs.getString("Serie"), rs.getString("Numero"),
                        rs.getDate("Fecha_Documento"), rs.getDate("Fecha_Registro"), rs.getString("vendedor")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Mostrar_Cargos" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;
    }

    public List<Venta> Lista_Internos_Ventas(Venta objventa, int op) {
        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_INTERNOS_VENTAS (?,?,?) }");
            procedure.setString("IDBOTICA", objventa.getId_Botica());
            procedure.setString("IDINTERNO", objventa.getId_Venta());
            procedure.setInt("OPCION", op);
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Venta"),
                        rs.getDate("Fecha_Venta"), rs.getString("Nombre_RazonSocial"),
                        rs.getString("TIPOVENTA"), rs.getString("TIPOPAGO"),
                        rs.getDouble("SubTotal"), rs.getDouble("Total"),
                        rs.getString("Serie"), rs.getString("Numero"),
                        rs.getString("Direccion"), rs.getString("RUC_DNI"),
                        rs.getString("DNI"), rs.getString("VENDEDOR"),
                        rs.getDouble("IGV"), rs.getString("CAJERO"), rs.getInt("Id_Cliente")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Internos_Ventas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;

    }


        public List<Venta> Lista_Descargos_Inv(Venta objventa) {
        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_DESCARGO_INV (?,?,?) }");
            procedure.setString("IDBOTICA", objventa.getId_Botica());
            procedure.setString("ISERIE", objventa.getSerie());
            procedure.setString("INUMERO", objventa.getNumero());
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("BoticaDestino"),
                        rs.getString("Partida"),
                        rs.getDate("Docdat"), rs.getString("Codalm"),
                        rs.getString("Typmov"), rs.getString("Docnum"),
                        rs.getString("Codpro"), rs.getString("Stkprf"),
                        rs.getString("Despro"), rs.getString("Codlab"),
                        rs.getString("Codprv"), rs.getString("Dtopro"),
                        rs.getString("Prisal"), rs.getString("Stksed"),
                        rs.getString("Stkfra"), rs.getString("Codbar"),
                        rs.getDate("Datreg"),rs.getString("Doctot"),rs.getDate("Fecha_Recepcion")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error RECUPERA_DESCARGO_INV" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;

    }

    public List<Venta> Lista_Internos_Ventas_SOAT(Venta objventa, int op) {
        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_INTERNOS_VENTAS_SOAT (?,?,?) }");
            procedure.setString("IDBOTICA", objventa.getId_Botica());
            procedure.setString("IDINTERNO", objventa.getId_Venta());
            procedure.setInt("OPCION", op);
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Venta"),
                        rs.getDate("Fecha_Venta"), rs.getString("Nombre_RazonSocial"),
                        rs.getString("TIPOVENTA"), rs.getString("TIPOPAGO"),
                        rs.getDouble("SubTotal"), rs.getDouble("Total"),
                        rs.getString("Serie"), rs.getString("Numero"),
                        rs.getString("Direccion"), rs.getString("RUC_DNI"),
                        rs.getString("DNI"), rs.getString("VENDEDOR"),
                        rs.getDouble("IGV"), rs.getString("CAJERO"), rs.getInt("Id_Cliente"),
                        rs.getString("numeroserie"), rs.getString("placa"), rs.getString("Poliza"), rs.getString("Certificado")));
            }


            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Internos_Ventas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;

    }

    public List<Venta> Busca_Internos_Movimientos(Venta objventa, int op) {
        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call BUSCA_INTERNOS_MOVIMIENTOS (?,?,?,?) }");
            procedure.setString("IDBOTICA", objventa.getId_Botica());
            procedure.setString("IDINTERNO", objventa.getId_Venta());
            procedure.setString("FECHA1", objventa.getFecha1());
            procedure.setString("FECHA2", objventa.getFecha2());
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Venta"),
                        rs.getDate("Fecha_Venta"),
                        rs.getDouble("Total"), rs.getString("Serie"), rs.getString("Numero"),
                        rs.getString("VENDEDOR"), rs.getString("CAJERO"), rs.getInt("Anulado")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Internos_Ventas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;

    }

    public List<Venta> Lista_Int_Ventas_Fecha(Venta objventa) {

        List<Venta> listaventas = new ArrayList<Venta>();
        String idventa = objventa.getId_Venta() + '%';

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LIS_INTER_VENTAS_RANGO (?,?,?,?) }");
            procedure.setString("IDBOTICA", objventa.getId_Botica());
            procedure.setString("IDINTERNO", idventa);
            procedure.setString("FECHA1", objventa.getFecha1().toString());
            procedure.setString("FECHA2", objventa.getFecha2().toString());
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Venta"),
                        rs.getDate("Fecha_Venta"), rs.getString("Nombre_RazonSocial"),
                        rs.getString("TIPOVENTA"), rs.getString("TIPOPAGO"),
                        rs.getDouble("SubTotal"), rs.getDouble("Total"),
                        rs.getString("Serie"), rs.getString("Numero"),
                        rs.getString("Direccion"), rs.getString("RUC_DNI"),
                        rs.getString("DNI"), rs.getString("VENDEDOR"), rs.getDouble("IGV"),
                        rs.getString("CAJERO"), rs.getDouble("NOTOMAR"), rs.getInt("Id_Cliente")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Int_Ventas_Fecha" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return listaventas;

    }

    public List<Venta> ListaVenta_Detalle(Venta objventa) {

        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_VENTA ('" + objventa.getId_Botica() + "','" + objventa.getId_Venta() + "') }");
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Producto"), rs.getString("PRODUCTO"),
                        rs.getInt("Empaque"), rs.getInt("unidad"), rs.getInt("fraccion"),
                        rs.getDouble("Precio_Venta"), rs.getDouble("Descuento"),
                        rs.getDouble("Precio_Venta_Final"),
                        rs.getDouble("Total"), rs.getDouble("IGV_Exonerado"), rs.getInt("Mostrador_Stock_Empaque"),
                        rs.getInt("Mostrador_Stock_Fraccion")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return listaventas;
    }

    /**********************************************
     *
     * Programador  : Gino Paredes Zurita
     * Fecha        : 16-11-2013
     * Modulo       : Pre-Anulados
     * Tipo         : NUEVO MODULO - FormPreAnulacionInterno.java
     *
     ***********************************************/
    public List<Venta> ListaVenta_Detalle_pre(Venta objventa) {

        List<Venta> listaventas = new ArrayList<Venta>();

        try {
            listaventas.clear();
            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_VENTA_PRE ('" + objventa.getId_Botica() + "','" + objventa.getId_Venta() + "') }");
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Botica"), rs.getString("Interno"), rs.getInt("preanulado"), rs.getInt("anulado")));
            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return listaventas;
    }
    /*
     * fin
     */

    public boolean InsertaNotaCredito(Venta obj, List<Venta> lista) {
        boolean resul = false;
        String serie;
        String numero;
        String interno;
        double total;
        String inserta1 = "";
        int Cantidad_En_Empaque = 0;
        int Almacen_Stock_Empaque = 0;
        int Almacen_Stock_Fraccion = 0;
        int TotalStockEmpaque = 0;
        int Total_Stock_Fraccion;
        String Id_TipoAlmacen = "";
        String Id_TipoMovimiento = "";
        String Id_Proveedor = "";
        PreparedStatement st1 = null;
        CallableStatement procedure2;
        CallableStatement procedure3;

        try {


            idbotica = obj.getId_Botica();
            serie = obj.getSerie();
            numero = obj.getNumero();
            total = obj.getTotal();
            interno = obj.getId_Venta();

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            procedure2 = conex.prepareCall(" { CALL GUARDA_MOVIMIENTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
            procedure2.setString("IdBotica", idbotica);
            procedure2.setString("SERIE", serie);
            procedure2.setString("NUMERO", numero);
            procedure2.setDate("FechaDocumento", (Date) obj.getFecha_Venta());
            procedure2.setDate("FECHAREGISTRO", (Date) obj.getFecha_Venta());
            procedure2.setDouble("TOTAL", total);
            procedure2.setDouble("Descuento", obj.getDescuento());
            procedure2.setInt("IDPERSONAL", obj.getId_Personal_Botica_Venta());
            procedure2.setString("INTERNO", interno);
            procedure2.setString("CLIENTE", obj.getNomCliente());
            procedure2.setString("DNIAUX", obj.getDNI());
            procedure2.setString("RUXAUX", obj.getRUC());
            procedure2.setString("OBSERVACION", obj.getDESCRIPCION());
            procedure2.setString("DIRECCION", obj.getDireccion());
            procedure2.setDouble("SUBTOTAL", obj.getSubTotal());

            rs = procedure2.executeQuery();
            rs.next();
            int nummonv = rs.getInt(1);
            Id_TipoAlmacen = rs.getString(2);
            Id_TipoMovimiento = rs.getString(3);
            Id_Proveedor = rs.getString(4);
            inserta1 = rs.getString(6);

            String documento = serie + "-" + numero;
            nummonv++;

            //MODIFICO STOCK DE PRODUCTO BOTICA
            for (int i = 0; i < lista.size(); i++) {
                procedure3 = conex.prepareCall("CALL MODIFICA_STOCK_PRODUCTO_BOTICA('" + lista.get(i).getUnidad() + "',"
                        + "'" + lista.get(i).getFraccion() + "' ,'" + idbotica + "',"
                        + "'" + lista.get(i).getId_Producto() + "')");

                rs = procedure3.executeQuery();
                rs.next();
                int mosunida = rs.getInt(1);
                int mosfraccion = rs.getInt(2);
                Almacen_Stock_Empaque = rs.getInt(3);
                Almacen_Stock_Fraccion = rs.getInt(4);
                TotalStockEmpaque = Almacen_Stock_Empaque + mosunida;
                Total_Stock_Fraccion = Almacen_Stock_Fraccion + mosfraccion;

                inserta1 += "('" + idbotica + "','" + Id_TipoAlmacen + "',"
                        + "'" + Id_TipoMovimiento + "','" + Id_Proveedor + "',"
                        + "'" + documento + "','" + nummonv + "','" + lista.get(i).getId_Producto() + "',"
                        + "'" + lista.get(i).getPrecio_Venta() + "','" + lista.get(i).getDescuento() + "',"
                        + "'" + lista.get(i).getUnidad() + "','" + lista.get(i).getFraccion() + "',"
                        + "'" + Cantidad_En_Empaque + "','" + Almacen_Stock_Empaque + "',"
                        + "'" + Almacen_Stock_Fraccion + "','" + mosunida + "','" + mosfraccion + "',"
                        + "'" + TotalStockEmpaque + "','" + Total_Stock_Fraccion + "',"
                        + "'" + obj.getFecha_Venta() + "',"
                        + "'" + obj.getId_Personal_Botica_Venta() + "','" + serie + "','" + numero + "')" + ",";

                nummonv++;

            }

            inserta1 = inserta1.substring(0, inserta1.length() - 1);
            st1 = conex.prepareStatement(inserta1);
            st1.executeUpdate();
            conex.commit();
            rs.close();
            resul = true;

        } catch (SQLException ex) {
            try {
                System.out.println("ERROR EL INSERTAR EN TABLA MOVIMIENTOS SE HIZO UN ROLLBACK: " + ex.getMessage());
                conex.rollback();
            } catch (Exception ex1) {
                System.out.println("ERROR " + ex.getMessage());
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resul;

    }

    public List<NotaCredito> listaNotaCredito(String numdocumento, String idbotica) {
        List<NotaCredito> lista = new ArrayList<NotaCredito>();

        try {
            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_NOTA_CREDITO ('" + idbotica + "','" + numdocumento + "') }");
            procedure.execute();
            rs = procedure.getResultSet();

            while (rs.next()) {
                lista.add(new NotaCredito(rs.getString("Numero_Documento"),
                        rs.getDate("Fecha_Documento"), rs.getDouble("Total"),
                        rs.getString("Id_Venta_Nota_Credito")));
            }

            rs.close();

        } catch (Exception ex) {
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return lista;

    }

    public void Impresion_Ticketera(List<Venta> listaInternos, String idbotica, int tipventa) {
        String Direccion = "", DireccionFiscal = "", botica = "", RUC = "", Delivery = "", DNI = "", PLACA = "";
        String correo = "", serie = null, numero = "", fecha = "", maq = "", hora = "";
        Double Total = 0.00;
        String cliente = "", vendedor = null, cajero = null;
        List<String> ProductoDescripcion = new ArrayList<String>();
        List<String> Cantidad = new ArrayList<String>();
        List<Double> Precio = new ArrayList<Double>();
        String CantidadPedida = "", Np = "";
        Integer Largo = 0;
        int lineas = 0;
        CallableStatement procedure, procedure1, procedure3;
        FileWriter file;
        BufferedWriter buffer;
        PrintWriter ps;

        try {

            for (int i = 0; i < listaInternos.size(); i++) {
                String miinterno = listaInternos.get(i).getId_Venta().toString().trim();
                procedure = conex.prepareCall("{ call RECUPERA_DATA_TICKET_BOLETA(?,?) }");
                procedure.setString(1, miinterno);
                procedure.setString(2, idbotica);
                rs = procedure.executeQuery();

                procedure1 = conex.prepareCall("{ call RECUPERA_DETALLE_TICKET_BOLETA(?,?) }");
                procedure1.setString(1, miinterno);
                procedure1.setString(2, idbotica);
                rs1 = procedure1.executeQuery();

                procedure3 = conex.prepareCall("{ call RECUPERA_MONTOTIPOVENTA(?) }");
                procedure3.setInt("TIPVENTA", tipventa);
                rs2 = procedure3.executeQuery();

                ProductoDescripcion.removeAll(ProductoDescripcion);
                Cantidad.removeAll(Cantidad);
                Precio.removeAll(Precio);

                while (rs.next()) {
                    botica = rs.getString("mibotica");
                    Direccion = rs.getString("Direccion");
                    DireccionFiscal = rs.getString("DIRECCIONFISCAL");
                    serie = rs.getString("Serie");
                    numero = rs.getString("Numero");
                    fecha = String.valueOf(rs.getDate("Fecha_Venta"));
                    hora = rs.getString("Hora_Venta");
                    Total = rs.getDouble("Total");
                    vendedor = rs.getString("vendedor");
                    cajero = rs.getString("cajero");
                    RUC = rs.getString("RUCEmpresa");
                    Delivery = rs.getString("Delivery");
                    correo = rs.getString("CorreoEmpresa");
                    cliente = rs.getString("NOMCLIENTE");
                    maq = rs.getString("MISERIE");
                    DNI = rs.getString("DNICLIENTE");
                    PLACA = rs.getString("PLACA");
                }

                while (rs1.next()) {
                    ProductoDescripcion.add(rs1.getString(2));
                    if (rs1.getInt(3) > 0) {
                        CantidadPedida = String.valueOf(rs1.getInt(3));
                    } else {
                        CantidadPedida = "";
                    }
                    if (rs1.getInt(4) > 0) {
                        CantidadPedida = CantidadPedida + "F" + String.valueOf(rs1.getInt(4));
                    }
                    Cantidad.add(CantidadPedida);
                    Precio.add(rs1.getDouble(5));
                }

                rs2.next();
                double MiMonto = rs2.getDouble("Monto");

                fecha = objFechaHora.MysqlToJuliano(fecha).toString();
                BigDecimal bd = new BigDecimal(Total);
                bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                Total = bd.doubleValue();
                String sumaTotal = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                file = new FileWriter(Impresora_Boleta);
                buffer = new BufferedWriter(file);
                ps = new PrintWriter(buffer);

                setFormato(1, ps);
                ps.println(botica);
                ps.println(Direccion);
                ps.println(DireccionFiscal);
                ps.println("RUC :" + RUC);
                Dibuja_Linea(ps);
                ps.println("Ticket    :" + serie + " - " + numero);
                ps.println("S/N       :" + maq);
                ps.println("Fecha     :" + fecha + "  Hora : " + hora);
                ps.println("Caj   : " + cajero + " Ven : " + vendedor + " Int : " + miinterno);
                if (PLACA != null) {
                    ps.println("Placa   : " + PLACA);
                }
                Dibuja_Linea(ps);
                ps.println("Sr(a)     :" + cliente);
                if (Total >= MiMonto) {
                    ps.println("DNI       :" + DNI);
                }
                Dibuja_Linea(ps);
                ps.println("Cant     " + "Descripcion" + "             " + "PVP");
                Dibuja_Linea(ps);
                lineas = 7;

                /*
                --------  OBTENER EL ANCHO MAS GRANDE LA CANTIDAD
                 */

                int maximo = Obtener_Ancho(Cantidad);
                maximo++;

                for (int k = 0; k < ProductoDescripcion.size(); k++) {
                    String cantidad = "";

                    for (Integer inicioP = k; inicioP < ProductoDescripcion.size(); inicioP++) {
                        cantidad = "";
                        int Largo1 = Cantidad.get(inicioP).toString().trim().length();

                        if (Largo1 > maximo) {
                            cantidad = Cantidad.get(inicioP).toString().substring(0, maximo);
                        } else {
                            cantidad = Cantidad.get(inicioP).toString().trim();
                            for (Integer cor = Largo1; cor < maximo; cor++) {
                                cantidad = cantidad + " ";
                            }
                        }

                        Largo = 0;
                        Largo = ProductoDescripcion.get(inicioP).toString().length();

                        if (Largo > 25) {
                            Np = ProductoDescripcion.get(inicioP).toString().substring(0, 24);
                            String espacio1 = "";
                            for (int lpp = Np.length(); lpp < 29; lpp++) {
                                espacio1 += " ";
                            }

                            BigDecimal bd1 = new BigDecimal(Precio.get(k));
                            Np = Np + espacio1 + bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                            String espacio = "";
                            for (int ki = 0; ki < maximo; ki++) {
                                espacio += " ";
                            }
                            Np = Np + "\n" + espacio + ProductoDescripcion.get(inicioP).toString().substring(24, Largo);

                        } else {
                            Np = ProductoDescripcion.get(inicioP).toString().trim();

                            for (Integer cor = ProductoDescripcion.get(inicioP).toString().length(); cor < 20; cor++) {
                                Np = Np + " ";
                            }

                            String espacio1 = "";
                            for (int lpp = Np.length(); lpp < 29; lpp++) {
                                espacio1 += " ";
                            }

                            BigDecimal bd1 = new BigDecimal(Precio.get(k));
                            Np = Np + espacio1 + bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                        }

                        cantidad = cantidad + Np;
                        break;

                    }
                    ps.println(cantidad);
                    lineas++;
                }

                Dibuja_Linea(ps);
                ps.println("TOTAL         : S./ " + sumaTotal);
                ps.println();
                String ultimo = "              " + Delivery;
                ultimo += "                   " + correo;
                ps.println(ultimo);
                ps.println("  NO SE ACEPTAN CAMBIOS NI DEVOLUCIONES");
                ps.println("        GRACIAS POR SU COMPRA          ");
                correr(10, ps);
                cortar(ps);
                ps.close();
                rs.close();
                rs1.close();
                rs2.close();
                listaInternos.set(i, null);
            }

        } catch (FileNotFoundException ex) {
            System.out.println("Error Impresora FileNotFoundException catch" + ex.getMessage());
            Error_Impresora(ex.getMessage(), listaInternos);
        } catch (IOException et) {
            System.out.println("Error Impresora IOException catch" + et.getMessage());
            Error_Impresora(et.getMessage(), listaInternos);
        } catch (Exception pe) {
            System.out.println("Error Impresora Exception  catch" + pe.getMessage());
            Error_Impresora("Error Impresora Exception", listaInternos);
        }
    }

    public boolean ReImpresion_Ticketera(List<Venta> listaInternos, String idbotica, int tipventa) {
        String Direccion = "", DireccionFiscal = "", botica = "", RUC = "", Delivery = "", correo = "", PLACA = "";
        String fecha = "";
        String maq = "", hora = "", serie = null, numero = "";
        Double Total = 0.00;
        String cliente = "", vendedor = null, cajero = null, DNI = null;
        List<String> ProductoDescripcion = new ArrayList<String>();
        List<String> Cantidad = new ArrayList<String>();
        List<Double> Precio = new ArrayList<Double>();
        String CantidadPedida = "";
        Integer Largo = 0;
        String Np = "";
        int lineas = 0;
        boolean valor = false;
        CallableStatement procedure, procedure1, procedure3;

        try {

            conex = new ConexionPool().getConnection();

            for (int i = 0; i < listaInternos.size(); i++) {

                String miinterno = listaInternos.get(i).getId_Venta().toString().trim();
                procedure = conex.prepareCall("{ call RECUPERA_DATA_TICKET_BOLETA(?,?) }");
                procedure.setString(1, miinterno);
                procedure.setString(2, idbotica);
                rs = procedure.executeQuery();

                procedure1 = conex.prepareCall("{ call RECUPERA_DETALLE_TICKET_BOLETA(?,?) }");
                procedure1.setString(1, miinterno);
                procedure1.setString(2, idbotica);
                rs1 = procedure1.executeQuery();

                procedure3 = conex.prepareCall("{ call RECUPERA_MONTOTIPOVENTA(?) }");
                procedure3.setInt("TIPVENTA", tipventa);
                rs2 = procedure3.executeQuery();

                ProductoDescripcion.removeAll(ProductoDescripcion);
                Cantidad.removeAll(Cantidad);
                Precio.removeAll(Precio);

                while (rs.next()) {
                    botica = rs.getString("mibotica");
                    Direccion = rs.getString("Direccion");
                    DireccionFiscal = rs.getString("DIRECCIONFISCAL");
                    serie = rs.getString("Serie");
                    numero = rs.getString("Numero");
                    fecha = String.valueOf(rs.getDate("Fecha_Venta"));
                    hora = rs.getString("Hora_Venta");
                    Total = rs.getDouble("Total");
                    vendedor = rs.getString("vendedor");
                    cajero = rs.getString("cajero");
                    RUC = rs.getString("RUCEmpresa");
                    Delivery = rs.getString("Delivery");
                    correo = rs.getString("CorreoEmpresa");
                    cliente = rs.getString("NOMCLIENTE");
                    maq = rs.getString("MISERIE");
                    DNI = rs.getString("DNICLIENTE");
                    PLACA = rs.getString("PLACA");
                }

                while (rs1.next()) {
                    ProductoDescripcion.add(rs1.getString(2));
                    if (rs1.getInt(3) > 0) {
                        CantidadPedida = String.valueOf(rs1.getInt(3));
                    } else {
                        CantidadPedida = "";
                    }

                    if (rs1.getInt(4) > 0) {
                        CantidadPedida = CantidadPedida + "F" + String.valueOf(rs1.getInt(4));
                    }

                    Cantidad.add(CantidadPedida);
                    Precio.add(rs1.getDouble(5));
                }

                rs2.next();
                double MiMonto = rs2.getDouble("Monto");

                fecha = objFechaHora.MysqlToJuliano(fecha).toString();
                BigDecimal bd = new BigDecimal(Total);
                bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                Total = bd.doubleValue();
                String sumaTotal = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                FileWriter file = new FileWriter(Impresora_Boleta);
                BufferedWriter buffer = new BufferedWriter(file);
                PrintWriter ps = new PrintWriter(buffer);

                setFormato(1, ps);
                ps.println(botica);
                ps.println(Direccion);
                ps.println(DireccionFiscal);
                ps.println("RUC :" + RUC);
                Dibuja_Linea(ps);
                ps.println("Ticket    :" + serie + " - " + numero);
                ps.println("S/N       :" + maq);
                ps.println("Fecha     :" + fecha + "  Hora : " + hora);
                ps.println("Caj   : " + cajero + " Ven : " + vendedor + " Int : " + miinterno);
                if (PLACA != null) {
                    ps.println("Placa   : " + PLACA);
                }
                Dibuja_Linea(ps);
                ps.println("Sr(a)     :" + cliente);
                if (Total >= MiMonto) {
                    ps.println("DNI       :" + DNI);
                }
                Dibuja_Linea(ps);
                ps.println("Cant     " + "Descripcion" + "             " + "PVP");
                Dibuja_Linea(ps);
                lineas = 7;

                /*
                --------  OBTENER EL ANCHO MAS GRANDE LA CANTIDAD
                 */

                int maximo = Obtener_Ancho(Cantidad);
                maximo++;

                for (int k = 0; k < ProductoDescripcion.size(); k++) {
                    String cantidad = "";

                    for (Integer inicioP = k; inicioP < ProductoDescripcion.size(); inicioP++) {
                        cantidad = "";
                        int Largo1 = Cantidad.get(inicioP).toString().trim().length();

                        if (Largo1 > maximo) {
                            cantidad = Cantidad.get(inicioP).toString().substring(0, maximo);
                        } else {
                            cantidad = Cantidad.get(inicioP).toString().trim();
                            for (Integer cor = Largo1; cor < maximo; cor++) {
                                cantidad = cantidad + " ";
                            }
                        }

                        Largo = 0;
                        Largo = ProductoDescripcion.get(inicioP).toString().length();

                        if (Largo > 25) {
                            Np = ProductoDescripcion.get(inicioP).toString().substring(0, 24);
                            String espacio1 = "";
                            for (int lpp = Np.length(); lpp < 29; lpp++) {
                                espacio1 += " ";
                            }

                            BigDecimal bd1 = new BigDecimal(Precio.get(k));
                            Np = Np + espacio1 + bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                            String espacio = "";
                            for (int ki = 0; ki < maximo; ki++) {
                                espacio += " ";
                            }
                            Np = Np + "\n" + espacio + ProductoDescripcion.get(inicioP).toString().substring(24, Largo);

                        } else {
                            Np = ProductoDescripcion.get(inicioP).toString().trim();

                            for (Integer cor = ProductoDescripcion.get(inicioP).toString().length(); cor < 20; cor++) {
                                Np = Np + " ";
                            }

                            String espacio1 = "";
                            for (int lpp = Np.length(); lpp < 29; lpp++) {
                                espacio1 += " ";
                            }

                            BigDecimal bd1 = new BigDecimal(Precio.get(k));
                            Np = Np + espacio1 + bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                        }

                        cantidad = cantidad + Np;
                        break;

                    }
                    ps.println(cantidad);
                    lineas++;
                }

                Dibuja_Linea(ps);
                ps.println("TOTAL         : S./ " + sumaTotal);
                ps.println();
                String ultimo = "              " + Delivery;
                ultimo += "                   " + correo;
                ps.println(ultimo);
                ps.println("  NO SE ACEPTAN CAMBIOS NI DEVOLUCIONES");
                ps.println("        GRACIAS POR SU COMPRA          ");
                correr(10, ps);
                cortar(ps);
                ps.close();
                rs.close();
                rs1.close();
                rs2.close();
                listaInternos.set(i, null);
                valor = true;
            }

            return valor;
        } catch (FileNotFoundException ex) {
            System.out.println("Error Impresora FileNotFoundException catch" + ex.getMessage());
        } catch (IOException et) {
            System.out.println("Error Impresora IOException catch" + et.getMessage());
        } catch (Exception pe) {
            System.out.println("Error Impresora Exception  catch" + pe.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return valor;
    }

    private void Dibuja_Linea(PrintWriter ps) {
        try {
            ps.println("----------------------------------------");
        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private int Obtener_Ancho(List<String> Cantidad) {
        int mimayor = Cantidad.get(0).length();

        for (int kp = 0; kp < Cantidad.size(); kp++) {
            int pmayor = Cantidad.get(kp).length();
            if (pmayor > mimayor) {
                mimayor = pmayor;
            }
        }
        return mimayor;
    }

    private void cortar(PrintWriter ps) {

        try {
            char[] ESC_CUT_PAPER = new char[]{0x1B, 'm'};
            ps.write(ESC_CUT_PAPER);

        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private void correr(int fin, PrintWriter pw) {
        try {
            int i = 0;
            for (i = 1; i <= fin; i++) {
                pw.println("");
            }
        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private void setFormato(double formato, PrintWriter pw) {
        try {
            char[] ESC_CUT_PAPER = new char[]{0x1B, '!', (char) formato};
            pw.write(ESC_CUT_PAPER);

        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private void setRojo(PrintWriter pw) {
        try {
            char[] ESC_CUT_PAPER = new char[]{0x1B, 'r', 1};
            pw.write(ESC_CUT_PAPER);
        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private void setNegro(PrintWriter pw) {
        try {
            char[] ESC_CUT_PAPER = new char[]{0x1B, 'r', 0};
            pw.write(ESC_CUT_PAPER);

        } catch (Exception e) {
            System.out.print(e);
        }
    }

    private void GeneraImpresion(List<Venta> listaInternos) {

        List<String> ProductoDescripcion = new ArrayList<String>();
        List<String> Labs = new ArrayList<String>();
        List<Integer> CantidadU = new ArrayList<Integer>();
        List<Integer> CantidadF = new ArrayList<Integer>();
        List<Double> Precio = new ArrayList<Double>();
        List<Double> PrecioF = new ArrayList<Double>();
        Double IGV = 0.00, Totalizado = 0.00, sumaTotal = 0.00, SubSub = 0.00;
        String cliente = "", Np = "", salesman = "", direccion = "", RUC = "", Direccion = null, PLACA = "";
        Integer Largo = 0;
        String fecha = null;
        Integer Espacios = 7;
        DecimalFormat MiFormato = new DecimalFormat("0.00");
        int confirma = 0;
        FileOutputStream os = null;
        PrintStream ps = null;
        CallableStatement procedure = null;

        try {

            for (int i = 0; i < listaInternos.size(); i++) {
                String miinterno = listaInternos.get(i).getId_Venta().toString().trim();
                if (listaInternos.get(i).getId_Tipo_Venta() == 1) {//IMPRIMO BOLETA
                    if (i > 0) {
                        JOptionPane.showMessageDialog(ventana, " " + (i + 1) + " Interno de Venta : " + miinterno + " ", "Impresion de Internos de Ventas", JOptionPane.INFORMATION_MESSAGE);
                        confirma = 1;
                    } else {
                        confirma = 1;
                    }

                    if (confirma == 1) {
                        os = new FileOutputStream(Impresora_Boleta);
                        ps = new PrintStream(os);
                        sumaTotal = 0.00;

                        if (conex.isClosed()) {
                            conex = new ConexionPool().getConnection();
                        }

                        procedure = conex.prepareCall("{ call RECUPERA_DATA_PARA_BOLETA (?,?) }");
                        procedure.setString(1, miinterno);
                        procedure.setString(2, idbotica);
                        rs = procedure.executeQuery();

                        while (rs.next()) {
                            Direccion = rs.getString(9);
                            cliente = rs.getString(1);
                            PLACA = rs.getString(10);
                            Largo = cliente.length();
                            if (Largo < 35) {
                                for (Integer ini = Largo; ini < 33; ini++) {
                                    cliente = cliente + " ";
                                }
                            }

                            cliente = cliente + " ";
                            ProductoDescripcion.add(rs.getString(4));
                            Labs.add(rs.getString(5));
                            CantidadU.add(Integer.valueOf(rs.getString(6)));
                            CantidadF.add(Integer.valueOf(rs.getString(7)));
                            Precio.add(rs.getDouble(8));
                            sumaTotal = sumaTotal + rs.getDouble(8);
                            fecha = rs.getDate(2).toString();
                            salesman = rs.getString(3);
                        }

                        BigDecimal bd = new BigDecimal(sumaTotal);
                        bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
                        sumaTotal = bd.doubleValue();
                        String sumaTotal_1 = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();

                        ps.println();
                        ps.println();

                        String nInterno = "";
                        nInterno = miinterno;

                        if (Direccion != null) {
                            ps.print("    " + Direccion);
                        }

                        ps.println("Ven: " + salesman + "                                " + objFechaHora.RetornaHora());
                        ps.println(cliente + " " + objFechaHora.MysqlToJuliano(fecha) + "   " + nInterno);
                        if (PLACA != null) {
                            ps.println("Placa   : " + PLACA);
                        } else {
                            ps.println("");
                        }

                        for (Integer inicioP = 0; inicioP < ProductoDescripcion.size(); inicioP++) {
                            String formato = "";
                            Largo = 0;
                            Largo = ProductoDescripcion.get(inicioP).toString().length();

                            if (Largo > 33) {
                                Np = ProductoDescripcion.get(inicioP).toString().substring(0, 32);
                            } else {
                                Np = ProductoDescripcion.get(inicioP).toString();

                                for (Integer cor = ProductoDescripcion.get(inicioP).toString().length(); cor < 32; cor++) {
                                    Np = Np + " ";
                                }

                            }

                            if (CantidadF.get(inicioP) > 0) {
                                formato = "F" + CantidadF.get(inicioP).toString();
                            }

                            if (CantidadU.get(inicioP) > 0) {
                                formato = CantidadU.get(inicioP).toString() + formato;
                            }

                            String DecPrecio = "";
                            DecPrecio = Precio.get(inicioP).toString();

                            if (DecPrecio.length() < 6) {
                                for (Integer j = DecPrecio.length(); j < 6; j++) {
                                    DecPrecio = " " + DecPrecio;
                                }
                            }

                            if (formato.length() < 9) {
                                for (Integer j = formato.length(); j < 9; j++) {
                                    formato = " " + formato;
                                }
                            }


                            String NumeroPrecio = MiFormato.format(Precio.get(inicioP)).toString().replace(",", ".");

                            if (NumeroPrecio.length() < 14) {
                                for (Integer XD = NumeroPrecio.length(); XD < 14; XD++) {
                                    NumeroPrecio = " " + NumeroPrecio;
                                }
                            }

                            NumeroPrecio = " " + NumeroPrecio;
                            ps.println(Np + Labs.get(inicioP) + formato + NumeroPrecio);
                        }

                        for (Integer Es = ProductoDescripcion.size(); Es < Espacios - 1; Es++) {
                            ps.println("");
                        }

                        Numero_a_Letra NumLetra = new Numero_a_Letra();
                        sumaTotal = Math.round(sumaTotal * Math.pow(10, 2)) / Math.pow(10, 2);

                        ps.println("                                                      " + MiFormato.format(sumaTotal).toString().replace((","), "."));
                        ps.println(NumLetra.Convertir(sumaTotal_1, true));

                        ProductoDescripcion.removeAll(ProductoDescripcion);
                        Labs.removeAll(Labs);
                        CantidadU.removeAll(CantidadU);
                        CantidadF.removeAll(CantidadF);
                        Precio.removeAll(Precio);

                        for (Integer EspaciosArriba = 1; EspaciosArriba < 4 + i; EspaciosArriba++) {
                            ps.println("");
                        }

                        ps.close();
                        listaInternos.set(i, null);
                    }


                } else {

                    if (i > 0) {
                        JOptionPane.showMessageDialog(ventana, " " + (i + 1) + " Interno de Venta : " + miinterno + " ", "Impresion de Internos de Ventas", JOptionPane.INFORMATION_MESSAGE);
                        confirma = 1;
                    } else {
                        confirma = 1;
                    }

                    if (confirma == 1) {

                        os = new FileOutputStream(Impresora_Factura);
                        //   FileOutputStream os = new FileOutputStream(impresora);
                        //INFORMATICA01//EPSONFX
                        ps = new PrintStream(os);
                        ps.flush();
                        sumaTotal = 0.00;

                        if (conex.isClosed()) {
                            conex = new ConexionPool().getConnection();
                        }

                        procedure = conex.prepareCall("{ call RECUPERA_DATA_PARA_FACTURA (?,?) }");
                        procedure.setString(1, miinterno);
                        procedure.setString(2, idbotica);
                        rs = procedure.executeQuery();

                        while (rs.next()) {
                            cliente = "  " + rs.getString(1);
                            Largo = cliente.length();

                            if (Largo < 35) {
                                for (Integer ini = Largo; ini < 35; ini++) {
                                    cliente = cliente + " ";
                                }
                            }

                            cliente = cliente + "     ";
                            ProductoDescripcion.add(rs.getString(6));
                            Labs.add(rs.getString(7));
                            CantidadU.add(rs.getInt(8));
                            CantidadF.add(rs.getInt(9));
                            Precio.add(rs.getDouble(12));
                            PrecioF.add(rs.getDouble(10));
                            SubSub = rs.getDouble(13);
                            IGV = rs.getDouble(14);
                            Totalizado = rs.getDouble(15);
                            sumaTotal = sumaTotal + rs.getDouble(11);
                            fecha = rs.getDate(4).toString();
                            salesman = rs.getString(5);
                            direccion = rs.getString(3);
                            RUC = rs.getString(2);
                            Direccion = rs.getString("Direccion");
                        }

                        for (Integer EspaciosArriba = 0; EspaciosArriba < 3; EspaciosArriba++) {
                            ps.println("");
                        }

                        if (Direccion != null) {
                            ps.print("           " + Direccion);
                        }

                        for (Integer EspaciosArriba = 0; EspaciosArriba < 2; EspaciosArriba++) {
                            ps.println("");
                        }

                        ps.println("                                        Ven:  " + salesman + "   " + objFechaHora.RetornaHora() + "");
                        ps.println("");
                        ps.println("         " + cliente + "");
                        ps.println("           " + direccion);
                        ps.println("           " + RUC + "                  " + objFechaHora.MysqlToJuliano(objFechaHora.RetornaFecha().toString()) + "              " + miinterno);
                        ps.println("");
                        ps.println("");

                        String Fusionado = "";

                        for (Integer sll = 0; sll < ProductoDescripcion.size(); sll++) {
                            Fusionado = "";

                            if (CantidadF.get(sll) > 0) {
                                Fusionado = "F" + CantidadF.get(sll).toString();
                            }

                            if (CantidadU.get(sll) > 0) {
                                Fusionado = CantidadU.get(sll).toString() + Fusionado;
                            }

                            String sss = ProductoDescripcion.get(sll).toString();

                            if (Fusionado.length() < 5) {
                                for (Integer xx = Fusionado.length(); xx < 3; xx++) {
                                    Fusionado = " " + Fusionado;
                                }
                            }

                            if (sss.length() < 40) {
                                for (Integer xx = sss.length(); xx < 40; xx++) {
                                    sss = sss + " ";
                                }
                            }

                            String elPrecio = MiFormato.format(Precio.get(sll));

                            if (elPrecio.length() < 43) {
                                for (Integer xx = elPrecio.length(); xx < 43; xx++) {
                                    elPrecio = " " + elPrecio;
                                }
                            }

                            String elPrecioF = MiFormato.format(PrecioF.get(sll));

                            if (elPrecioF.length() < 22) {
                                for (Integer xx = elPrecioF.length(); xx < 22; xx++) {
                                    elPrecioF = " " + elPrecioF;
                                }
                            }

                            ps.println(Fusionado + "                  " + sss + "    " + Labs.get(sll) + elPrecio.replace(",", ".") + elPrecioF.replace(",", "."));

                        }

                        for (Integer esp = Labs.size(); esp < 15; esp++) {
                            ps.println("");
                        }

                        Numero_a_Letra NumLetra = new Numero_a_Letra();
                        sumaTotal = Math.round(sumaTotal * Math.pow(10, 2)) / Math.pow(10, 2);

                        String Subtotal = "";
                        Subtotal = MiFormato.format(SubSub).toString();

                        for (Integer lo = MiFormato.format(SubSub).toString().length(); lo < 94; lo++) {
                            Subtotal = " " + Subtotal;
                        }

                        String espacioFooterIGV = "";
                        espacioFooterIGV = "                                  ";

                        ps.println(espacioFooterIGV + "    " + Subtotal.replace(",", "."));

                        String elIGV = "";
                        elIGV = MiFormato.format(IGV).toString().replace(",", ".");
                        BigDecimal bd2 = new BigDecimal(MIIGV);
                        elIGV = "(" + bd2.setScale(0, BigDecimal.ROUND_HALF_UP).toPlainString() + "%)  " + elIGV;

                        BigDecimal bd = new BigDecimal(Totalizado);
                        String numero1 = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();

                        String elTotalizado = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();
                        elTotalizado = "S/. " + elTotalizado;


                        for (Integer paraIGV = elTotalizado.length(); paraIGV < 92; paraIGV++) {
                            elIGV = " " + elIGV;
                        }

                        for (Integer lo = elTotalizado.length(); lo < 94; lo++) {
                            elTotalizado = " " + elTotalizado;
                        }

                        ps.println(espacioFooterIGV + "    " + elIGV);
                        ps.println(espacioFooterIGV + "    " + elTotalizado);
                        ps.println(NumLetra.Convertir(numero1, true));

                        ProductoDescripcion.removeAll(ProductoDescripcion);
                        Labs.removeAll(Labs);
                        PrecioF.removeAll(PrecioF);
                        Precio.removeAll(Precio);
                        CantidadU.removeAll(CantidadU);
                        CantidadF.removeAll(CantidadF);

                        for (Integer EspaciosArriba = 0; EspaciosArriba < 3; EspaciosArriba++) {
                            ps.println("");
                        }

                        ps.close();
                        listaInternos.set(i, null);
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            System.out.println("Error Impresora FileNotFoundException catch" + ex.getMessage());
            Error_Impresora("Error Impresora FileNotFoundException catch" + ex.getMessage(), listaInternos);
        } catch (IOException et) {
            System.out.println("Error Impresora IOException catch" + et.getMessage());
            Error_Impresora("Error Impresora IOException catch" + et.getMessage(), listaInternos);
        } catch (Exception pe) {
            System.out.println("Error Impresora Exception  catch" + pe.getMessage());
            Error_Impresora("Error Impresora Exception  catch :" + pe.getMessage(), listaInternos);
        }

    }

    private void Error_Impresora(String mens, List<Venta> Internos) {
        if (Internos.size() > 0) {
            FormImpresora obprimter = new FormImpresora(ventana, true, idbotica, Internos, mens);
            obprimter.show(true);
        }
    }

    public void Imprime_Factura(String interno, String idbotica) {
        FileOutputStream os = null;
        List<String> ProductoDescripcion = new ArrayList<String>();
        List<String> Labs = new ArrayList<String>();
        List<Integer> CantidadU = new ArrayList<Integer>();
        List<Integer> CantidadF = new ArrayList<Integer>();
        List<Double> Precio = new ArrayList<Double>();
        List<Double> PrecioF = new ArrayList<Double>();
        Double IGV = 0.00;
        Double Totalizado = 0.00;
        String cliente = "";
        Integer tmp = 0;
        Integer Largo = 0;
        String Np = "";
        String fecha = null;
        Integer Espacios = 7;
        String salesman = "";
        String direccion = "";
        Double sumaTotal = 0.00;
        DecimalFormat MiFormato = new DecimalFormat("0.00");
        String RUC = "";
        Double SubSub = 0.00;
        String Direccion = null;
        LogicaIGV logigv = new LogicaIGV();
        int numeros = 0;

        try {

            interno = interno.substring(0, 6);
            os = new FileOutputStream(obj.getImpresora_Factura());
            //   FileOutputStream os = new FileOutputStream(impresora);
            //INFORMATICA01//EPSONFX
            PrintStream ps = new PrintStream(os);
            ps.flush();
            sumaTotal = 0.00;
            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_DATA_PARA_FACTURA (?,?) }");
            procedure.setString(1, interno);
            procedure.setString(2, idbotica);
            rs = procedure.executeQuery();

            while (rs.next()) {
                numeros++;
                cliente = "  " + rs.getString(1);
                Largo = cliente.length();
                if (Largo > 35) {
                    // cliente = cliente.substring(0, 41);
                } else {
                    for (Integer ini = Largo; ini < 35; ini++) {
                        cliente = cliente + " ";
                    }
                }

                cliente = cliente + "     ";
                ProductoDescripcion.add(rs.getString(6));
                Labs.add(rs.getString(7));
                CantidadU.add(rs.getInt(8));
                CantidadF.add(rs.getInt(9));
                Precio.add(rs.getDouble(12));
                PrecioF.add(rs.getDouble(10));
                SubSub = rs.getDouble(13);
                IGV = rs.getDouble(14);
                Totalizado = rs.getDouble(15);
                sumaTotal = sumaTotal + rs.getDouble(11);
                fecha = rs.getDate(4).toString();
                salesman = rs.getString(5);
                direccion = rs.getString(3);
                RUC = rs.getString(2);
                Direccion = rs.getString("Direccion");
            }

            for (Integer EspaciosArriba = 0; EspaciosArriba < 3; EspaciosArriba++) {
                ps.println("");
            }

            if (Direccion != null) {
                ps.print("           " + Direccion);
            }

            for (Integer EspaciosArriba = 0; EspaciosArriba < 2; EspaciosArriba++) {
                ps.println("");
            }

            ps.println("                                        " + salesman + "   " + objFechaHora.RetornaHora() + "");
            //   ps.println("                                        " +  "                      " + "   " + objFechaHora.RetornaHora() + "");

            ps.println("");
            ps.println("         " + cliente + "");
            ps.println("           " + direccion);
            ps.println("           " + RUC + "               " + objFechaHora.MysqlToJuliano(objFechaHora.RetornaFecha().toString()) + "              " + interno);
            ps.println("");
            ps.println("");
            String Fusionado = "";

            for (Integer sll = 0; sll < ProductoDescripcion.size(); sll++) {
                Fusionado = "";
                if (CantidadF.get(sll) > 0) {
                    Fusionado = "F" + CantidadF.get(sll).toString();
                }
                if (CantidadU.get(sll) > 0) {
                    Fusionado = CantidadU.get(sll).toString() + Fusionado;
                }
                if (Fusionado.length() < 5) {
                    for (Integer xx = Fusionado.length(); xx < 3; xx++) {
                        Fusionado = " " + Fusionado;
                    }
                }
                String sss = ProductoDescripcion.get(sll).toString();
                if (sss.length() < 40) {
                    for (Integer xx = sss.length(); xx < 40; xx++) {
                        sss = sss + " ";
                    }
                }
                String elPrecio = MiFormato.format(Precio.get(sll));
                if (elPrecio.length() < 43) {
                    for (Integer xx = elPrecio.length(); xx < 43; xx++) {
                        elPrecio = " " + elPrecio;
                    }
                }
                String elPrecioF = MiFormato.format(PrecioF.get(sll));
                if (elPrecioF.length() < 22) {
                    for (Integer xx = elPrecioF.length(); xx < 22; xx++) {
                        elPrecioF = " " + elPrecioF;
                    }
                }
                ps.println(Fusionado + "                   " + sss + "    " + Labs.get(sll) + elPrecio.replace(",", ".") + elPrecioF.replace(",", "."));
            }

            for (Integer esp = Labs.size(); esp < 15; esp++) {
                ps.println("");
            }

            Numero_a_Letra NumLetra = new Numero_a_Letra();
            sumaTotal = Math.round(sumaTotal * Math.pow(10, 2)) / Math.pow(10, 2);
            String numero = SubSub.toString();
            String Subtotal = "";
            Subtotal = MiFormato.format(SubSub).toString();
            for (Integer lo = MiFormato.format(SubSub).toString().length(); lo < 94; lo++) {
                Subtotal = " " + Subtotal;
            }

            String espacioFooterIGV = "";
            espacioFooterIGV = "                                  ";

            ps.println();
            ps.println(espacioFooterIGV + "    " + Subtotal.replace(",", "."));
            String elIGV = "";
            elIGV = MiFormato.format(IGV).toString().replace(",", ".");
            BigDecimal bd2 = new BigDecimal(logigv.RecuperaIGV());
            elIGV = "(" + bd2.setScale(0, BigDecimal.ROUND_HALF_UP).toPlainString() + "%)  " + elIGV;

            BigDecimal bd = new BigDecimal(Totalizado);
            String numero1 = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();

            String elTotalizado = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();
            elTotalizado = "S/. " + elTotalizado;

            for (Integer paraIGV = elTotalizado.length(); paraIGV < 92; paraIGV++) {
                elIGV = " " + elIGV;
            }

            for (Integer lo = elTotalizado.length(); lo < 94; lo++) {
                elTotalizado = " " + elTotalizado;
            }


            ps.println(espacioFooterIGV + "    " + elIGV);
            ps.println(espacioFooterIGV + "    " + elTotalizado);
            ps.println(NumLetra.Convertir(numero1, true));
            ProductoDescripcion.removeAll(ProductoDescripcion);
            Labs.removeAll(Labs);
            PrecioF.removeAll(PrecioF);
            Precio.removeAll(Precio);
            CantidadU.removeAll(CantidadU);
            CantidadF.removeAll(CantidadF);

            for (Integer EspaciosArriba = 0; EspaciosArriba < 3; EspaciosArriba++) {
                ps.println("");
            }

            ps.close();


        } catch (SQLException ex) {
            Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            System.out.println("FileNotFoundException :" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (Exception ex) {
                    System.out.println("open :" + ex.getMessage());
                }
            }
        }

    }

    public void Imprime_Boleta(String interno, String idbotica) {

        List<String> ProductoDescripcion = new ArrayList<String>();
        List<String> Labs = new ArrayList<String>();
        List<Integer> CantidadU = new ArrayList<Integer>();
        List<Integer> CantidadF = new ArrayList<Integer>();
        List<Double> Precio = new ArrayList<Double>();
        objFechaHora = new LogicaFechaHora();
        String cliente = "";
        Integer Largo = 0;
        String Np = "";
        String fecha = null;
        Integer Espacios = 7;
        String salesman = "";
        Double sumaTotal = 0.00;
        DecimalFormat MiFormato = new DecimalFormat("0.00");
        String Direccion = null;

        try {

            interno = interno.substring(0, 6);
            FileOutputStream os1 = new FileOutputStream(obj.getImpresora_Boleta());
            PrintStream ps1 = new PrintStream(os1);
            sumaTotal = 0.00;
            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_DATA_PARA_BOLETA (?,?) }");
            procedure.setString(1, interno);
            procedure.setString(2, idbotica);
            rs = procedure.executeQuery();


            while (rs.next()) {

                Direccion = rs.getString(9);
                cliente = rs.getString(1);
                Largo = cliente.length();
                if (Largo > 35) {
                    // cliente = cliente.substring(0, 41);
                } else {
                    for (Integer ini = Largo; ini < 33; ini++) {
                        cliente = cliente + " ";
                    }
                }
                cliente = cliente + "    ";
                ProductoDescripcion.add(rs.getString(4));
                Labs.add(rs.getString(5));
                CantidadU.add(Integer.valueOf(rs.getString(6)));
                CantidadF.add(Integer.valueOf(rs.getString(7)));
                Precio.add(rs.getDouble(8));
                sumaTotal = sumaTotal + rs.getDouble(8);
                fecha = rs.getDate(2).toString();
                salesman = rs.getString(3);
            }

            BigDecimal bd = new BigDecimal(sumaTotal);
            bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
            sumaTotal = bd.doubleValue();
            String sumaTotal_1 = bd.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString();

            ps1.println("");
            ps1.println("");
            String nInterno = "";
            nInterno = interno;

            try {
                if (Direccion != null) {
                    ps1.print("    " + Direccion);
                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

            ps1.println("Ven: " + salesman + "                                " + objFechaHora.RetornaHora());
            //    ps1.println("     " + "                       " + "                                " + objFechaHora.RetornaHora());

            ps1.println(cliente + " " + objFechaHora.MysqlToJuliano(fecha) + "    " + nInterno);
            ps1.println("");


            for (Integer inicioP = 0; inicioP < ProductoDescripcion.size(); inicioP++) {
                String formato = "";
                Largo = 0;
                Largo = ProductoDescripcion.get(inicioP).toString().length();
                if (Largo > 33) {
                    Np = ProductoDescripcion.get(inicioP).toString().substring(0, 32);
                } else {
                    Np = ProductoDescripcion.get(inicioP).toString();
                    for (Integer cor = ProductoDescripcion.get(inicioP).toString().length(); cor < 32; cor++) {
                        Np = Np + " ";
                    }
                }
                if (CantidadF.get(inicioP) > 0) {
                    formato = "F" + CantidadF.get(inicioP).toString();
                }
                if (CantidadU.get(inicioP) > 0) {
                    formato = CantidadU.get(inicioP).toString() + formato;
                }
                String DecPrecio = "";
                DecPrecio = Precio.get(inicioP).toString();
                if (DecPrecio.length() < 6) {
                    for (Integer j = DecPrecio.length(); j < 6; j++) {
                        DecPrecio = " " + DecPrecio;
                    }
                }
                if (formato.length() < 9) {
                    for (Integer j = formato.length(); j < 9; j++) {
                        formato = " " + formato;
                    }
                }
                String NumeroPrecio = MiFormato.format(Precio.get(inicioP)).toString().replace(",", ".");
                if (NumeroPrecio.length() < 14) {
                    for (Integer XD = NumeroPrecio.length(); XD < 14; XD++) {
                        NumeroPrecio = " " + NumeroPrecio;
                    }
                }
                NumeroPrecio = " " + NumeroPrecio;
                ps1.println(Np + Labs.get(inicioP) + formato + NumeroPrecio);
            }

            for (Integer Es = ProductoDescripcion.size(); Es < Espacios - 1; Es++) {
                ps1.println("");
            }

            Numero_a_Letra NumLetra = new Numero_a_Letra();
            sumaTotal = Math.round(sumaTotal * Math.pow(10, 2)) / Math.pow(10, 2);
            String numero = sumaTotal.toString();
            ps1.println("                                                     " + MiFormato.format(sumaTotal).toString().replace(",", "."));
            ps1.println(NumLetra.Convertir(sumaTotal_1, true));
            ProductoDescripcion.removeAll(ProductoDescripcion);
            Labs.removeAll(Labs);
            CantidadU.removeAll(CantidadU);
            CantidadF.removeAll(CantidadF);
            Precio.removeAll(Precio);
            ps1.close();

        } catch (SQLException ex) {
            System.out.println("SQLException " + ex.getMessage());
        } catch (FileNotFoundException ex) {
            System.out.println("FileNotFoundException " + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (Exception ex) {
                    System.out.println("open :" + ex.getMessage());
                }
            }
        }
    }

    public int ObtieneTipoVenta(String Interno) {
        Integer valor = 1;

        try {
            CallableStatement procedure2 = conex.prepareCall("{ call RECUPERA_TIPO_VENTA (?) }");
            procedure2.setString(1, Interno);
            rs2 = procedure2.executeQuery();
            rs2.next();
            valor = rs2.getInt(1);
            rs2.close();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        return valor;
    }

    public int Devuelve_Tpo_Venta(String Interno) {
        Integer valor = 1;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure2 = conex.prepareCall("{ call RECUPERA_TIPO_VENTA (?) }");
            procedure2.setString(1, Interno);
            rs2 = procedure2.executeQuery();
            rs2.next();
            valor = rs2.getInt(1);
            rs2.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return valor;

    }

    public List<Venta> ListaMovimiento_Detalle(Venta obj, String docu) {

        List<Venta> listaventas = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_THE_MOVIMIENTOS (?,?,?,?,?) }");
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setString("DOCU", docu);
            procedure.setString("PROVEEDOR", obj.getProveedor());
            procedure.setString("ALMA", obj.getAlmacen());
            procedure.setString("IDTIPOMOV", obj.getIdMovimiento());
            rs = procedure.executeQuery();

            while (rs.next()) {
                listaventas.add(new Venta(rs.getString("Id_Producto"),
                        rs.getString("Descripcion"), rs.getInt("unidad"),
                        rs.getInt("fraccion"),
                        rs.getDouble("Precio_Venta"), rs.getDouble("Descuento")));

            }

            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return listaventas;


    }

    public class Numero_a_Letra {

        private final String[] UNIDADES = {"", "un ", "dos ", "tres ", "cuatro ", "cinco", "seis", "siete", "ocho", "nueve"};
        private final String[] DECENAS = {"diez ", "once ", "doce ", "trece ", "catorce ", "quince ", "dieciseis ",
            "diecisiete ", "dieciocho ", "diecinueve", "veinte ", "treinta ", "cuarenta ",
            "cincuenta ", "sesenta ", "setenta ", "ochenta ", "noventa "};
        private final String[] CENTENAS = {"", "ciento ", "doscientos ", "trecientos ", "cuatrocientos ", "quinientos ", "seiscientos ",
            "setecientos ", "ochocientos ", "novecientos "};

        public Numero_a_Letra() {
        }

        public String Convertir(String numero, boolean mayusculas) {

            // System.out.println(">Dentro de la clase<:"+numero);

            String literal = "";
            String parte_decimal;
            //si el numero utiliza (.) en lugar de (,) -> se reemplaza
            //XXX numero = numero.replace(",", ".");
            //XXX System.out.println(">Dentro de la 2<:"+numero);
            numero = numero.replace(".", ",");
            // System.out.println(">Dentro de la 2.1<:"+numero);
            //si el numero no tiene parte decimal, se le agrega ,00
            if (numero.indexOf(",") == -1) {
                numero = numero + ",00";
            }
            //se valida formato de entrada -> 0,00 y 999 999 999,00
            if (Pattern.matches("\\d{1,9},\\d{1,2}", numero)) {
                //se divide el numero 0000000,00 -> entero y decimal
                String Num[] = numero.split(",");
                //de da formato al numero decimal
                parte_decimal = " y " + Num[1] + "/100 Nuevos Soles.";
                //se convierte el numero a literal
                if (Integer.parseInt(Num[0]) == 0) {//si el valor es cero
                    literal = "Cero ";
                } else if (Integer.parseInt(Num[0]) > 999999) {//si es millon
                    literal = getMillones(Num[0]);
                } else if (Integer.parseInt(Num[0]) > 999) {//si es miles
                    literal = getMiles(Num[0]);
                } else if (Integer.parseInt(Num[0]) > 99) {//si es centena
                    literal = getCentenas(Num[0]);
                } else if (Integer.parseInt(Num[0]) > 9) {//si es decena
                    literal = getDecenas(Num[0]);
                } else {//sino unidades -> 9
                    literal = getUnidades(Num[0]);
                }
                //devuelve el resultado en mayusculas o minusculas
                if (mayusculas) {
                    return (literal + parte_decimal).toUpperCase();
                } else {
                    return (literal + parte_decimal);
                }
            } else {//error, no se puede convertir
                return literal = null;
            }
        }

        /* funciones para convertir los numeros a literales */
        private String getUnidades(String numero) {// 1 - 9
            //si tuviera algun 0 antes se lo quita -> 09 = 9 o 009=9
            String num = numero.substring(numero.length() - 1);
            return UNIDADES[Integer.parseInt(num)];
        }

        private String getDecenas(String num) {// 99
            int n = Integer.parseInt(num);
            if (n < 10) {//para casos como -> 01 - 09
                return getUnidades(num);
            } else if (n > 19) {//para 20...99
                String u = getUnidades(num);
                if (u.equals("")) { //para 20,30,40,50,60,70,80,90
                    return DECENAS[Integer.parseInt(num.substring(0, 1)) + 8];
                } else {
                    return DECENAS[Integer.parseInt(num.substring(0, 1)) + 8] + " " + u;
                }
            } else {//numeros entre 11 y 19
                return DECENAS[n - 10];
            }
        }

        private String getCentenas(String num) {// 999 o 099
            if (Integer.parseInt(num) > 99) {//es centena
                if (Integer.parseInt(num) == 100) {//caso especial
                    return " cien ";
                } else {
                    return CENTENAS[Integer.parseInt(num.substring(0, 1))] + getDecenas(num.substring(1));
                }
            } else {//por Ej. 099
                //se quita el 0 antes de convertir a decenas
                return getDecenas(Integer.parseInt(num) + "");
            }
        }

        private String getMiles(String numero) {// 999 999
            //obtiene las centenas
            String c = numero.substring(numero.length() - 3);
            //obtiene los miles
            String m = numero.substring(0, numero.length() - 3);
            String n = "";
            //se comprueba que miles tenga valor entero
            if (Integer.parseInt(m) > 0) {
                n = getCentenas(m);
                return n + "mil " + getCentenas(c);
            } else {
                return "" + getCentenas(c);
            }
        }

        private String getMillones(String numero) { //000 000 000
            //se obtiene los miles
            String miles = numero.substring(numero.length() - 6);
            //se obtiene los millones
            String millon = numero.substring(0, numero.length() - 6);
            String n = "";
            if (millon.length() > 1) {
                n = getCentenas(millon) + "millones ";
            } else {
                n = getUnidades(millon) + "millon ";
            }
            return n + getMiles(miles);
        }
    }

    public List<Venta> Lista_Tipos_Pagos_Venta(Venta objventa) {
        List<Venta> array = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_PAGOS_DEVENTA ('" + objventa.getId_Botica() + "','" + objventa.getId_Venta() + "') }");
            rs = procedure.executeQuery();

            while (rs.next()) {
                array.add(new Venta(rs.getString("DescripcionTipoPago"), rs.getDouble("Monto")));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return array;

    }

    public boolean EsCredito(int tipventa) {
        boolean resul = false;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call VERIFICA_ES_CREDITO (?) }");
            procedure.setInt("MITIPOPAGO", tipventa);
            rs = procedure.executeQuery();
            rs.next();
            if (rs.getInt(1) > 0) {
                resul = true;
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resul;

    }

    public List<Venta> REPORTE_CAJA_SUBDETALLE(Venta objventa) {
        List<Venta> LISTA = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call REPORTE_CAJA_SUBDETALLE (?,?,?,?,?,?) }");
            procedure.setString("FECHAINICIO", objventa.getFecha1());
            procedure.setString("FECHAFIN", objventa.getFecha2());
            procedure.setString("INIDBOTICA", objventa.getId_Botica());
            procedure.setInt("INIDCAJA", objventa.getId_Caja());
            procedure.setInt("INIDCAJERO", objventa.getId_Personal_Botica_Caja());
            procedure.setInt("TURNO", objventa.getTurno());
            rs = procedure.executeQuery();

            while (rs.next()) {
                LISTA.add(new Venta(rs.getString(1), rs.getInt(2), rs.getDouble(3)));
            }


            rs.close();

        } catch (Exception ex) {
            System.out.println("Error REPORTE_CAJA_SUBDETALLE" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return LISTA;
    }

    public List<Venta> REPORTE_CAJA_TIPOS_PAGOS(Venta objventa) {
        List<Venta> LISTA_Tipos_Pagos = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call REPORTE_CAJA_TIPOS_PAGOS (?,?,?,?,?,?) }");
            procedure.setString("FECHAINICIO", objventa.getFecha1());
            procedure.setString("FECHAFIN", objventa.getFecha2());
            procedure.setString("INIDBOTICA", objventa.getId_Botica());
            procedure.setInt("INIDCAJA", objventa.getId_Caja());
            procedure.setInt("INIDCAJERO", objventa.getId_Personal_Botica_Caja());
            procedure.setInt("TURNO", objventa.getTurno());
            rs = procedure.executeQuery();

            while (rs.next()) {
                LISTA_Tipos_Pagos.add(new Venta(rs.getString(1), rs.getInt(2), rs.getDouble(3)));
            }


            rs.close();

        } catch (OutOfMemoryError ex) {
            System.out.println("Error de memoria" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Error Lista_Internos_Ventas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return LISTA_Tipos_Pagos;
    }

    public int EliminaCorrelativos(Venta obj) {
        int valor = 0;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure = conex.prepareCall("{ call ELIMINA_CORRELATIVOS_NUMEROS (?,?,?,?,?,?,?) }");
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setString("NUMERO", obj.getNumero());
            procedure.setString("NUMERO1", obj.getCampo01());
            procedure.setInt("IDCAJA", obj.getId_Caja());
            procedure.setInt("TIPOVENTA", obj.getId_Tipo_Venta());
            procedure.setInt("IDPERSONAL", obj.getId_Personal_Botica_Caja());
            procedure.setString("MISERIE", obj.getSerie());
            rs = procedure.executeQuery();
            conex.commit();
            rs.next();
            valor = rs.getInt(1);

        } catch (Exception ex) {
            System.out.println("EliminaCorrelativos : " + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return valor;
    }

    public boolean Corrige_Numeracion(Venta obj) {
        boolean valor = false;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure = conex.prepareCall("{ call CORRIGE_NUMERACION (?,?,?,?,?) }");
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setString("NUMERO_FINAL", obj.getNumero());
            procedure.setInt("IDCAJA", obj.getId_Caja());
            procedure.setInt("TIPOVENTA", obj.getId_Tipo_Venta());
            procedure.setString("MISERIE", obj.getSerie());
            procedure.executeQuery();
            conex.commit();
            valor = true;

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            valor = false;
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return valor;

    }

    public List<String> Lista_Bancos() {
        List<String> Lista_Bancos = new ArrayList<String>();
        Lista_Bancos.removeAll(Lista_Bancos);

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTAR_BANCOS () }");
            rs = procedure.executeQuery();

            while (rs.next()) {
                Lista_Bancos.add(rs.getString("Descripcion"));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Bancos" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return Lista_Bancos;
    }

    public boolean Verifica_Venta_Botiquin(Venta obj) {
        boolean valor = false;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call VALIDA_VENTA_BOTIQUIN (?,?) }");
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setInt("IDPERSONAL", obj.getId_Personal_Botica_Venta());
            rs = procedure.executeQuery();
            rs.next();

            if (rs.getInt(1) == 1) {
                valor = true;
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return valor;
    }

    public List<Venta> Lista_Ventas_Facturas(Venta p) {
        List<Venta> Lista_ventas = new ArrayList<Venta>();
        Lista_ventas.removeAll(Lista_ventas);

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_VENTAS_FACTURAS_MES (?,?,?) }");
            procedure.setString("IDBOTICA", p.getId_Botica());
            procedure.setString("IDVENTA", p.getId_Venta());
            procedure.setInt("MES", p.getMes());
            rs = procedure.executeQuery();

            while (rs.next()) {
                Lista_ventas.add(new Venta(rs.getString("Id_Venta"), rs.getString("Serie"), rs.getString("Numero"),
                        rs.getDouble("Total"), rs.getDouble("SubTotal"), rs.getDouble("IGV"), rs.getString("TipoPago"),
                        rs.getDate("Fecha_Registro"), rs.getString("VENDEDOR"), rs.getString("CAJERO"), rs.getString("Nombre_RazonSocial"), rs.getString("RUC_DNI"), rs.getString("Direccion")));

            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Ventas_Facturas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return Lista_ventas;
    }

    public List<TipoCambio> Retorna_Tipos_Cambios() {
        List<TipoCambio> entidad = new ArrayList<TipoCambio>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RETORNA_TIPO_CAMBIO () }");
            rs = procedure.executeQuery();

            while (rs.next()) {
                entidad.add(new TipoCambio(rs.getInt("Id_Cambio"), rs.getString("Moneda"), rs.getDouble("TipoCambio")));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Ventas_Facturas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return entidad;
    }

    public boolean Ingresa_Tipo_Cambio(double tipcambio, String idbotica) {
        boolean resultado = false;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure = conex.prepareCall("{ call REGISTRA_TIPO_CAMBIO (?,?) }");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setDouble("TIPOCAMBIO", tipcambio);
            rs = procedure.executeQuery();
            conex.commit();
            resultado = true;

            rs.close();

        } catch (Exception ex) {
            try {
                System.out.println(ex.getMessage());
                conex.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }


        return resultado;
    }

    public boolean Verifica_Ingreso_TipoCambio() {
        boolean resultado = false;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call VERIFICA_INGRESO_TIPO_CAMBIO () }");
            rs = procedure.executeQuery();
            rs.next();
            if (rs.getInt(1) == 0) {
                resultado = true;
            }
            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;
    }

    public List<Venta> Muestra_Ventas_Anuladas_RESP(String idbotica, String fecha) {
        List<Venta> milista = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call REVISA_VENTAS_ANULADAS (?,?) }");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("MIFECHA", fecha);
            rs = procedure.executeQuery();

            while (rs.next()) {
                milista.add(new Venta(rs.getString("Id_Venta"), rs.getString("DESCRIPCION"),
                        rs.getString("Serie"), rs.getString("Numero"),
                        rs.getDouble("Total"), rs.getString("RESPONSABLE"), rs.getString("VENDEDOR")));
            }


            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Muestra_Ventas_Anuladas_RESP" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return milista;
    }

    public boolean Revisa_Ventas_Anuladas(List<Venta> listaobj) {

        boolean resultado = false;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure;

            for (int i = 0; i < listaobj.size(); i++) {
                //System.out.println("{ call APRUEBA_VENTAS_ANULADAS ('" + listaobj.get(i).getId_Botica() + "','" + listaobj.get(i).getId_Venta() + "','" + listaobj.get(i).getDESCRIPCION() + "','" + listaobj.get(i).getCantidadpagos() + "') }");
                procedure = conex.prepareCall("{ call APRUEBA_VENTAS_ANULADAS (?,?,?,?) }");
                procedure.setString("IDBOTICA", listaobj.get(i).getId_Botica());
                procedure.setString("IDINTERNO", listaobj.get(i).getId_Venta());
                procedure.setString("MIMOTIVO", listaobj.get(i).getDESCRIPCION());
                procedure.setInt("APROBADO", listaobj.get(i).getCantidadpagos());
                procedure.executeQuery();

            }


            conex.commit();
            resultado = true;
            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;
    }

    public String Recupera_Interno(String idbotica) {
        String interno = null;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_INTERNO (?) }");
            procedure.setString("IDBOTICA", idbotica);
            rs = procedure.executeQuery();

            while (rs.next()) {
                interno = rs.getString("interno");
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Bancos" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return interno;
    }

    public List<Venta> Verifica_Ventas_Salida(String idbotica, String idproforma) {
        List<Venta> milista = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_VENTAS_REVISAR (?,?) }");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("IDPROFORMA", idproforma);
            rs = procedure.executeQuery();

            while (rs.next()) {
                milista.add(new Venta(rs.getString("Id_Venta"), rs.getString("Serie"),
                        rs.getString("Numero"), rs.getDouble("Total"),
                        rs.getString("vendedor"), rs.getString("cajero"), rs.getString("miproducto"),
                        rs.getString("Id_Laboratorio"), rs.getInt("unidad"), rs.getInt("fraccion"),
                        rs.getDouble("Precio_Venta_Final"), rs.getDouble("totaldetalle")));
            }


            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Verifica_Ventas_Salida" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return milista;


    }

    public boolean Despachar_Venta(String idventa, String idbotica, String idproforma) {

        boolean resultado = false;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure;
            procedure = conex.prepareCall("{ call GUARDAR_VENTA_ATENDIDA (?,?,?) }");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("IDINTERNO", idventa);
            procedure.setString("IDPROFORMA", idproforma);
            procedure.executeQuery();
            conex.commit();
            resultado = true;
            rs.close();

        } catch (Exception ex) {
            try {
                System.out.println(ex.getMessage());
                conex.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;

    }

    public List<Venta> Lista_Cuadres_Cajas(String idbotica, String fecha) {
        List<Venta> milista = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_CUADRES_CAJAS (?,?) }");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("MIFECHA", fecha);
            rs = procedure.executeQuery();

            while (rs.next()) {
                milista.add(new Venta(rs.getString("cajero"), rs.getString("caja"),
                        rs.getString("DESTURNO"), rs.getInt("ID_CAJA"),
                        rs.getInt("Id_Personal"), rs.getInt("Turno"), rs.getString("InternoInicio"),
                        rs.getString("InternoFinal"), rs.getString("NroRendicion"), rs.getInt("Cierre")));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Cuadres_Cajas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return milista;

    }

    public List<Venta> Lista_Movimeintos_Caja(Venta p) {
        List<Venta> milista = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call MOVIMIENTOS_DE_CAJA (?,?,?,?,?)}");
            procedure.setString("FECHAINICIO", p.getFecha1());
            procedure.setString("INIDBOTICA", p.getId_Botica());
            procedure.setInt("INIDCAJA", p.getId_Caja());
            procedure.setInt("INIDCAJERO", p.getId_Personal_Botica_Caja());
            procedure.setInt("MITURNO", p.getTurno());
            rs = procedure.executeQuery();

            while (rs.next()) {
                milista.add(new Venta(rs.getString("Id_Venta"), rs.getString("Serie"),
                        rs.getString("Numero"), rs.getDouble("Monto"),
                        rs.getString("NOMCLIENTE"), rs.getString("DescripcionTipoPago"), rs.getString("tipoventa"),
                        rs.getString("vendedor"), rs.getTime("Hora_Venta"), rs.getDouble("SubTotal"), rs.getDouble("IGV")));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Cuadres_Cajas" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return milista;
    }

    public List<Venta> Busca_Movimientos_Caja(Venta p, String idventa) {
        List<Venta> milista = new ArrayList<Venta>();

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call Busca_Movimientos_Caja (?,?,?,?,?,?)}");
            procedure.setString("FECHAINICIO", p.getFecha1());
            procedure.setString("INIDBOTICA", p.getId_Botica());
            procedure.setInt("INIDCAJA", p.getId_Caja());
            procedure.setInt("INIDCAJERO", p.getId_Personal_Botica_Caja());
            procedure.setInt("MITURNO", p.getTurno());
            procedure.setString("INTERNO", idventa);
            rs = procedure.executeQuery();

            while (rs.next()) {
                milista.add(new Venta(rs.getString("Id_Venta"), rs.getString("Serie"),
                        rs.getString("Numero"), rs.getDouble("Monto"),
                        rs.getString("NOMCLIENTE"), rs.getString("DescripcionTipoPago"), rs.getString("tipoventa"),
                        rs.getString("vendedor"), rs.getTime("Hora_Venta"), rs.getDouble("SubTotal"), rs.getDouble("IGV")));
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Busca_Movimientos_Caja" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return milista;
    }

    public int Modificar_Tipo_Pagos(Venta entidad, List<Ventas_Tipo_Pago> lista_pagos) {

        int resultado = 0;
        ResultSet rs1 = null;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure;
            procedure = conex.prepareCall("{ call MODIFICA_TIPOS_PAGOS (?,?,?,?) }");
            procedure.setString("IDBOTICA", entidad.getId_Botica());
            procedure.setInt("IDCAJA", entidad.getId_Caja());
            procedure.setString("IDVENTA", entidad.getId_Venta());
            procedure.setInt("IDTIPOPAGO", entidad.getId_TipoPago());
            rs = procedure.executeQuery();
            rs.next();
            resultado = rs.getInt(1);

            if (resultado == 1) {
                CallableStatement procedure1;
                for (int i = 0; i < lista_pagos.size(); i++) {
                    procedure1 = conex.prepareCall("{ call MODIFICA_VENTAS_TIPO_PAGO (?,?,?,?,?,?,?,?) }");
                    procedure1.setString("IDBOTICA", entidad.getId_Botica());
                    procedure1.setInt("IDCAJA", entidad.getId_Caja());
                    procedure1.setString("IDVENTA", entidad.getId_Venta());
                    procedure1.setDouble("MONTO", lista_pagos.get(i).getMonto());
                    procedure1.setString("NUMDOC", lista_pagos.get(i).getNumDocumento());
                    procedure1.setString("MIOPERADOR", lista_pagos.get(i).getOperador());
                    procedure1.setInt("TIPOPAGO", lista_pagos.get(i).getId_TipoPago());
                    procedure1.setInt("IDTIPOPAGO", entidad.getId_TipoPago());
                    rs1 = procedure1.executeQuery();
                }

                rs1.next();
                resultado = rs1.getInt(1);
                rs1.close();

                if (resultado == 2) {
                    conex.commit();
                    return resultado; // proceso terminado
                } else {
                    conex.rollback();
                    return resultado; // si es 3 error discrepancia de venta
                }

            } else {
                conex.rollback();
                return resultado; //0 no se puede cambiar
            }

        } catch (Exception ex) {
            try {
                System.out.println(ex.getMessage());
                conex.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;

    }

    public boolean Cierre_Revision_Caja(Venta entidad) {

        boolean resultado = false;

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure;
            procedure = conex.prepareCall("{ call CIERRE_REVISION_CAJA (?,?,?,?) }");
            procedure.setString("IDBOTICA", entidad.getId_Botica());
            procedure.setInt("IDCAJA", entidad.getId_Caja());
            procedure.setString("MIFECHA", entidad.getFecha1());
            procedure.setInt("IDTURNO", entidad.getTurno());
            procedure.executeQuery();
            conex.commit();
            resultado = true;
            rs.close();

        } catch (Exception ex) {
            try {
                System.out.println(ex.getMessage());
                conex.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;

    }

    public boolean Existe_Serie_Numero(Venta venta) {

        boolean resultado = true;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure;
            procedure = conex.prepareCall("{ call VERIFICA_SERIE_NUMERO (?,?,?,?,?) }");
            procedure.setString("IDBOTICA", venta.getId_Botica());
            procedure.setInt("IDCAJA", venta.getId_Caja());
            procedure.setInt("TIPVENTA", venta.getId_Tipo_Venta());
            procedure.setString("MISERIE", venta.getSerie());
            procedure.setString("MINUMERO", venta.getNumero());
            rs = procedure.executeQuery();
            rs.next();

            if (rs.getInt(1) == 1) {
                resultado = false;
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());

        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return resultado;

    }

    public double Recupera_MontoVenta(Cajas caja) {
        double monto = 0.0;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RETORNA_TOTAL_EFECTIVO (?,?,?,?,?) }");
            procedure.setString("FECHAINICIO", caja.getFecha());
            procedure.setString("INIDBOTICA", caja.getIdbotica());
            procedure.setInt("INIDCAJA", caja.getIdcaja());
            procedure.setInt("INIDCAJERO", caja.getIdpersonal());
            procedure.setInt("MITURNO", caja.getTurno());
            rs = procedure.executeQuery();

            while (rs.next()) {
                monto = rs.getDouble("DEPOSITAR");
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Recupera_MontoVenta" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return monto;
    }

    public String Recupera_DocumentoSalida(String idbotica) {
        String dconum = null;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call RECUPERA_DOCUMENTOSALIDA (?) }");
            procedure.setString("IDBOTICA", idbotica);
            rs = procedure.executeQuery();

            while (rs.next()) {
                dconum = rs.getString("DOCNUM");
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Recupera_DocumentoSalida" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return dconum;
    }

    public Venta_Delivery GuardaSalida(Venta_Delivery obj, List<String> Internos) {

        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure = null;
            procedure = conex.prepareCall("{ call GUARDA_SALIDADELIVERY (?,?,?,?,?,?) }");
            procedure.setString("SALIDA", obj.getNumeroSalida());
            procedure.setString("IDBOTICA", obj.getId_Botica());
            procedure.setInt("IDPERSONAL", obj.getId_Personal());
            procedure.setDouble("TOTAL", obj.getTotal());
            procedure.setDouble("EFECTIVO", obj.getEfectivoEntregado());
            procedure.setInt("ACTIVO", obj.getActivo());
            procedure.execute();

            CallableStatement procedure1 = null;
            for (int i = 0; i < Internos.size(); i++) {
                procedure1 = conex.prepareCall("{ call GUARDA_DETALLEELIVERY (?,?,?) }");
                procedure1.setString("SALIDA", obj.getNumeroSalida());
                procedure1.setString("IDBOTICA", obj.getId_Botica());
                procedure1.setString("IDVENTA", Internos.get(i));
                procedure1.execute();
            }

            conex.commit();

        } catch (Exception ex) {
            try {
                obj = null;
                conex.rollback();
                System.out.println("Error GuardaSalida" + ex.getMessage());
            } catch (SQLException ex1) {
                return null;
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return obj;
    }

    public List<Venta_Delivery> Lista_Salidas_Delivery(String idbotica) {
        List<Venta_Delivery> lista = new ArrayList<Venta_Delivery>();
        Venta_Delivery ventaDelivery;
        Personal persona;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_SALIDASDELIVERY (?)}");
            procedure.setString("IDBOTICA", idbotica);
            rs = procedure.executeQuery();

            while (rs.next()) {
                ventaDelivery = new Venta_Delivery();
                persona = new Personal();
                ventaDelivery.setId_Botica(rs.getString("Id_Botica"));
                ventaDelivery.setNumeroSalida(rs.getString("NumeroSalida"));
                ventaDelivery.setHoraSalida(rs.getTime("HoraSalida"));
                ventaDelivery.setHoraLLegada(rs.getTime("HoraLLegada"));
                ventaDelivery.setEfectivoEntregado(rs.getDouble("EfectivoEntregado"));
                ventaDelivery.setVuelto(rs.getDouble("Vuelto"));
                ventaDelivery.setTotal(rs.getDouble("Total"));
                ventaDelivery.setActivo(rs.getInt("Activo"));
                ventaDelivery.setObservacion(rs.getString("Observacion"));
                ventaDelivery.setId_Personal(rs.getInt("Id_Personal"));
                persona.setApellido(rs.getString("Apellido"));
                persona.setNombre(rs.getString("Nombre"));
                persona.setId_Personal(rs.getInt("Id_Personal"));
                ventaDelivery.setPersona(persona);
                lista.add(ventaDelivery);
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Lista_Salidas_Delivery" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return lista;
    }

    public List<Detalle_VentaDelivery> Detallle_Salidas_Delivery(String idbotica, String salida) {
        List<Detalle_VentaDelivery> lista = new ArrayList<Detalle_VentaDelivery>();
        Venta_Delivery ventaDelivery;
        Venta venta;
        Detalle_VentaDelivery detalle;

        try {

            conex = new ConexionPool().getConnection();
            CallableStatement procedure = conex.prepareCall("{ call LISTA_DETALLEDELIVERY (?,?)}");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("NUMERO", salida);
            rs = procedure.executeQuery();

            while (rs.next()) {
                ventaDelivery = new Venta_Delivery();
                venta = new Venta();
                detalle = new Detalle_VentaDelivery();
                ventaDelivery.setId_Botica(rs.getString("Id_Botica"));
                ventaDelivery.setNumeroSalida(rs.getString("NumeroSalida"));
                venta.setId_Venta(rs.getString("Id_Venta"));
                venta.setSerie(rs.getString("Serie"));
                venta.setNumero(rs.getString("Numero"));
                venta.setTotal(rs.getDouble("Total"));
                detalle.setDelivery(ventaDelivery);
                detalle.setVenta(venta);
                lista.add(detalle);
            }

            rs.close();

        } catch (Exception ex) {
            System.out.println("Error Detallle_Salidas_Delivery" + ex.getMessage());
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }
        return lista;
    }

    public boolean Actualiza_EntradaDelivery(String idbotica, String docnum, double vuelto, String observ) {
        try {

            conex = new ConexionPool().getConnection();
            conex.setAutoCommit(false);
            CallableStatement procedure = conex.prepareCall("{ call GUARDA_ENTRADADELIVERY (?,?,?,?)}");
            procedure.setString("IDBOTICA", idbotica);
            procedure.setString("SALIDA", docnum);
            procedure.setDouble("MIVUELTO", vuelto);
            procedure.setString("OBSER", observ);
            procedure.execute();
            conex.commit();

        } catch (SQLException ex) {
            try {
                conex.rollback();
                return false;
            } catch (SQLException ex1) {
                Logger.getLogger(VentaData.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (null != conex) {
                try {
                    conex.close();
                } catch (SQLException ex) {
                }
            }
        }

        return true;
    }
}

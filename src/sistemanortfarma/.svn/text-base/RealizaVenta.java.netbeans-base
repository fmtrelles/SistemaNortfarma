package sistemanortfarma;

import CapaLogica.LogicaBoticas;
import CapaLogica.LogicaProducto;
import CapaLogica.LogicaProforma;
import CapaLogica.LogicaTiposPagos;
import CapaLogica.LogicaVenta;
import CapaLogica.LogicaClientes;
import CapaLogica.LogicaDocumentosVentas;
import CapaLogica.LogicaFechaHora;
import CapaLogica.LogicaRecuperaCaja;
import entidad.Clientes;
import entidad.Descuento;
import entidad.DocumentoVentas;
import entidad.Laboratorios;
import entidad.ListaDetalles;
import entidad.Proforma;
import entidad.ResultadoVenta;
import entidad.TiposPagos;
import entidad.Venta;
import entidad.VentaComparatorByOrdenTotal;
import entidad.Producto;
import entidad.ProductosPrecios;
import entidad.Productos_Botica;
import entidad.TipoCambio;
import entidad.TipoVenta;
import entidad.Ventas_Tipo_Pago;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import org.jdesktop.application.Action;

/**
 *
 * @author Miguel Gomez S. gomez
 */
public class RealizaVenta extends javax.swing.JInternalFrame implements KeyListener {

    LogicaProducto objProducto = new LogicaProducto();
    LogicaProforma logicaProforma = new LogicaProforma();
    LogicaTiposPagos objlogicapagos = new LogicaTiposPagos();
    LogicaVenta objguardaventa = new LogicaVenta();
    LogicaClientes objClientes = new LogicaClientes();
    LogicaRecuperaCaja objcaja = new LogicaRecuperaCaja();
    RequisitosFactura objfactura = new RequisitosFactura();
    MuestraVentana objetoventana = new MuestraVentana();
    LogicaDocumentosVentas objDocumentoVentas = new LogicaDocumentosVentas();
    LogicaBoticas objlistabotica = new LogicaBoticas();
    LogicaFechaHora objlogiccafecha = new LogicaFechaHora();
    MailClient objmail = new MailClient();
    Mant_Productos mantProduc = new Mant_Productos();
    List<ProductosPrecios> listsubtotales = new ArrayList<ProductosPrecios>();
    List<Proforma> listproforma = new ArrayList<Proforma>();
    List<Proforma> listproformaDetalle = new ArrayList<Proforma>();
    List<String> listtipoprecio = new ArrayList<String>();
    List<TiposPagos> listatipospagos = new ArrayList<TiposPagos>();
    List<TiposPagos> listtarj = new ArrayList<TiposPagos>();
    List<Venta> listaventa = new ArrayList<Venta>();
    List<Venta> listVentaSinIGV = new ArrayList<Venta>();
    List<ProductosPrecios> productostock = new ArrayList<ProductosPrecios>();
    List<Object> lisProdSinIGV = new ArrayList<Object>();
    List<Ventas_Tipo_Pago> lista_pagos = new ArrayList<Ventas_Tipo_Pago>();
    List<TipoVenta> lis_tipo_venta;
    List<Clientes> ListDescuentos = new ArrayList<Clientes>(); //PARA LOS DESCUENTOS ESPECIALES
    List<DocumentoVentas> listaDocumentoVentas;
    List<Producto> listsinstock;
    /*Para las promociones*/
    List<Integer> nuevaPromocion = new ArrayList();
    List<Integer> cantidadElementos = new ArrayList();
    List<ListaDetalles> DetallePromo = new ArrayList<ListaDetalles>();
    List<Object> listaProductosVerifica = new ArrayList<Object>();
    //int ordenproducto = 1;
    Proforma objproforma;
    FormClientes objcliente;
    AplicacionVentas objventa;
    ProductosPrecios objsubtotalIgv;
    ProductosPrecios objetostock;
    Ventas_Tipo_Pago objeto;
    Descuento midescuentos;
    Clientes def;
    Object[] listadetalle = new Object[12];
    private DefaultTableModel tablaproforma;
    private String cantidad;
    private double PVP, PVPx, descuento, parcial, bdpromo;
    int podecimal = 2, cantidadproductos = 0, unidad, fraccion;
    TableColumnModel colModel;
    TableColumn col, colu_9;
    int ordenproducto = 1;
    private String idproforma, serie, numero, idbotica;
    private double total, IGV = 0.0, subtotal;
    int Id_Personal_Botica_Venta, idcaja, idcliente, idtipopago, bandseleccion = 0, tipventa = 0, filaseleccionado;
    private Object stockempaque, empaque, stockfraccion;
    private Date fecha;
    private String Id_Tipo_Precio;
    private String dniresponsable, idmedico = "", colegiatura = "", RUC = "";
    private static int id_personal;
    private int veces, cantpagos = 0, poscant = 0, canttiposPagos = 1;
    String codprodespec; //CODIGO DEL PRODUCTO SI ES QUE HAY DESCUENTO    
    boolean keypress = true;
    private int ventaDelivery;
    BuscarProductos objproductos = null;
    BuscarProductosPromocion objproductosPromocion = null;

    public RealizaVenta(AplicacionVentas obj, Object auxidcaja) {
        initComponents();
        objventa = obj;
        podecimal = OpcionesMenu.getCantidadDecimales();
        Id_Tipo_Precio = "01";
        idcaja = Integer.parseInt(auxidcaja.toString());
        setTitle(" Realiza Venta    Caja " + idcaja + " ");
        jLabel35.setText(String.valueOf("CAJA " + idcaja));
        fecha = objventa.getFecha();
        idbotica = objventa.getIdbotica();
        id_personal = objventa.getId_personal_botica();
        tablaproforma = (DefaultTableModel) jTable2.getModel();
        colModel = jTable2.getColumnModel();
        AparienciaTabla();
        jTextField4.setDocument(new LimitadorLetras(jTextField4, 11));
        jTextField14.setDocument(new LimitadorLetras(jTextField14, 8));
        jTextField30.setText(objventa.getUsuario());
        CompletaTiposPagos();
        RecuperaTipoVentas();
        HabilitaBotones(false);
        Deshabilita_Check(false);
        jTabbedPane1.setEnabledAt(1, false);
        Recupera_Serie_Numero();
        Muestra_Tipos_Cambios();
        def = objClientes.Cliente_Defecto();
        RecuperaInterno();
        jTextField11.setVisible(false);
        jTextField40.setVisible(false);
        jTabbedPane2.setSelectedIndex(0);
        JTextComponent editor;
        editor = (JTextComponent) jComboBox8.getEditor().getEditorComponent();
        editor.addKeyListener(new KeyAdapter() {

            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    jTextField1.requestFocus();
                }
                RealizaOpciones(e);
            }
        });
        jTextField1.requestFocus();
        jLabel36.setText("");
        jLabel37.setText("");
        jTextField5.setVisible(false);
        jTextField41.setVisible(false);
    }

    public String getIdbotica() {
        return idbotica;
    }

    public void setIdbotica(String idbotica) {
        this.idbotica = idbotica;
    }

    private void Deshabilita_Check(boolean valor) {
        jCheckBox2.setEnabled(valor);
        jCheckBox3.setEnabled(valor);
        jCheckBox4.setEnabled(valor);
        jCheckBox5.setEnabled(valor);
    }

    private void HabilitaBotones(boolean valor) {
        this.jButton1.setEnabled(valor);
        this.jButton2.setEnabled(valor);
        this.jButton4.setEnabled(valor);
        this.jButton6.setEnabled(valor);
        this.jButton8.setEnabled(valor);
        this.jButton9.setEnabled(valor);

    }

    private void AparienciaTabla() {

        JTableHeader cabecera = new JTableHeader(jTable2.getColumnModel());
        cabecera.setReorderingAllowed(false);

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        this.jTable2.getColumnModel().getColumn(8).setCellRenderer(tcr);
        this.jTable2.getColumnModel().getColumn(7).setCellRenderer(tcr);
        this.jTable2.getColumnModel().getColumn(6).setCellRenderer(tcr);

        DefaultTableCellRenderer tcenter = new DefaultTableCellRenderer();
        tcenter.setHorizontalAlignment(SwingConstants.CENTER);
        this.jTable2.getColumnModel().getColumn(4).setCellRenderer(tcenter);
        this.jTable2.getColumnModel().getColumn(5).setCellRenderer(tcenter);

        colu_9 = jTable2.getColumnModel().getColumn(9);
        colu_9.setPreferredWidth(0);
        colu_9.setMinWidth(0);
        colu_9.setMaxWidth(0);

    }

    private void BusquedaProducto() {
        objproductos.setSeleccionaart(false);
        objproductos = new BuscarProductos(objetoventana, Id_Tipo_Precio);
        objproductos.setVisible(true);
        if (objproductos.seleccionaart) {
            new ProductoPedido(objproductos.getProductoPrecio()).setVisible(true);
            if (ProductoPedido.ingresadet) {
                if (ProductoPedido.getCantidad().compareTo("") != 0) {
                    AgregaProforma(ProductoPedido.getCantidad(), objproductos.getProductoPrecio());
                }
            }
        }
    }

    private void BusquedaProductoPromocion() {
        objproductosPromocion.setSeleccionaart(false);
        objproductosPromocion = new BuscarProductosPromocion(objetoventana, Id_Tipo_Precio);
        objproductosPromocion.setVisible(true);
        if (objproductosPromocion.seleccionaart) {
            //new ProductoPedido(objproductosPromocion.getProductoPrecio()).setVisible(true);
            //if (ProductoPedido.ingresadet) {
            // if (ProductoPedido.getCantidad().compareTo("") != 0) {
            for (int i = 0; i < 2; i++) {
                if (i == 0) {
                    int var = 1;
                    AgregaProformaPromocionPrecio("1", objproductosPromocion.getProductoPrecio(), var);
                } else {
                    int var = 2;
                    AgregaProformaPromocionPrecio("1", objproductosPromocion.getProductoPrecio(), var);
                }
            }
            //}
            //}
        }
    }

    private void Muestra_Tipos_Cambios() {
        List<TipoCambio> misTiposCambios = objguardaventa.Retorna_Tipos_Cambios();
        for (int i = 0; i < misTiposCambios.size(); i++) {
            this.jComboBox6.addItem(misTiposCambios.get(i).getMoneda());
            this.jTextField36.setText(String.valueOf(misTiposCambios.get(i).getTipoCambio()));
        }
    }

    public void Recupera_Serie_Numero() {
        listaDocumentoVentas = objDocumentoVentas.obtenerIniciacionSerie(idbotica, idcaja, jComboBox3.getSelectedItem().toString());
        if (listaDocumentoVentas.size() > 0) {
            this.jLabel28.setText(String.valueOf(jComboBox3.getSelectedItem().toString().charAt(0)));
            this.jTextField31.setText(listaDocumentoVentas.get(0).getSerie());
            this.jTextField35.setText(listaDocumentoVentas.get(0).getNumeracion());
        }
    }

    private boolean VerificaStock(String idproduc, int unipedida, int fraccpedida) {
        boolean resultado = false;
        int totalstock;
        List<Productos_Botica> empRecuperado = new ArrayList<Productos_Botica>();
        int stkempaque;

        try {

            empRecuperado = objfactura.Retorna_Producto_Stock(idproduc, idbotica);

            if (empRecuperado.size() > 0) {
                //RECUPERO MI EMPAQUE DEL PRODUCTO
                empaque = empRecuperado.get(0).getProducto().getEmpaque();
                int empaque_tmp = Integer.parseInt(empaque.toString());

                if (empaque_tmp == 0) {
                    empaque_tmp = 1;
                }

                //RECUPERO MI STOCK DEL EMPAQUIE
                stockempaque = empRecuperado.get(0).getMostrador_Stock_Empaque();
                stkempaque = Integer.parseInt(stockempaque.toString());
                //RECUPERO MI STOCK FRACCION
                stockfraccion = empRecuperado.get(0).getMostrador_Stock_Fraccion();
                int stfraccion = Integer.parseInt(stockfraccion.toString());

                totalstock = stkempaque * empaque_tmp + stfraccion;
                int cantidadpedida = unipedida * empaque_tmp + fraccpedida;

                if (cantidadpedida <= totalstock) {
                    resultado = true;
                }
            }

        } catch (Exception ex) {
            System.out.println("ERROR EN CLASE COTIZACION METODO VerificaStock :" + ex.getMessage());
        }

        return resultado;

    }

    private void RecuperaTipoVentas() {
        lis_tipo_venta = new ArrayList<TipoVenta>();
        lis_tipo_venta = objfactura.Retorna_Tipos_Ventas();

        for (int i = 0; i < lis_tipo_venta.size(); i++) {
            jComboBox3.addItem(lis_tipo_venta.get(i).getDESCRIPCION());
        }
    }

    public void AsignaDatos_Proforma_Adicional(String idprofor) {


        ordenproducto = 1;
        listaProductosVerifica.clear();

        List<Proforma> listformaDetalle = new ArrayList<Proforma>();
        listformaDetalle = logicaProforma.Recupera_Detalle_Proforma(idprofor, idbotica);

        if (Id_Tipo_Precio.compareTo(listformaDetalle.get(0).getId_Tipo_Precio().trim()) == 0) {
            int posicion = listproformaDetalle.size();
            int tamaño = listformaDetalle.size();

            for (int i = 0; i < tamaño; i++) {
                objproforma = new Proforma(listformaDetalle.get(i).getIdproducto(),
                        listformaDetalle.get(i).getDescipcionproducto(), listformaDetalle.get(i).getUNIDAD(),
                        listformaDetalle.get(i).getFRACCION(), listformaDetalle.get(i).getPrecio_Venta(), listformaDetalle.get(i).getDescuento(),
                        listformaDetalle.get(i).getPvx(), listformaDetalle.get(i).getTotal(), listformaDetalle.get(i).getFecha_Vencimiento(), listformaDetalle.get(i).getIGV_Exonerado(),
                        listformaDetalle.get(i).getEmpaque(), listformaDetalle.get(i).getStock_Empaque(), listformaDetalle.get(i).getStock_Fraccion(), listformaDetalle.get(i).getId_laboratorio());
                listproformaDetalle.add(posicion, objproforma);
                posicion++;
            }

            posicion = jTable2.getRowCount();
            Productos_Botica productoBotica;
            Producto producto;

            for (int i = 0; i < tamaño; i++) {
                String idprodu = listformaDetalle.get(i).getIdproducto();
                String descrip = listformaDetalle.get(i).getDescipcionproducto();
                int unidad1 = listformaDetalle.get(i).getUNIDAD();
                int fraccion1 = listformaDetalle.get(i).getFRACCION();
                double pvp = listformaDetalle.get(i).getPrecio_Venta();
                String labora = listformaDetalle.get(i).getId_laboratorio();
                double pvx = listformaDetalle.get(i).getPvx();
                double total1 = listformaDetalle.get(i).getTotal();
                String orden = listformaDetalle.get(i).getOrdenProducto();
                cantidadproductos++;

                double igvaux = listformaDetalle.get(i).getIGV_Exonerado();

                if (igvaux == 0) {
                    lisProdSinIGV.add(idprodu);
                } else {
                    lisProdSinIGV.add(9999);
                }

                objetostock = new ProductosPrecios();
                productoBotica = new Productos_Botica();
                producto = new Producto();

                producto.setEmpaque(listformaDetalle.get(i).getEmpaque());
                productoBotica.setProducto(producto);
                productoBotica.setMostrador_Stock_Empaque(listformaDetalle.get(i).getStock_Empaque());
                productoBotica.setMostrador_Stock_Fraccion(listformaDetalle.get(i).getStock_Fraccion());
                objetostock.setProductoBotica(productoBotica);
                productostock.add(posicion, objetostock);
                posicion++;

                listadetalle[0] = cantidadproductos;
                listadetalle[1] = idprodu;
                listadetalle[2] = descrip;
                listadetalle[3] = labora;
                listadetalle[4] = unidad1;
                listadetalle[5] = fraccion1;
                listadetalle[6] = pvp;

                listadetalle[9] = "0";
                listadetalle[10] = "0";
                listadetalle[11] = orden;
                ordenproducto = Integer.parseInt(orden);

                BigDecimal bd1 = new BigDecimal(pvx);
                bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                BigDecimal bd2 = new BigDecimal(total1);
                bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                listadetalle[7] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                listadetalle[8] = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                tablaproforma.addRow(listadetalle);

                if (igvaux == 0.0) {
                    lisProdSinIGV.add(idprodu);
                }

                Calcula_Monto(igvaux, pvx, total1);

                listaProductosVerifica.add(listadetalle);


            }

            VerificaPagoFraccionado(idtipopago);
            cantidadproductos = jTable2.getRowCount();
            jTable2.requestFocus();
            jTable2.getSelectionModel().setSelectionInterval(0, 0);

            col = jTable2.getColumnModel().getColumn(0);
            col.setCellRenderer(new ColoredTableCellRenderer());
            col = jTable2.getColumnModel().getColumn(1);
            col.setCellRenderer(new ColoredTableCellRenderer());

        } else {
            JOptionPane.showMessageDialog(this, " LO SENTIMOS NO PUEDES AGREGAR ESTA PROFORMA  ", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void Calcula_Monto(double igvaux, double pvx, double total1) {
        double auxparcial = 0.0;
        double valortabla = total1;
        int fila = listsubtotales.size();

        if (igvaux == 0) {
            total += valortabla;
            subtotal += valortabla;
            objsubtotalIgv = new ProductosPrecios(valortabla, igvaux);
            listsubtotales.add(fila, objsubtotalIgv);
        } else {
            if (IGV == 0) {
                CapturaIGV();
            }

            total += valortabla;
            auxparcial = (valortabla / (1 + (IGV / 100)));

            objsubtotalIgv = new ProductosPrecios(auxparcial, igvaux);
            listsubtotales.add(fila, objsubtotalIgv);
            subtotal += auxparcial;
        }


        BigDecimal bd1 = new BigDecimal(subtotal);
        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        subtotal = bd1.doubleValue();

        BigDecimal bd2 = new BigDecimal(total);
        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        total = bd2.doubleValue();

        this.jTextField21.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        this.jTextField8.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        double igvauxiliar = total - subtotal;

        BigDecimal bd3 = new BigDecimal(igvauxiliar);
        bd3 = bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        igvauxiliar = bd3.doubleValue();

        this.jTextField9.setText(bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

        if (this.jCheckBox1.isSelected()) {
            this.jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        }

        this.jTextField11.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

    }

    public void AsignaDatos_Proforma(String idprofor, List<Proforma> listaproforma, int fila) {
        try {
            ordenproducto = 1;
           listaProductosVerifica.clear();
           
            limpiardatos();
            idproforma = idprofor;
            jTextField1.setText(idproforma);
            listsinstock = new ArrayList<Producto>();
            veces = 0;

            if (listaproforma.size() > 0) {

                this.jTextField14.setText(listaproforma.get(fila).getDniaux());
                this.jTextField3.setText(listaproforma.get(fila).getNomCliente());
                this.jTextField4.setText(listaproforma.get(fila).getRUC());

                List<Clientes> midirecciones = objClientes.Lista_Direcciones(idbotica, listaproforma.get(fila).getId_Cliente(), listaproforma.get(0).getIdEmpresa(), idproforma);

                for (int k = 0; k < midirecciones.size(); k++) {
                    jComboBox8.addItem(midirecciones.get(k).getDireccion());
                }

                idcliente = listaproforma.get(fila).getId_Cliente();
                jTextField2.setText(String.valueOf(idcliente));
                idtipopago = listaproforma.get(fila).getId_TipoPago();
                idmedico = listaproforma.get(fila).getId_Medico();
                Id_Tipo_Precio = listaproforma.get(fila).getId_Tipo_Precio();
                Id_Personal_Botica_Venta = listaproforma.get(fila).getId_Personal_Botica_Venta();
                dniresponsable = listaproforma.get(fila).getIdperosnalmodficada();
                RUC = listaproforma.get(fila).getRUC();
                tipventa = listaproforma.get(fila).getId_Tipo_Venta();

                for (int w = 0; w < lis_tipo_venta.size(); w++) {
                    if (lis_tipo_venta.get(w).getId_Tipo_Venta() == tipventa) {
                        jComboBox3.setSelectedIndex(w);
                        break;
                    }
                }

                for (int k = 0; k < this.jComboBox1.getItemCount(); k++) {
                    if (idtipopago == listatipospagos.get(k).getId_TipoPago()) {
                        jComboBox1.setSelectedIndex(k);
                        k = jComboBox1.getItemCount();
                    }
                }

                /*
                 * RECUPERO EL DETALLE DE LA PROFORMA
                 */

                listproformaDetalle = logicaProforma.Recupera_Detalle_Proforma(idproforma, idbotica);
                Productos_Botica productoBotica;
                Producto producto;

                // Recupero numero de registros del Jtable
                // Gino Paredes Zurita

                for (int i = 0; i < listproformaDetalle.size(); i++) {
                     listadetalle = new Object[12];
                    String idprodu = listproformaDetalle.get(i).getIdproducto();
                    String descrip = listproformaDetalle.get(i).getDescipcionproducto();
                    int unidad1 = listproformaDetalle.get(i).getUNIDAD();
                    int fraccion1 = listproformaDetalle.get(i).getFRACCION();
                    double pvp = listproformaDetalle.get(i).getPrecio_Venta();
                    String laboratorio = listproformaDetalle.get(i).getId_laboratorio();
                    double pvx = listproformaDetalle.get(i).getPvx();
                    double total1 = listproformaDetalle.get(i).getTotal();
                    String ordenproduto = listproformaDetalle.get(i).getOrdenProducto();
                    BigDecimal bd2 = new BigDecimal(total1);
                    bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    String orden = listproformaDetalle.get(i).getOrdenProducto();


                    if (total1 < 0) {
                        jTextField7.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                    }

                    double igvaux = listproformaDetalle.get(i).getIGV_Exonerado();

                    //MARCO LOS PRODUCTOS QUE TIENES IGV Y LOS QUE NO TIENEN
                    if (igvaux == 0) {
                        lisProdSinIGV.add(idprodu);
                    } else {
                        lisProdSinIGV.add(9999);
                    }

                    objetostock = new ProductosPrecios();
                    productoBotica = new Productos_Botica();
                    producto = new Producto();

                    producto.setEmpaque(listproformaDetalle.get(i).getEmpaque());
                    productoBotica.setProducto(producto);
                    productoBotica.setMostrador_Stock_Empaque(listproformaDetalle.get(i).getStock_Empaque());
                    productoBotica.setMostrador_Stock_Fraccion(listproformaDetalle.get(i).getStock_Fraccion());
                    objetostock.setProductoBotica(productoBotica);
                    productostock.add(i, objetostock);

                    listadetalle[0] = i + 1;
                    listadetalle[1] = idprodu;
                    listadetalle[2] = descrip;
                    listadetalle[3] = laboratorio;
                    listadetalle[4] = unidad1;
                    listadetalle[5] = fraccion1;
                    listadetalle[6] = pvp;

                    listadetalle[9] = "0";
                    listadetalle[10] = "0";
                    listadetalle[11] = orden;

                    BigDecimal bd1 = new BigDecimal(pvx);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                    // SIS ES DESCUENTO DE COASOCIADO
                    if (idprodu.charAt(0) == 'S') {
                        jTextField7.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                        midescuentos = objProducto.Recupera_Porcen_Descuento(idprodu);
                        veces = 1;
                        Recupera_Posicion_Descuento();
                    }

                    // SI ES VENTA DE SOAT
                    if (descrip.equals("SOAT")) {


                        jLabel36.setText("ESTA ES UNA VENTA DE SOAT");
                        jLabel37.setText("Número de Póliza:");
                        jTextField5.setVisible(true);
                        //jTextField41.setVisible(true);

                        String recPoliza = mantProduc.Recupera_Poliza().toString().trim();
                        String[] recuperaPoliza = recPoliza.split("@");

                        jTextField5.setText(recuperaPoliza[0]);
                        jTextField41.setText(recuperaPoliza[1]);

                        jComboBox1.setEnabled(false);

                        /* if (Integer.parseInt(recuperaPoliza[0]) > Integer.parseInt(recuperaPoliza[1])){

                        JOptionPane.showMessageDialog(this, " mayor  ", "Error", JOptionPane.ERROR_MESSAGE);
                        }*/

                    } else {
                        jLabel36.setText(" ");
                    }

                    listadetalle[7] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[8] = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[9] = ordenproduto;
                    tablaproforma.addRow(listadetalle);
                    CalculaMontos(igvaux, i);

                    listaProductosVerifica.add(listadetalle);



                    /*
                     * VERIFICO STOCK DE PRODUCTOS
                     */
                    if (!VerificaStock(idprodu, unidad1, fraccion1)) {
                        Laboratorios laborator = new Laboratorios();
                        Producto miproducto = new Producto();
                        laborator.setId_Lab(laboratorio);
                        miproducto.setLaboratorio(laborator);
                        miproducto.setIdProducto(idprodu);
                        miproducto.setDescripcion(descrip);
                        listsinstock.add(miproducto);
                    }
                }

                VerificaPagoFraccionado(idtipopago);
                cantidadproductos = jTable2.getRowCount();
                col = jTable2.getColumnModel().getColumn(0);
                col.setCellRenderer(new ColoredTableCellRenderer());
                col = jTable2.getColumnModel().getColumn(1);
                col.setCellRenderer(new ColoredTableCellRenderer());

                HabilitaBotones(true);
                Recupera_Serie_Numero();
                jTable2.requestFocus();
                jTable2.getSelectionModel().setSelectionInterval(0, 0);
                CalculaMontoIngresado();

                if (lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {
                    jLabel11.setText(lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getDESCRIPCION());
                    jLabel11.setVisible(true);
                }
            }

        } catch (Exception ex) {
            System.out.println("AsignaDatos_Proforma :" + ex.getMessage());
        }

    }

    private void Recupera_Posicion_Descuento() {
        int posi = 0;

        if (ListDescuentos.size() > 0) {
            for (int k = 0; k < ListDescuentos.size(); k++) {
                if (ListDescuentos.get(k).getId_descuento() == midescuentos.getId_Descuento()) {
                    posi = k;
                    break;
                }
            }
            jComboBox4.setSelectedIndex(posi + 1);
        }
    }

    public void Muestra_Sin_Stock() {
        if (listsinstock.size() > 0) {
            ProductosSInStock psin = new ProductosSInStock(objetoventana, true, listsinstock);
            psin.setVisible(true);
        }
        listsinstock.removeAll(listsinstock);
    }

    private void ListaProforma() {
        ListadoProformas pe = new ListadoProformas(objetoventana, this);
        pe.show(true);
    }

    private void VerificaCaja() {
        int resul = 0;

        try {

            tipventa = lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta();
            boolean apertura = objcaja.CajaAperturada_Numero(idbotica, idcaja, tipventa);

            if (apertura) {

                resul = objClientes.EsDescuento(listatipospagos.get(jComboBox1.getSelectedIndex()).getId_TipoPago());

                if (resul == 1) {
                    int elcodigo = Integer.parseInt(jTextField2.getText().trim());

                    if (objClientes.Recupera_IdCliente_Descuento(idbotica, elcodigo) == elcodigo) {
                        CalculaVenta(resul);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error \n A este Cliente no se le Puede aplicar \n el Descuento al Personal \n Porfavor Seleccione un Cliente Correcto ", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    CalculaVenta(resul);
                }

            } else {
                JOptionPane.showMessageDialog(this, "ERROR : \n LO SENTIMOS PORFAVOR ES NECESARIO QUE APERTURE SU CAJA", "Error", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println("VerificaCaja :" + ex.getMessage());
        }

    }

    private void Cliente_Comun() {
        this.jTextField3.setText(def.getNombre_RazonSocial());
        this.jTextField2.setText(String.valueOf(def.getId_Cliente()));
        this.jComboBox8.addItem(def.getDireccion());
    }

    private void RealizaOpciones(java.awt.event.KeyEvent evt) {
        try {
            if (evt.getKeyText(evt.getKeyCode()).compareTo("F3") == 0) {
                if (jTable2.getRowCount() == 0) {
                    Cliente_Comun();
                }
                BusquedaProducto();
                if (!jButton4.isEnabled()) {
                    HabilitaBotones(true);
                }
            }

            if (evt.getKeyText(evt.getKeyCode()).compareTo("F6") == 0) {
                NuevaVenta();
            }

            if (evt.getKeyText(evt.getKeyCode()).compareTo("F8") == 0) {
                CerrarVentana();
            }

            if (evt.getKeyText(evt.getKeyCode()).compareTo("F9") == 0) {
                if (Verifica_Fecha()) {
                    VerificaCaja();
                } else {
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS LA HORA DEL SERVIDOR ES INCORRECTA \n PORFAVOR COMUNIQUESE CON INFORMATICA \n FECHA DEL SERVIDOR : " + objlogiccafecha.RetornaFecha() + " " + objlogiccafecha.RetornaHora() + "  ", "Error", JOptionPane.ERROR_MESSAGE);
                    String correo = objlistabotica.ReornaCorreo(idbotica);
                    objmail.sendMail(correo, "ERROR DE FECHA EN EL SERVIDOR", "PROBLEMA ENCONTRADO CON LA FECHA DEL SERVIDOR \n \n FECHA DEL SERVIDOR : " + objlogiccafecha.RetornaFecha() + " " + objlogiccafecha.RetornaHora() + " \n BOTICA FELICIDAD  " + idbotica);
                }
            }

            if (evt.getKeyText(evt.getKeyCode()).compareTo("F2") == 0) {
                if (this.jTable2.getRowCount() == 0) {
                    ListaProforma();
                }
            }

            if (evt.getKeyText(evt.getKeyCode()).compareTo("F4") == 0) {
                if (this.jTextField2.getText().length() == 0) {
                    Cliente_Comun();
                    this.jTextField3.setEnabled(true);
                    this.jTextField3.requestFocus();
                } else {
                    new FormClientes(this, objetoventana, idbotica).show(true);
                }
            }


        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }

    private boolean Verifica_Fecha() {
        boolean resul = false;
        resul = objlogiccafecha.VerificaFecha(this.idbotica);
        return resul;
    }

    private void CerrarVentana() {
        if (jTable2.getRowCount() > 0) {

            int pe = JOptionPane.showConfirmDialog(null, " Deseas Salir ?", "Confirmar",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (pe == JOptionPane.YES_OPTION) {
                objventa.marcacdo = false;
                objventa.Habilita(true);
                dispose();
            }
        } else {
            objventa.marcacdo = false;
            objventa.Habilita(true);
            dispose();
        }

        objventa.requestFocus();
    }

    private void RecuperaTarjetas() {
        try {

            int w = jComboBox2.getItemCount();
            if (w == 0) {
                listtarj = objlogicapagos.retornaTarjetas(1);
                for (int i = 0; i < listtarj.size(); i++) {
                    String texto = listtarj.get(i).getDescripcion();
                    this.jComboBox2.addItem(texto);
                }
            }

        } catch (Exception ex) {
            System.out.println("ERROR CAPA VISTA RecuperaTarjetas " + ex.getMessage());
        }
    }

    private int VerificaPagosDiversos() {
        String doc = "";
        String val = null;
        String val1 = null;
        canttiposPagos = 0;
        lista_pagos.removeAll(lista_pagos);


        if (this.jCheckBox1.isSelected()) {
            canttiposPagos++;

            if (this.jTextField17.getText().trim().compareTo("") != 0) {
                val = this.jTextField17.getText().trim();
                int id = Integer.parseInt(jCheckBox1.getToolTipText());
                double valor = Double.parseDouble(val);

                if (valor == 0) {
                    return 3;
                } else {
                    if (valor < 0) {
                        return -1;
                    } else {
                        objeto = new Ventas_Tipo_Pago(idbotica, id, valor, fecha, doc, "");
                        lista_pagos.add(objeto);
                    }
                }

            } else {
                this.jTextField7.requestFocus();
                return 2;
            }
        }
        if (this.jCheckBox4.isSelected()) {
            canttiposPagos++;

            if (this.jTextField19.getText().trim().compareTo("") != 0) {
                if (this.jTextField12.getText().trim().compareTo("") != 0) {

                    val = this.jTextField19.getText().trim();
                    int id = Integer.parseInt(jCheckBox4.getToolTipText());
                    double valor = Double.parseDouble(val);

                    if (valor == 0) {
                        return 3;
                    } else {
                        if (valor < 0) {
                            return -1;
                        } else {
                            doc = this.jTextField12.getText().trim();
                            objeto = new Ventas_Tipo_Pago(idbotica, id, valor, fecha, doc, "");
                            lista_pagos.add(objeto);
                        }

                    }
                } else {
                    return 5;
                }

            } else {
                this.jTextField9.requestFocus();
                return 2;
            }

        }
        if (this.jCheckBox2.isSelected()) {
            canttiposPagos++;

            if (this.jTextField10.getText().trim().compareTo("") != 0) {
                if (this.jTextField13.getText().trim().compareTo("") != 0) {
                    val = this.jTextField10.getText().trim();
                    int id = Integer.parseInt(jCheckBox2.getToolTipText());
                    double valor = Double.parseDouble(val);

                    if (valor == 0) {
                        return 3;
                    } else {
                        if (valor < 0) {
                            return -1;
                        } else {
                            doc = this.jTextField13.getText().trim();
                            objeto = new Ventas_Tipo_Pago(idbotica, id, valor, fecha, doc, jComboBox5.getSelectedItem().toString());
                            lista_pagos.add(objeto);
                        }
                    }
                } else {
                    this.jTextField13.requestFocus();
                    return 5;

                }

            } else {
                this.jTextField10.requestFocus();
                return 2;
            }


        }
        if (this.jCheckBox3.isSelected()) {
            canttiposPagos++;

            if (this.jTextField18.getText().trim().compareTo("") != 0) {
                val = this.jTextField18.getText().trim();
                val1 = this.jTextField6.getText().trim();

                double valor = Double.parseDouble(val);

                if (valor == 0) {
                    return 3;
                } else if (val1.equals("")) {
                    this.jTextField6.requestFocus();
                    return 8;
                } else {
                    if (valor < 0) {
                        return -1;
                    } else {
                        doc = this.jTextField6.getText().trim();
                        int idpa = listtarj.get(this.jComboBox2.getSelectedIndex()).getId_TipoPago();
                        objeto = new Ventas_Tipo_Pago(idbotica, idpa, valor, fecha, doc, this.jComboBox2.getSelectedItem().toString());
                        lista_pagos.add(objeto);
                    }
                }

            } else {
                this.jTextField18.requestFocus();
                canttiposPagos = 0;
                return 2;
            }

        }

        if (this.jCheckBox5.isSelected()) {
            canttiposPagos++;

            if (this.jTextField39.getText().trim().compareTo("") != 0) {
                if (this.jTextField38.getText().trim().compareTo("") != 0) {
                    val = this.jTextField39.getText().trim();
                    int id = Integer.parseInt(jCheckBox5.getToolTipText());
                    double valor = Double.parseDouble(val);

                    if (valor == 0) {
                        return 3;
                    } else {
                        if (valor < 0) {
                            return -1;
                        } else {
                            doc = this.jTextField38.getText().trim();
                            objeto = new Ventas_Tipo_Pago(idbotica, id, valor, fecha, doc, jComboBox7.getSelectedItem().toString());
                            lista_pagos.add(objeto);
                        }
                    }
                } else {
                    this.jTextField38.requestFocus();
                    return 5;
                }

            } else {
                this.jTextField39.requestFocus();
                return 2;
            }


        }

        if (canttiposPagos > 2) {
            lista_pagos.removeAll(lista_pagos);
            canttiposPagos = 0;
            return 1;
        } else if (canttiposPagos == 0) {
            return 4;
        } else if (canttiposPagos < 2 && listatipospagos.get(jComboBox1.getSelectedIndex()).getId_TipoPago() == 15) {
            return 7;
        } else {

            Ventas_Tipo_Pago aux;
            Ventas_Tipo_Pago aux_1;

            for (int i = 0; i < lista_pagos.size(); i++) {
                for (int k = i + 1; k < lista_pagos.size(); k++) {

                    if (lista_pagos.get(k).getMonto() > lista_pagos.get(i).getMonto()) {

                        aux = lista_pagos.get(i);
                        aux_1 = lista_pagos.get(k);

                        lista_pagos.set(i, aux_1);
                        lista_pagos.set(k, aux);

                        i = lista_pagos.size();
                        break;

                    }
                }
            }
            return 0;
        }  //OK GUARDA VENTA

    }

    private void DeshabilitaPagosDiversos(boolean valor) {
        if (valor == false) {
            this.jTextField17.setText("");
            this.jTextField19.setText("");
            this.jTextField18.setText("");
            this.jTextField10.setText("");
            this.jTextField11.setText("");
            this.jTextField12.setText("");
            this.jTextField13.setText("");
        }
    }

    private void Guarda_Venta(int resultado) {

        if (resultado == 0) {
            int posicion = 0;
            Object objet = this.jComboBox3.getSelectedItem();
            tipventa = lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta();
            String resulta = objfactura.Verifica_Datos_Factura(tipventa, this.jTextField4.getText().trim(), this.jTextField3.getText().trim(), jComboBox8.getSelectedItem().toString().trim());

            if (resulta != null) {

                JOptionPane.showMessageDialog(this, resulta.substring(1, resulta.length()), "Error", JOptionPane.ERROR_MESSAGE);

                if (Integer.parseInt(resulta.substring(0, 1)) == 1) {
                    this.jTextField4.requestFocus();
                } else if (Integer.parseInt(resulta.substring(0, 1)) == 2) {
                    this.jTextField3.requestFocus();
                } else if (Integer.parseInt(resulta.substring(0, 1)) == 3) {
                    this.jComboBox8.requestFocus();
                }
            } else {

                boolean flag = objfactura.Verifica_Datos_Boleta(tipventa, total, this.jTextField14.getText().trim(), posicion, jTextField3.getText().trim(), jComboBox8.getSelectedItem());

                if (!flag) {
                    JOptionPane.showMessageDialog(this, "PORFAVOR PARA ESTE MONTO DE VENTA SE REQUIERE INGRESAR : \n NOMBRE DEL CLIENTE  \n NUMERO DE DNI  \n DIRECCION DEL CLIENTE ", "Error", JOptionPane.ERROR_MESSAGE);
                    this.jTextField14.requestFocus();
                } else {
                    if (jTextField1.getText().trim().compareTo("") == 0) {
                        new Medicos(objetoventana).setVisible(true);
                        idmedico = Medicos.getId_Medico();
                        colegiatura = Medicos.getColegiatura();
                        if (Medicos.getId_Medico() != null) {
                            Guarda_MiVenta(objet);
                        }
                    } else {
                        Guarda_MiVenta(objet);
                    }
                }
            }

        }
        if (resultado == 1) {
            canttiposPagos = 0;
            JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN HASTA DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (resultado == 2) {
                canttiposPagos = 0;
                JOptionPane.showMessageDialog(this, " LO SENTIMOS \n DEBE DE INGRESAR UN MONTO PARA CADA TIPO DE PAGO ", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (resultado == 5) {
                    canttiposPagos = 0;
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS \n FALTA INGRESAR DATOS PARA SU TIPO DE PAGO ", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                    if (resultado == 3) {
                        canttiposPagos = 0;
                        JOptionPane.showMessageDialog(this, " LO SENTIMOS \n NO SE PUEDE INGRESAR UNA CANTIDAD 0  ", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {

                        if (resultado == 4) {
                            canttiposPagos = 0;
                            JOptionPane.showMessageDialog(this, " LO SENTIMOS DEBE DE SELECCIONAR UN TIPO DE PAGO \n PARA REALIZAR LA VENTA  ", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }//CIERRE DEL ELSE

        }//CIERRE DEL ELSE
    }

    public void Guarda_MiVenta(Object objet) {
        double monto = 0;
        String dato = "";
        double compara = 0;
        String tipoPago = "";
        String fechadesde = "";
        String fechahasta = "";
        String compararfecha = "";
        String tipoTarjeta = "";

        String tipoDocValidar = "";
        int canti1 = 0;
        int canti2 = 0;
        String cantidad1 = "";
        String cantidad2 = "";
        String cantidad3 = "";

        String valueCompara = "";
        MuestraVentana obj = new MuestraVentana(objventa.getIdbotica(), idcaja, tipventa, this.jTextField17.getText().trim(), objet.toString().trim());

        monto = Double.parseDouble(this.jTextField21.getText().trim());
        tipoPago = String.valueOf(this.jComboBox1.getSelectedItem());
        tipoTarjeta = String.valueOf(this.jComboBox2.getSelectedItem());

        String validar = mantProduc.Recupera_Promo_CodigoPrecio().toString().trim();
        String[] recuperacadena = validar.split("@");
        compara = Double.parseDouble(recuperacadena[1]); //monto a comparar
        fechadesde = recuperacadena[2]; //fecha desde
        fechahasta = recuperacadena[3]; //fecha hasta
        compararfecha = recuperacadena[4]; //validofecha

        String validartipoPago = tipoPago.toString().trim();
        String[] recuperatipopago = validartipoPago.split(" ");
        tipoPago = recuperatipopago[0]; //tipo pago

        if (tipoTarjeta.equals("Tarjeta VISA UNICA") && tipoPago.equals("20") && monto >= compara && compararfecha.equals("1")) {

            BusquedaProductoPromocion();

            String cant = String.valueOf(jTable2.getRowCount());  //cuenta registros del jtable2
            DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();
            //aca capturo el primer dato de la celda seleccionada
            dato = String.valueOf(tm.getValueAt(jTable2.getSelectedRow(), 8));

            valueCompara = String.valueOf(dato.charAt(0));

            if (cant.equals("7") && valueCompara.equals("-")) {
                JOptionPane.showMessageDialog(this, "EL monto no debe ser negativo en la siguiente boleta", "Error", JOptionPane.ERROR_MESSAGE);

            } else {

                obj.AbrirVentana();
                if (obj.isBanedra()) {
                    serie = obj.getSerie();
                    numero = obj.getNumero();
                    ventaDelivery = obj.getVentaDelivery();

                    GuardaVenta(serie, numero);
                }
            }
        } else {

            double totcompara;
            for (int i = 0; i < this.jTable2.getRowCount(); i++) {
                String idproducto = String.valueOf(this.jTable2.getValueAt(i, 1));
                totcompara = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 8)));
                //jTextField40.setText(Double.toString(totcompara));
            }

            tipoDocValidar = String.valueOf(this.jComboBox3.getSelectedItem());
            //String cantJTable = String.valueOf(jTable2.getRowCount());
            int cantJTable1 = jTable2.getRowCount();
            cantidad = objProducto.RetornaCantidadCompara(tipoDocValidar);

            String[] lista;
            String cadena = cantidad;
            lista = cadena.split("/");

            int canti = Integer.parseInt(lista[0]);      // recupera el numero de items por tipo de doc
            String recTipDoc = String.valueOf(lista[1]); // recupera el id de tipo de doc

            /*

            if (recTipDoc.equals("1") && ((cantJTable1 > 6) && (cantJTable1 <12))){

            String valordato = String.valueOf(this.jTable2.getValueAt(6,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));

            }else if (recTipDoc.equals("1") && ((cantJTable1 > 12) &&(cantJTable1 <18))){

            String valordato = String.valueOf(this.jTable2.getValueAt(12,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));

            }else if (recTipDoc.equals("1") && ((cantJTable1 > 18) && (cantJTable1 <24))){

            String valordato = String.valueOf(this.jTable2.getValueAt(18,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));
            }


            if (recTipDoc.equals("2") && ((cantJTable1 > 12) && (cantJTable1 <24))){

            String valordato = String.valueOf(this.jTable2.getValueAt(12,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));

            }else if (recTipDoc.equals("2") && ((cantJTable1 > 24) &&(cantJTable1 <36))){

            String valordato = String.valueOf(this.jTable2.getValueAt(24,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));

            }else if (recTipDoc.equals("2") && ((cantJTable1 > 36) && (cantJTable1 <48))){

            String valordato = String.valueOf(this.jTable2.getValueAt(36,8));
            jTextField40.setText(valordato);
            valueCompara = String.valueOf(jTextField40.getText().charAt(0));
            }
             */
            /*
            //if (recTipDoc.equals("1") && (cantJTable.equals(cantidad1) || cantJTable.equals(cantidad2)|| cantJTable.equals(cantidad3)) && valueCompara.equals("-")){
            if (recTipDoc.equals("1") && valueCompara.equals("-")){
            JOptionPane.showMessageDialog(this,"EL MONTO DE LA SIGUIENTE BOLETA NO PUEDE EMPEZAR EN NEGATIVO,\n POR FAVOR REORGANIZAR LOS PRODUCTOS", "Error", JOptionPane.ERROR_MESSAGE);

            //}else if (recTipDoc.equals("2") && (cantJTable.equals(cantidad1) || cantJTable.equals(cantidad2) || cantJTable.equals(cantidad3)) && valueCompara.equals("-")){
            }else if (recTipDoc.equals("2") && valueCompara.equals("-")){
            JOptionPane.showMessageDialog(this,"EL MONTO DE LA SIGUIENTE FACTURA NO PUEDE EMPEZAR EN NEGATIVO,\n POR FAVOR REORGANIZAR LOS PRODUCTOS", "Error", JOptionPane.ERROR_MESSAGE);



            }else{
             */
            obj.AbrirVentana();

            if (obj.isBanedra()) {
                serie = obj.getSerie();
                numero = obj.getNumero();
                ventaDelivery = obj.getVentaDelivery();
                GuardaVenta(serie, numero);
            }
            // }
        }
    }

    private void CalculaVenta(int resul) {

        String doc = "";
        int resultado = 0;
        double monto = 0;
        boolean escredito = false;
        boolean error = true;
        lista_pagos.removeAll(lista_pagos);

        if (esCredito(idtipopago)) {
            escredito = true;
            if (Double.valueOf(jTextField21.getText().toString()) > objClientes.RecuperaSaldo(Integer.parseInt(jTextField2.getText().toString().trim()), idbotica)) {
                JOptionPane.showMessageDialog(this, "EL CLIENTE NO CUENTA SON SALDO PARA ESTA VENTA", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                total = Double.parseDouble(jTextField21.getText().trim());
                idtipopago = listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago();
                objeto = new Ventas_Tipo_Pago(idbotica, idtipopago, total, fecha, doc, "");
                lista_pagos.add(objeto);
                Guarda_Venta(0);
            }
        } else {

            if (listatipospagos.get(jComboBox1.getSelectedIndex()).getEsAbono() == 1) {//SI ES ABONO

                if (jTextField38.getText().trim().compareTo("") != 0) {
                    if (jTextField39.getText().trim().compareTo("") != 0) {
                        double mitottal = Double.parseDouble(jTextField39.getText().trim());

                        BigDecimal bd1 = new BigDecimal(mitottal);
                        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        mitottal = bd1.doubleValue();

                        if (mitottal >= total) {
                            doc = jTextField38.getText().trim();
                            objeto = new Ventas_Tipo_Pago(idbotica, idtipopago, total, fecha, doc, jComboBox7.getSelectedItem().toString());
                            lista_pagos.add(objeto);
                            jTextField11.setText("");
                            Guarda_Venta(0);
                            jTextField38.setText("");
                            jTextField39.setText("");

                        } else {
                            JOptionPane.showMessageDialog(this, " LO SENTIMOS \n EL IMPORTE DEL ABONO ES MENOR QUE EL MONTO DE VENTA ", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, " PORFAVOR INGRESE UN IMPORTE VALIDO", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, " PORFAVOR INGRESE UN NUMERO DE OPERACION VALIDO ", "Error", JOptionPane.ERROR_MESSAGE);
                }


            } else {

                if (resul == 1) {
                    idtipopago = listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago();
                    objeto = new Ventas_Tipo_Pago(idbotica, idtipopago, total, fecha, doc, "");
                    lista_pagos.add(objeto);
                    Guarda_Venta(0);
                } else {

                    Calcula_Pagos();
                    monto = Double.parseDouble(this.jTextField11.getText().trim());

                    BigDecimal bd1 = new BigDecimal(monto);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    monto = bd1.doubleValue();

                    BigDecimal bd2 = new BigDecimal(total);
                    bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    total = bd2.doubleValue();

                    if (monto < total && !escredito) {
                        JOptionPane.showMessageDialog(this, "LO SENTIMOS \n EL PAGO DEL CLIENTE ES MENOR QUE EL MONTO DE LA VENTA \n PORFAVOR REVISAR EL PAGO FRACCIONADO ", "Error", JOptionPane.ERROR_MESSAGE);
                        error = false;
                    }
                    if (monto > total && !escredito) {
                        JOptionPane.showMessageDialog(this, "LO SENTIMOS \n EL PAGO DEL CLIENTE ES MAYOR QUE EL MONTO DE LA VENTA \n PORFAVOR REVISAR EL PAGO FRACCIONADO ", "Error", JOptionPane.ERROR_MESSAGE);
                        error = false;
                    } else {
                        resultado = VerificaPagosDiversos();

                        if (resultado == 7) {
                            if (error) {
                                JOptionPane.showMessageDialog(this, " LO SENTIMOS \n PARA PAGOS DIVERSOS ES NECESARIO SELECCIONAR DOS PAGOS FRACCIONADOS ", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else if (resultado == 8) {
                            if (error) {
                                JOptionPane.showMessageDialog(this, " PORFAVOR INGRESE LOTE - REF \n DEL VOUCHER DE LA VENTA", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            if (resultado == 5) {
                                if (error) {
                                    JOptionPane.showMessageDialog(this, " PORFAVOR INGRESE UN NUMERO DE DOCUMENTO ", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                if (error) {
                                    if (resultado == -1) {
                                        JOptionPane.showMessageDialog(this, "LO SENTIMOS  NO PUEDE INGRESAR UNA CANTIDAD NEGATIVA EN UN PAGO  ", "Error", JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        monto = Double.parseDouble(this.jTextField11.getText().trim());
                                        Guarda_Venta(resultado);
                                    }
                                }
                            }
                        }
                    }
                }//cierre de else
            }
        }
    }

    private void Calcula_Pagos() {
        double monto = 0;

        if (jCheckBox1.isSelected()) {
            if (jTextField17.getText().trim().compareTo("") != 0) {
                monto = Double.parseDouble(jTextField17.getText().trim());
            }
        }

        if (jCheckBox4.isSelected()) {
            if (jTextField19.getText().trim().compareTo("") != 0) {
                monto += Double.parseDouble(jTextField19.getText().trim());
            }
        }

        if (jCheckBox2.isSelected()) {
            if (jTextField10.getText().trim().compareTo("") != 0) {
                monto += Double.parseDouble(jTextField10.getText().trim());
            }
        }

        if (jCheckBox3.isSelected()) {
            if (jTextField18.getText().trim().compareTo("") != 0) {
                monto += Double.parseDouble(jTextField18.getText().trim());
            }
        }

        if (jCheckBox5.isSelected()) {
            if (jTextField39.getText().trim().compareTo("") != 0) {
                monto += Double.parseDouble(jTextField39.getText().trim());
            }
        }

        BigDecimal bd1 = new BigDecimal(monto);
        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        monto = bd1.doubleValue();

        this.jTextField11.setText(String.valueOf(monto));

    }

    private void CapturaIGV() {
        IGV = mantProduc.Captura_IGV();
    }

    public void AsignaDatosCliente() {
        try {

            this.jTextField2.setText(objcliente.getCodigoCliente());
            this.jTextField4.setText(objcliente.getRUC_DNI());
            this.jTextField3.setText(objcliente.getNombre_RazonSocial());
            idcliente = Integer.parseInt(objcliente.getCodigoCliente());
            Recupera_Direcciones();

        } catch (Exception ex) {
            System.out.println("AsignaDatosCliente :" + ex.toString());
        }
    }

    private void Recupera_Direcciones() {
        jComboBox8.removeAllItems();
        List<Clientes> midirecciones = objClientes.Lista_Direcciones(idbotica, Integer.parseInt(objcliente.getCodigoCliente()), objcliente.getEmpresa());

        for (int i = 0; i < midirecciones.size(); i++) {
            jComboBox8.addItem(midirecciones.get(i).getDireccion());
        }
    }

    private void CalculaMontoIngresado() {
        String mens = null;
        double calc1 = 0.0;

        try {

            if (this.jTextField10.getText().compareTo("") != 0) {
                String tota;
                tota = this.jTextField10.getText().trim();
                calc1 += Double.parseDouble(tota);
            }
            if (this.jTextField17.getText().compareTo("") != 0) {
                String tota;
                tota = this.jTextField17.getText().trim();
                calc1 += Double.parseDouble(tota);
            }
            if (this.jTextField18.getText().compareTo("") != 0) {
                String tota;
                tota = this.jTextField18.getText().trim();
                calc1 += Double.parseDouble(tota);

            }
            if (this.jTextField19.getText().compareTo("") != 0) {
                String tota;
                tota = this.jTextField19.getText().trim();
                calc1 += Double.parseDouble(tota);
            }

            if (this.jTextField39.getText().compareTo("") != 0) {
                String tota;
                tota = this.jTextField39.getText().trim();
                calc1 += Double.parseDouble(tota);
            }

            idtipopago = listatipospagos.get(jComboBox1.getSelectedIndex()).getId_TipoPago();

            if (esCredito(idtipopago)) {
                jLabel11.setText("LA SIGUIENTE VENTA ES UNA VENTA A CREDITO");
                this.jTextField17.setText("");
            } else {
                jLabel11.setText(" ");
            }


        } catch (Exception ex) {
            System.out.println("");
        }
    }

    public boolean esCredito(int idtipopago) {
        boolean escredito = false;
        escredito = objguardaventa.EsCredito(idtipopago);
        return escredito;
    }

    private void Habilita_Cash(boolean valor) {
        this.jCheckBox2.setSelected(valor);
        this.jCheckBox3.setSelected(valor);
        this.jCheckBox4.setSelected(valor);
        this.jCheckBox2.setEnabled(valor);
        this.jCheckBox3.setEnabled(valor);
        this.jCheckBox4.setEnabled(valor);
        this.jCheckBox1.setEnabled(!valor);
        this.jCheckBox1.setSelected(!valor);

        this.jTextField17.setEnabled(!valor);
        this.jTextField10.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField13.setEnabled(valor);
        this.jTextField12.setEnabled(valor);

        this.jTextField10.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField12.setText("");
        this.jTextField13.setText("");
        this.jComboBox5.setEnabled(valor);
        Habilita_Abono(valor);

    }

    private void Habilta_ESCredito(boolean valor) {
        this.jCheckBox1.setSelected(valor);
        this.jCheckBox2.setSelected(valor);
        this.jCheckBox3.setSelected(valor);
        this.jCheckBox4.setSelected(valor);

        this.jCheckBox1.setEnabled(valor);
        this.jCheckBox2.setEnabled(valor);
        this.jCheckBox3.setEnabled(valor);
        this.jCheckBox4.setEnabled(valor);

        this.jTextField17.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField10.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField12.setEnabled(valor);

        this.jTextField10.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField17.setText("");
        this.jTextField13.setText("");
        this.jTextField12.setText("");
        jLabel11.setVisible(true);
        this.jLabel11.setText(" LA SIGUIENTE ES UNA VENTA A CREDITO ");
        this.jComboBox5.setEnabled(false);
        Habilita_Abono(valor);

    }

    private void Habilita_ESDecPersonal(boolean valor) {

        this.jCheckBox1.setSelected(valor);
        this.jCheckBox2.setSelected(valor);
        this.jCheckBox3.setSelected(valor);
        this.jCheckBox4.setSelected(valor);

        this.jCheckBox1.setEnabled(valor);
        this.jCheckBox2.setEnabled(valor);
        this.jCheckBox3.setEnabled(valor);
        this.jCheckBox4.setEnabled(valor);

        this.jTextField17.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField10.setEnabled(valor);
        this.jTextField12.setEnabled(valor);

        this.jTextField10.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField17.setText("");
        this.jTextField13.setText("");
        this.jTextField12.setText("");
        jLabel11.setVisible(!valor);
        this.jLabel11.setText(" LA SIGUIENTE ES UNA VENTA A DESCUENTO A PERSONAL");
        this.jComboBox5.setEnabled(valor);
        Habilita_Abono(valor);
    }

    private void Habilita_EsNotaCredito(boolean valor) {
        jCheckBox2.setSelected(valor);
        jCheckBox3.setSelected(valor);
        jCheckBox1.setSelected(valor);
        jCheckBox4.setSelected(!valor);

        jCheckBox1.setEnabled(valor);
        jCheckBox2.setEnabled(valor);
        jCheckBox3.setEnabled(valor);
        jCheckBox4.setEnabled(!valor);

        jTextField17.setEnabled(valor);
        jTextField17.setText("");
        jTextField10.setEnabled(valor);
        jTextField13.setEnabled(valor);
        jTextField18.setEnabled(valor);
        jTextField12.setEditable(!valor);
        jTextField12.setEnabled(!valor);
        jComboBox5.setEnabled(valor);
        jTextField12.requestFocus();
        Habilita_Abono(valor);
    }

    private void Habilita_EsCheque(boolean valor) {
        this.jCheckBox4.setSelected(valor);
        this.jCheckBox3.setSelected(valor);
        this.jCheckBox1.setSelected(valor);
        this.jCheckBox4.setEnabled(valor);
        this.jCheckBox3.setEnabled(valor);
        this.jCheckBox1.setEnabled(valor);
        this.jCheckBox2.setEnabled(!valor);
        this.jTextField17.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField12.setEnabled(valor);
        this.jTextField17.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField12.setText("");
        this.jTextField10.setText("");
        this.jTextField13.setText("");
        this.jComboBox5.setEnabled(!valor);
        this.jTextField10.setEnabled(!valor);
        this.jTextField13.setEnabled(!valor);
        this.jTextField13.setEnabled(!valor);
        RecuperaBancos();
        Habilita_Abono(valor);
        this.jTextField13.requestFocus();
    }

    private void Habilita_ESAbono(boolean valor) {
        this.jCheckBox4.setSelected(valor);
        this.jCheckBox3.setSelected(valor);
        this.jCheckBox1.setSelected(valor);
        this.jCheckBox4.setEnabled(valor);
        this.jCheckBox3.setEnabled(valor);
        this.jCheckBox1.setEnabled(valor);
        this.jCheckBox2.setEnabled(valor);
        this.jTextField17.setEnabled(valor);
        this.jTextField18.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField12.setEnabled(valor);
        this.jTextField17.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField12.setText("");
        this.jTextField10.setEnabled(valor);
        this.jTextField13.setEnabled(valor);
        this.jTextField39.setText("");
        this.jTextField38.setText("");
        jTextField10.setText("");
        jTextField13.setText("");
        jComboBox5.setEnabled(valor);
        jCheckBox2.setSelected(valor);

    }

    private void Habilita_PagosDiversos(boolean valor) {
        jCheckBox1.setSelected(valor);
        jCheckBox2.setSelected(valor);
        jCheckBox3.setSelected(valor);
        jCheckBox4.setSelected(valor);
        jCheckBox5.setSelected(valor);
        jCheckBox1.setEnabled(!valor);
        jCheckBox2.setEnabled(!valor);
        jCheckBox3.setEnabled(!valor);
        jCheckBox4.setEnabled(!valor);
        jTextField17.setEnabled(valor);
        jTextField17.setText("");
        jTextField10.setEnabled(valor);
        jTextField18.setEnabled(valor);
        jTextField13.setEnabled(valor);
        jCheckBox3.setEnabled(!valor);
        jComboBox5.setEnabled(valor);
        jTextField11.setText("");
        Habilita_Abono(!valor);
        jCheckBox5.setSelected(valor);
    }

    private void Deshabilta_Tarjetas(boolean valor) {

        this.jCheckBox2.setSelected(valor);
        this.jCheckBox4.setSelected(valor);
        this.jCheckBox1.setSelected(valor);
        this.jCheckBox2.setEnabled(valor);
        this.jCheckBox4.setEnabled(valor);
        this.jCheckBox1.setEnabled(valor);

        this.jCheckBox3.setEnabled(!valor);
        this.jTextField17.setText("");
        this.jTextField10.setText("");
        this.jTextField19.setText("");
        this.jTextField18.setText("");
        this.jTextField11.setText("");
        this.jTextField12.setText("");
        this.jTextField6.setText("");
        this.jTextField13.setText("");
        this.jTextField17.setEnabled(valor);
        this.jTextField12.setEnabled(valor);
        this.jTextField10.setEnabled(valor);
        this.jTextField19.setEnabled(valor);
        this.jTextField11.setEnabled(valor);

        this.jTextField3.setEditable(!valor);
        this.jTextField3.requestFocus();
        this.jTextField18.setText(String.valueOf(total));
        this.jTextField11.setText(String.valueOf(total));
        this.jComboBox5.setEnabled(!valor);

        this.jTextField6.setEnabled(!valor);
        this.jComboBox2.setEnabled(!valor);
        this.jComboBox5.setEnabled(valor);
        this.jTextField18.setEnabled(!valor);
        this.jComboBox2.setEnabled(!valor);
        this.jTextField18.requestFocus();
        RecuperaTarjetas();
        Habilita_Abono(valor);

    }

    private void VerificaPagoFraccionado(int ind) {

        int idtipopago1 = ind;
        BigDecimal bd1 = new BigDecimal(total);
        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        total = bd1.doubleValue();

        if (idtipopago1 == 1)//SI ES CASH
        {
            Habilita_Cash(false);
            this.jTextField17.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
            this.jTextField11.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        } else {
            if (esCredito(idtipopago1))//SI ES CREDITO
            {
                Habilta_ESCredito(false);
            } else {
                if (idtipopago1 == 9)//SI ES DESCUENTO AL PERSONAL
                {
                    Habilita_ESDecPersonal(false);
                } else {
                    if (idtipopago1 == 7)//SI ES NOTA DE CREDITO
                    {
                        Habilita_EsNotaCredito(false);
                    } else {
                        if (idtipopago1 == 6)// SI ES CHEQUE
                        {
                            Habilita_EsCheque(false);
                            this.jTextField10.requestFocus();
                        } else {
                            if (idtipopago1 == 23)//SI ES ABONO
                            {
                                Habilita_Abono(true);
                                Habilita_ESAbono(false);
                            } else {
                                if (idtipopago1 == 15)//SI ES PAGOS DIVERSOS
                                {
                                    Habilita_PagosDiversos(false);
                                } else {
                                    if (idtipopago1 == 20 || idtipopago1 == 16 || idtipopago1 == 17 || idtipopago1 == 18 || idtipopago1 == 5 || idtipopago1 == 10 || idtipopago1 == 3) {
                                        Deshabilta_Tarjetas(false);
                                    } else {
                                        this.jCheckBox1.setSelected(false);
                                        this.jCheckBox2.setSelected(false);
                                        this.jCheckBox3.setSelected(false);
                                        this.jCheckBox4.setSelected(false);

                                        this.jCheckBox1.setEnabled(false);
                                        this.jCheckBox2.setEnabled(false);
                                        this.jCheckBox3.setEnabled(false);
                                        this.jCheckBox4.setEnabled(false);

                                        this.jTextField10.setText("");
                                        this.jTextField18.setText("");
                                        this.jTextField19.setText("");
                                        this.jTextField17.setText("");
                                        this.jTextField13.setText("");
                                        this.jTextField12.setText("");

                                        this.jTextField17.setEnabled(false);
                                        this.jTextField18.setEnabled(false);
                                        this.jTextField19.setEnabled(false);
                                        this.jTextField10.setEnabled(false);
                                        this.jTextField18.setEnabled(false);
                                        this.jTextField12.setEnabled(false);
                                    }
                                }
                            }//cierre else
                        }
                    }
                }
            }
        }
    }

    private void RecuperaBancos() {

        if (this.jComboBox5.getItemCount() == 0) {
            List<String> listaBancos = this.objguardaventa.Lista_Bancos();
            this.jComboBox5.setEnabled(true);
            for (int i = 0; i < listaBancos.size(); i++) {
                this.jComboBox5.addItem(listaBancos.get(i));
            }
        }
    }

    private void RecuperaBancos_1() {

        if (this.jComboBox7.getItemCount() == 0) {
            List<String> listaBancos = this.objguardaventa.Lista_Bancos();
            this.jComboBox7.setEnabled(true);
            for (int i = 0; i < listaBancos.size(); i++) {
                this.jComboBox7.addItem(listaBancos.get(i));
            }
        }
    }

    private void LimpiatTabla() {
        int cant = jTable2.getRowCount();
        if (cant >= 1) {
            for (int i = cant - 1; i >= 0; i--) {
                tablaproforma.removeRow(i);
            }
        }
    }

    /****************************************************************
     * METODO PARA VOLVER A REORDENAR LAS CANTIDADES DE LOS PRODUCTOS
     * **************************************************************/
    private void ReordenaTabla(int ultposi) {
        try {

            for (int i = ultposi; i < tablaproforma.getRowCount(); i++) {
                tablaproforma.setValueAt(ultposi + 1, ultposi, 0);
                ultposi++;
            }

        } catch (Exception EX) {
            JOptionPane.showMessageDialog(this, "ERROR AL REORDENAR TABLA", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }

    /****************************************************************
     * METODO PARA ELIMINAR UN PRODUCTO DE LA PROFORMA
     * **************************************************************/
    private void EliminaProducto(int fila) {
        int filas = tablaproforma.getRowCount();
        double auxsubtotal = 0;

        if (filas > 0) {

            try {

                if (fila >= 0) {

                    Confirmar pe = new Confirmar(objetoventana, "<html>Deseas Eliminar este Producto :" + tablaproforma.getValueAt(fila, 2) + "</html>");
                    pe.show(true);

                    if (pe.getConfirmar() == 1) {

                        listaProductosVerifica.remove(fila);

                        Double valor = Double.parseDouble(String.valueOf(tablaproforma.getValueAt(fila, 8)));
                        String codpro = String.valueOf(tablaproforma.getValueAt(fila, 1));

                        BigDecimal bd5 = new BigDecimal(total);
                        bd5 = bd5.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        total = bd5.doubleValue();

                        total -= valor;

                        double aux = mantProduc.recupera_Igv_Exonerado(codpro);

                        if (aux > 0) {
                            auxsubtotal = (valor / (1 + (IGV / 100)));
                        } else {
                            auxsubtotal = valor;
                        }

                        BigDecimal bd = new BigDecimal(auxsubtotal);
                        bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        auxsubtotal = bd.doubleValue();

                        subtotal -= auxsubtotal;

                        listsubtotales.remove(fila);
                        productostock.remove(fila);

                        int ultposi;
                        ultposi = ((Integer) tablaproforma.getValueAt(fila, 0)).intValue();
                        ultposi--;
                        tablaproforma.removeRow(fila);

                        if (ultposi > 0) {
                            ReordenaTabla(ultposi);
                        } else if (fila == 0) {
                            ReordenaTabla(fila);
                        }

                        cantidadproductos--;

                        if (cantidadproductos == 0) {
                            this.jTextField7.setText(" ");
                            this.jTextField8.setText(" ");
                            this.jTextField9.setText(" ");
                            this.jTextField21.setText(" ");
                            this.jTextField11.setText(" ");
                            listsubtotales.removeAll(listsubtotales);
                            productostock.removeAll(productostock);
                            subtotal = 0.0;
                            IGV = 0;
                            total = 0.0;
                        }

                        BigDecimal bd1 = new BigDecimal(subtotal);
                        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        subtotal = bd1.doubleValue();

                        BigDecimal bd2 = new BigDecimal(total);
                        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        total = bd2.doubleValue();

                        BigDecimal bd3 = new BigDecimal(total - subtotal);
                        bd3 = bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP);


                        this.jTextField21.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                        this.jTextField8.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                        this.jTextField9.setText(bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

                        if (listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago() == 2) {
                            this.jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                        }

                        CalculaMontoIngresado();

                    }
                } else {
                    JOptionPane.showMessageDialog(this, " DEBES DE SELLECIONAR UN ITEM PARA ELIMINAR ", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception ex) {
                System.out.println("Error al ELIMINAR PRODUCTO : " + ex.toString());
                JOptionPane.showMessageDialog(this, "Error al seleccionar en la tabla", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else //SI NO HAY PRODUCTOS EN LA TABLA
        {
            JOptionPane.showMessageDialog(this, "ERROR NO HAY PRODUCTOS EN LA PROFORMA", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }

    public void AgregaProforma(String cantidad, ProductosPrecios precios) {

        boolean resul = VerificaCantidad(cantidad);

        if (unidad == 0 && fraccion == 0) {
            JOptionPane.showMessageDialog(this, "PORFAVOR INGRESE DATOS CORRECTOS", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (resul == true) {
                BuscaTipoPrecio(precios);
            } else {
                JOptionPane.showMessageDialog(this, "PORFAVOR INGRESE DATOS CORRECTOS", "Error", JOptionPane.ERROR_MESSAGE);
                BusquedaProducto();
            }
        }
    }

    public void AgregaProformaPromocionPrecio(String cantidad, ProductosPrecios precios, int var) {

        boolean resul = VerificaCantidad(cantidad);

        if (unidad == 0 && fraccion == 0) {
            JOptionPane.showMessageDialog(this, "PORFAVOR INGRESE DATOS CORRECTOS", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (resul == true) {
                BuscaTipoPrecioPromocion(precios, var);
            } else {
                JOptionPane.showMessageDialog(this, "PORFAVOR INGRESE DATOS CORRECTOS", "Error", JOptionPane.ERROR_MESSAGE);
                BusquedaProducto();
            }
        }
    }
    /*
     *METODO QUE CALCULA SI SE CUENTA CON EL STOCK RESPECTIVO PARA LA VENTA
     */

    private boolean VerificaStock(String idproduc) {
        boolean resultado = false;
        int totalstock;
        Producto miproducto;
        Productos_Botica productoBotica;
        List<Productos_Botica> empRecuperado = new ArrayList<Productos_Botica>();

        empRecuperado = objfactura.Retorna_Producto_Stock(idproduc, idbotica);

        if (empRecuperado.size() > 0) {
            stockempaque = empRecuperado.get(0).getMostrador_Stock_Empaque();
            int stkempaque = Integer.parseInt(stockempaque.toString());

            empaque = empRecuperado.get(0).getProducto().getEmpaque();
            int empaque_tmp = Integer.parseInt(empaque.toString());

            if (empaque_tmp == 0) {
                empaque_tmp = 1;
            }

            stockfraccion = empRecuperado.get(0).getMostrador_Stock_Fraccion();
            int stfraccion = Integer.parseInt(stockfraccion.toString());
            /* miproducto = new Producto();
            miproducto.setEmpaque(empaque_tmp);
            productoBotica = new Productos_Botica();
            productoBotica.setProducto(miproducto);
            productoBotica.setMostrador_Stock_Empaque(stkempaque);
            productoBotica.setMostrador_Stock_Fraccion(stfraccion);
            objetostock.setProductoBotica(productoBotica);*/
            totalstock = stkempaque * empaque_tmp + stfraccion;
            int cantidadpedida = unidad * empaque_tmp + fraccion;

            if (cantidadpedida <= totalstock) {
                resultado = true;
            }

        }

        return resultado;

    }

    private void AsignaPrecio(ProductosPrecios precios) {

        double parcial1 = 0;
        String estadopromo = "0";
        int empaque1 = Integer.parseInt(empaque.toString());
        Producto miproducto;
        Productos_Botica productoBotica;
        Object[] listadetalle = new Object[12];
        if (empaque1 == 0 && fraccion > 0) {
            JOptionPane.showMessageDialog(this, " LO SENTIMOS ESTE PRODUCTO \n NO SE PUEDE VENDER EN FRACCION ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                Id_Tipo_Precio = precios.getTipoPrecio().getId_Tipo_Precio();
                String nomproducto = precios.getProductoBotica().getProducto().getDescripcion();
                String idproducto = precios.getProductoBotica().getProducto().getIdProducto();
                double pv = precios.getPrecio_Venta();
                cantidadproductos = jTable2.getRowCount();
                int indice = cantidadproductos;
                cantidadproductos++;

                miproducto = new Producto();
                miproducto.setEmpaque(empaque1);
                productoBotica = new Productos_Botica();
                productoBotica.setProducto(miproducto);
                productoBotica.setMostrador_Stock_Empaque(precios.getProductoBotica().getMostrador_Stock_Empaque());
                productoBotica.setMostrador_Stock_Fraccion(precios.getProductoBotica().getMostrador_Stock_Fraccion());
                objetostock = new ProductosPrecios();
                objetostock.setProductoBotica(productoBotica);

                productostock.add(indice, objetostock);
                Double montoDsctofraccion = 0.00;
                Double descuento2 = 0.00;
                Integer recuperaUnidadesminimo = 0;
                int orden = 0;
                int cantidad = 0;
                ProductosPromociones obj = null;

                if (BuscarProductos.isEspromo()) {
                    estadopromo = "1";
                    cantidad = objProducto.Verifica_Promocion(idproducto);
                    List<ListaDetalles> listPromocion = mantProduc.verificaPromocion(idproducto);

                    if (cantidad > 1){
                        obj = new ProductosPromociones(objetoventana, nomproducto, idproducto);
                        obj.pack();
                        obj.setVisible(true);
                        descuento2 = obj.getDescuento();
                        recuperaUnidadesminimo = 1;
                    }else{
                        orden = listPromocion.get(0).getOrden();
                        descuento2 = armarPromocion(listPromocion, idproducto, unidad);
                        recuperaUnidadesminimo = retornaUnidades(listPromocion, unidad);
                    }                      
                    System.out.println("la cantidad es: "+cantidad);
                }
                
                listadetalle[4] = unidad;
                System.out.println("REALIZAR VENTA - La cantidad es: "+objProducto.Verifica_Cantidad_Producto(idproducto));
                if(objProducto.Verifica_Es_Manual(idproducto) == 1 ){

                        int p = JOptionPane.showConfirmDialog(null, "¿VERIFICÓ LOS DATOS DE LA RECETA Y DNI DEL CLIENTE?", "Confirmar",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (p == JOptionPane.YES_OPTION) {
                            if(unidad <= objProducto.Verifica_Cantidad_Producto(idproducto)) {
                                listadetalle[0] = cantidadproductos;
                                listadetalle[1] = idproducto;
                                listadetalle[2] = nomproducto;
                                listadetalle[3] = precios.getProductoBotica().getProducto().getLaboratorio().getId_Lab();
                                listadetalle[4] = unidad;
                                listadetalle[5] = fraccion;
                                listadetalle[6] = pv;

                                listadetalle[9] = "0";
                                listadetalle[10] = estadopromo;
                                listadetalle[11] = "0";

                                double desc = precios.getDescuento_Venta();
                                BigDecimal bd8 = new BigDecimal(desc);
                                bd8 = bd8.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                desc = bd8.doubleValue();

                                descuento = Double.parseDouble(listadetalle[6].toString());
                                PVPx = Double.parseDouble(String.valueOf(precios.getPVPX()));
                                parcial = PVPx * unidad;

                                if (empaque1 > 0) {
                                    parcial1 = (fraccion * PVPx) / empaque1;
                                }

                                parcial = parcial + parcial1;

                                /********************************************
                                CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                                 *********************************************/
                                BigDecimal bd = new BigDecimal(PVPx);
                                bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                PVPx = bd.doubleValue();

                                BigDecimal bd1 = new BigDecimal(parcial);
                                bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                parcial = bd1.doubleValue();

                                Double ss = Double.valueOf(descuento2);
                                descuento = ss;
                                Double montoDscto = (PVPx * (descuento)) / 100 * Double.valueOf(recuperaUnidadesminimo);

                                listadetalle[7] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                                listadetalle[8] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                                if (listadetalle[1].toString() != null) {
                                    tablaproforma.addRow(listadetalle);
                                }

                                double igvaux = precios.getProductoBotica().getProducto().getIGV_Exonerado();
                                CalculaMontos(igvaux, indice);
                                listaProductosVerifica.add(listadetalle);
                                if (ss > 0.00) {

                                    listadetalle = new Object[12];
                                    indice = indice + 1;
                                    String micodigo = mantProduc.Recupera_Promo_Codigo(idproducto).toString().trim();
                                    listadetalle[0] = jTable2.getRowCount() + 1;
                                    if (cantidad > 1) {
                                        listadetalle[1] = obj.getCodPromocion();
                                        listadetalle[2] = obj.getDescripPromocion();
                                    } else {
                                        listadetalle[1] = micodigo;
                                        listadetalle[2] = mantProduc.Recupera_Promo_Nombre(idproducto);
                                    }
                                    listadetalle[4] = recuperaUnidadesminimo;
                                    listadetalle[5] = 0;

                                    if (fraccion > 0) {
                                        montoDsctofraccion = (orden * PVPx) / empaque1;
                                    }

                                    if (orden == 1) {
                                        montoDscto = 0.0;
                                    }

                                    montoDscto = montoDscto + montoDsctofraccion;
                                    BigDecimal bd4 = new BigDecimal(montoDscto * (-1));
                                    bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                                    listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                                    listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                                    listadetalle[8] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                                    listadetalle[9] = "1";
                                    listadetalle[10] = "1";
                                    listadetalle[11] = "0";

                                    if (unidad > 0 && orden == 1) {
                                    } else {
                                        miproducto = new Producto();
                                        miproducto.setEmpaque(mantProduc.Recupera_Empaque(micodigo));
                                        productoBotica = new Productos_Botica();
                                        productoBotica.setProducto(miproducto);
                                        productoBotica.setMostrador_Stock_Empaque(1);
                                        productoBotica.setMostrador_Stock_Fraccion(1);
                                        objetostock = new ProductosPrecios();
                                        objetostock.setProductoBotica(productoBotica);
                                        productostock.add(indice, objetostock);
                                        tablaproforma.addRow(listadetalle);
                                        tablaproforma.setValueAt(1, indice, 4);
                                    }

                                    //ordenproducto = ordenproducto + 1;

                                    CalculaMontos(igvaux, indice);

                                    listaProductosVerifica.add(listadetalle);

                                    for (int i = 0; i < listaProductosVerifica.size(); i++) {
                                        Object[] valor = new Object[1];
                                        valor[0] = listaProductosVerifica.get(i);

                                        Object[] datos = new Object[12];
                                        datos = (Object[]) valor[0];

                                        if (datos[10].toString().trim() == "1" && datos[11].toString().trim() == "0") {

                                            datos[11] = ordenproducto;
                                            listaProductosVerifica.set(i, datos);
                                        }
                                    }
                                    ordenproducto = ordenproducto + 1;

                                }

                                jTable2.requestFocus();
                                jTable2.changeSelection(indice, indice, false, false);

                                if (igvaux < 1) {
                                    lisProdSinIGV.add(idproducto);
                                    col = jTable2.getColumnModel().getColumn(0);
                                    col.setCellRenderer(new ColoredTableCellRenderer());
                                    col = jTable2.getColumnModel().getColumn(1);
                                    col.setCellRenderer(new ColoredTableCellRenderer());
                                } else {
                                    lisProdSinIGV.add(9999);
                                }
                            }else {
                                JOptionPane.showMessageDialog(this, "CANTIDAD PEDIDA ES MAYOR A "+objProducto.Verifica_Cantidad_Producto(idproducto)+" UNIDADES\nNO SE AGREGARA EL DESCUENTO A ESTE PRODUCTO", "Nortfarma", JOptionPane.INFORMATION_MESSAGE);
                                listadetalle[0] = cantidadproductos;
                                listadetalle[1] = idproducto;
                                listadetalle[2] = nomproducto;
                                listadetalle[3] = precios.getProductoBotica().getProducto().getLaboratorio().getId_Lab();
                                listadetalle[4] = unidad;
                                listadetalle[5] = fraccion;
                                listadetalle[6] = pv;

    //                            listadetalle[9] = "0";
    //                            listadetalle[10] = estadopromo;
    //                            listadetalle[11] = "0";

    //                            double desc = precios.getDescuento_Venta();
    //                            BigDecimal bd8 = new BigDecimal(desc);
    //                            bd8 = bd8.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
    //                            desc = bd8.doubleValue();

                                descuento = Double.parseDouble(listadetalle[6].toString());
                                PVPx = Double.parseDouble(String.valueOf(precios.getPVPX()));
                                parcial = PVPx * unidad;

                                if (empaque1 > 0) {
                                    parcial1 = (fraccion * PVPx) / empaque1;
                                }

                                parcial = parcial + parcial1;

                                /********************************************
                                CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                                 *********************************************/
                                BigDecimal bd = new BigDecimal(PVPx);
                                bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                PVPx = bd.doubleValue();

                                BigDecimal bd1 = new BigDecimal(parcial);
                                bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                parcial = bd1.doubleValue();

    //                            Double ss = Double.valueOf(descuento2);
    //                            descuento = ss;
    //                            Double montoDscto = (PVPx * (descuento)) / 100 * Double.valueOf(recuperaUnidadesminimo);

                                listadetalle[7] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                                listadetalle[8] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                                if (listadetalle[1].toString() != null) {
                                    tablaproforma.addRow(listadetalle);
                                }

                                double igvaux = precios.getProductoBotica().getProducto().getIGV_Exonerado();
                                CalculaMontos(igvaux, indice);
                                listaProductosVerifica.add(listadetalle);
    //                            if (ss > 0.00) {

                                    listadetalle = new Object[12];
                                    indice = indice + 1;
                                    String micodigo = mantProduc.Recupera_Promo_Codigo(idproducto).toString().trim();
                                    listadetalle[0] = jTable2.getRowCount() + 1;
                                    if (cantidad > 1) {
                                        listadetalle[1] = obj.getCodPromocion();
                                        listadetalle[2] = obj.getDescripPromocion();
                                    } else {
                                        listadetalle[1] = micodigo;
                                        listadetalle[2] = mantProduc.Recupera_Promo_Nombre(idproducto);
                                    }
                                    listadetalle[4] = recuperaUnidadesminimo;
                                    listadetalle[5] = 0;

    //                                if (fraccion > 0) {
    //                                    montoDsctofraccion = (orden * PVPx) / empaque1;
    //                                }

    //                                if (orden == 1) {
    //                                    montoDscto = 0.0;
    //                                }
    //
    //                                montoDscto = montoDscto + montoDsctofraccion;
    //                                BigDecimal bd4 = new BigDecimal(montoDscto * (-1));
    //                                bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
    //
    //                                listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
    //                                listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
    //                                listadetalle[8] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
    //
    //                                listadetalle[9] = "1";
    //                                listadetalle[10] = "1";
    //                                listadetalle[11] = "0";

                                    if (unidad > 0 && orden == 1) {
                                    } else {
                                        miproducto = new Producto();
                                        miproducto.setEmpaque(mantProduc.Recupera_Empaque(micodigo));
                                        productoBotica = new Productos_Botica();
                                        productoBotica.setProducto(miproducto);
                                        productoBotica.setMostrador_Stock_Empaque(1);
                                        productoBotica.setMostrador_Stock_Fraccion(1);
                                        objetostock = new ProductosPrecios();
                                        objetostock.setProductoBotica(productoBotica);
                                        productostock.add(indice, objetostock);
    //                                    tablaproforma.addRow(listadetalle);
    //                                    tablaproforma.setValueAt(1, indice, 4);
                                    }

                                    //ordenproducto = ordenproducto + 1;

                                    CalculaMontos(igvaux, indice);

                                    listaProductosVerifica.add(listadetalle);

                                    for (int i = 0; i < listaProductosVerifica.size(); i++) {
                                        Object[] valor = new Object[1];
                                        valor[0] = listaProductosVerifica.get(i);

                                        Object[] datos = new Object[12];
                                        datos = (Object[]) valor[0];

                                        if (datos[10].toString().trim() == "1" && datos[11].toString().trim() == "0") {

                                            datos[11] = ordenproducto;
                                            listaProductosVerifica.set(i, datos);
                                        }
                                    }
                                    ordenproducto = ordenproducto + 1;

    //                            }

                                jTable2.requestFocus();
                                jTable2.changeSelection(indice, indice, false, false);

                                if (igvaux < 1) {
                                    lisProdSinIGV.add(idproducto);
                                    col = jTable2.getColumnModel().getColumn(0);
                                    col.setCellRenderer(new ColoredTableCellRenderer());
    //                                col = jTable2.getColumnModel().getColumn(1);
    //                                col.setCellRenderer(new ColoredTableCellRenderer());
                                } else {
                                    lisProdSinIGV.add(9999);
                                }
                            }
                            
                        }
                        if(p == JOptionPane.NO_OPTION){
                            JOptionPane.showMessageDialog(this, "NO SE AGREGARA EL DESCUENTO A ESTE PRODUCTO", "Nortfarma", JOptionPane.INFORMATION_MESSAGE);
                            listadetalle[0] = cantidadproductos;
                            listadetalle[1] = idproducto;
                            listadetalle[2] = nomproducto;
                            listadetalle[3] = precios.getProductoBotica().getProducto().getLaboratorio().getId_Lab();
                            listadetalle[4] = unidad;
                            listadetalle[5] = fraccion;
                            listadetalle[6] = pv;

//                            listadetalle[9] = "0";
//                            listadetalle[10] = estadopromo;
//                            listadetalle[11] = "0";

//                            double desc = precios.getDescuento_Venta();
//                            BigDecimal bd8 = new BigDecimal(desc);
//                            bd8 = bd8.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
//                            desc = bd8.doubleValue();

                            descuento = Double.parseDouble(listadetalle[6].toString());
                            PVPx = Double.parseDouble(String.valueOf(precios.getPVPX()));
                            parcial = PVPx * unidad;

                            if (empaque1 > 0) {
                                parcial1 = (fraccion * PVPx) / empaque1;
                            }

                            parcial = parcial + parcial1;

                            /********************************************
                            CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                             *********************************************/
                            BigDecimal bd = new BigDecimal(PVPx);
                            bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                            PVPx = bd.doubleValue();

                            BigDecimal bd1 = new BigDecimal(parcial);
                            bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                            parcial = bd1.doubleValue();

//                            Double ss = Double.valueOf(descuento2);
//                            descuento = ss;
//                            Double montoDscto = (PVPx * (descuento)) / 100 * Double.valueOf(recuperaUnidadesminimo);

                            listadetalle[7] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                            listadetalle[8] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                            if (listadetalle[1].toString() != null) {
                                tablaproforma.addRow(listadetalle);
                            }

                            double igvaux = precios.getProductoBotica().getProducto().getIGV_Exonerado();
                            CalculaMontos(igvaux, indice);
                            listaProductosVerifica.add(listadetalle);
//                            if (ss > 0.00) {

                                listadetalle = new Object[12];
                                indice = indice + 1;
                                String micodigo = mantProduc.Recupera_Promo_Codigo(idproducto).toString().trim();
                                listadetalle[0] = jTable2.getRowCount() + 1;
                                if (cantidad > 1) {
                                    listadetalle[1] = obj.getCodPromocion();
                                    listadetalle[2] = obj.getDescripPromocion();
                                } else {
                                    listadetalle[1] = micodigo;
                                    listadetalle[2] = mantProduc.Recupera_Promo_Nombre(idproducto);
                                }
                                listadetalle[4] = recuperaUnidadesminimo;
                                listadetalle[5] = 0;

//                                if (fraccion > 0) {
//                                    montoDsctofraccion = (orden * PVPx) / empaque1;
//                                }

//                                if (orden == 1) {
//                                    montoDscto = 0.0;
//                                }
//
//                                montoDscto = montoDscto + montoDsctofraccion;
//                                BigDecimal bd4 = new BigDecimal(montoDscto * (-1));
//                                bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
//
//                                listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
//                                listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
//                                listadetalle[8] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
//
//                                listadetalle[9] = "1";
//                                listadetalle[10] = "1";
//                                listadetalle[11] = "0";

                                if (unidad > 0 && orden == 1) {
                                } else {
                                    miproducto = new Producto();
                                    miproducto.setEmpaque(mantProduc.Recupera_Empaque(micodigo));
                                    productoBotica = new Productos_Botica();
                                    productoBotica.setProducto(miproducto);
                                    productoBotica.setMostrador_Stock_Empaque(1);
                                    productoBotica.setMostrador_Stock_Fraccion(1);
                                    objetostock = new ProductosPrecios();
                                    objetostock.setProductoBotica(productoBotica);
                                    productostock.add(indice, objetostock);
//                                    tablaproforma.addRow(listadetalle);
//                                    tablaproforma.setValueAt(1, indice, 4);
                                }

                                //ordenproducto = ordenproducto + 1;

                                CalculaMontos(igvaux, indice);

                                listaProductosVerifica.add(listadetalle);

                                for (int i = 0; i < listaProductosVerifica.size(); i++) {
                                    Object[] valor = new Object[1];
                                    valor[0] = listaProductosVerifica.get(i);

                                    Object[] datos = new Object[12];
                                    datos = (Object[]) valor[0];

                                    if (datos[10].toString().trim() == "1" && datos[11].toString().trim() == "0") {

                                        datos[11] = ordenproducto;
                                        listaProductosVerifica.set(i, datos);
                                    }
                                }
                                ordenproducto = ordenproducto + 1;

//                            }

                            jTable2.requestFocus();
                            jTable2.changeSelection(indice, indice, false, false);

                            if (igvaux < 1) {
                                lisProdSinIGV.add(idproducto);
                                col = jTable2.getColumnModel().getColumn(0);
                                col.setCellRenderer(new ColoredTableCellRenderer());
//                                col = jTable2.getColumnModel().getColumn(1);
//                                col.setCellRenderer(new ColoredTableCellRenderer());
                            } else {
                                lisProdSinIGV.add(9999);
                            }
                        }
                }else{
                    listadetalle[0] = cantidadproductos;
                    listadetalle[1] = idproducto;
                    listadetalle[2] = nomproducto;
                    listadetalle[3] = precios.getProductoBotica().getProducto().getLaboratorio().getId_Lab();
                    listadetalle[4] = unidad;
                    listadetalle[5] = fraccion;
                    listadetalle[6] = pv;

                    listadetalle[9] = "0";
                    listadetalle[10] = estadopromo;
                    listadetalle[11] = "0";

                    double desc = precios.getDescuento_Venta();
                    BigDecimal bd8 = new BigDecimal(desc);
                    bd8 = bd8.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    desc = bd8.doubleValue();

                    descuento = Double.parseDouble(listadetalle[6].toString());
                    PVPx = Double.parseDouble(String.valueOf(precios.getPVPX()));
                    parcial = PVPx * unidad;

                    if (empaque1 > 0) {
                        parcial1 = (fraccion * PVPx) / empaque1;
                    }

                    parcial = parcial + parcial1;

                    /********************************************
                    CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                     *********************************************/
                    BigDecimal bd = new BigDecimal(PVPx);
                    bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    PVPx = bd.doubleValue();

                    BigDecimal bd1 = new BigDecimal(parcial);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    parcial = bd1.doubleValue();

                    Double ss = Double.valueOf(descuento2);
                    descuento = ss;
                    Double montoDscto = (PVPx * (descuento)) / 100 * Double.valueOf(recuperaUnidadesminimo);

                    listadetalle[7] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[8] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                    if (listadetalle[1].toString() != null) {
                        tablaproforma.addRow(listadetalle);
                    }

                    double igvaux = precios.getProductoBotica().getProducto().getIGV_Exonerado();
                    CalculaMontos(igvaux, indice);
                    listaProductosVerifica.add(listadetalle);
                    if (ss > 0.00) {

                        listadetalle = new Object[12];
                        indice = indice + 1;
                        String micodigo = mantProduc.Recupera_Promo_Codigo(idproducto).toString().trim();
                        listadetalle[0] = jTable2.getRowCount() + 1;
                        if (cantidad > 1) {
                            listadetalle[1] = obj.getCodPromocion();
                            listadetalle[2] = obj.getDescripPromocion();
                        } else {
                            listadetalle[1] = micodigo;
                            listadetalle[2] = mantProduc.Recupera_Promo_Nombre(idproducto);
                        }
                        listadetalle[4] = recuperaUnidadesminimo;
                        listadetalle[5] = 0;

                        if (fraccion > 0) {
                            montoDsctofraccion = (orden * PVPx) / empaque1;
                        }

                        if (orden == 1) {
                            montoDscto = 0.0;
                        }

                        montoDscto = montoDscto + montoDsctofraccion;
                        BigDecimal bd4 = new BigDecimal(montoDscto * (-1));
                        bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                        listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                        listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                        listadetalle[8] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                        listadetalle[9] = "1";
                        listadetalle[10] = "1";
                        listadetalle[11] = "0";

                        if (unidad > 0 && orden == 1) {
                        } else {
                            miproducto = new Producto();
                            miproducto.setEmpaque(mantProduc.Recupera_Empaque(micodigo));
                            productoBotica = new Productos_Botica();
                            productoBotica.setProducto(miproducto);
                            productoBotica.setMostrador_Stock_Empaque(1);
                            productoBotica.setMostrador_Stock_Fraccion(1);
                            objetostock = new ProductosPrecios();
                            objetostock.setProductoBotica(productoBotica);
                            productostock.add(indice, objetostock);
                            tablaproforma.addRow(listadetalle);
                            tablaproforma.setValueAt(1, indice, 4);
                        }

                        //ordenproducto = ordenproducto + 1;

                        CalculaMontos(igvaux, indice);

                        listaProductosVerifica.add(listadetalle);

                        for (int i = 0; i < listaProductosVerifica.size(); i++) {
                            Object[] valor = new Object[1];
                            valor[0] = listaProductosVerifica.get(i);

                            Object[] datos = new Object[12];
                            datos = (Object[]) valor[0];

                            if (datos[10].toString().trim() == "1" && datos[11].toString().trim() == "0") {

                                datos[11] = ordenproducto;
                                listaProductosVerifica.set(i, datos);
                            }
                        }
                        ordenproducto = ordenproducto + 1;

                    }

                    jTable2.requestFocus();
                    jTable2.changeSelection(indice, indice, false, false);

                    if (igvaux < 1) {
                        lisProdSinIGV.add(idproducto);
                        col = jTable2.getColumnModel().getColumn(0);
                        col.setCellRenderer(new ColoredTableCellRenderer());
                        col = jTable2.getColumnModel().getColumn(1);
                        col.setCellRenderer(new ColoredTableCellRenderer());
                    } else {
                        lisProdSinIGV.add(9999);
                    }
                }

            

            } catch (Exception ex) {
                System.out.println("AGREGA PRODUCTO " + ex.getMessage());
            }
        }
    }

    private void AsignaPrecioPromocion(ProductosPrecios precios, int var) {

        double parcial1 = 0;
        double ss = 0;
        double montoDscto = 0;

        int empaque1 = Integer.parseInt(empaque.toString());
        Producto miproducto;
        Productos_Botica productoBotica;

        if (empaque1 == 0 && fraccion > 0) {
            JOptionPane.showMessageDialog(this, " LO SENTIMOS ESTE PRODUCTO \n NO SE PUEDE VENDER EN FRACCION ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                Id_Tipo_Precio = precios.getTipoPrecio().getId_Tipo_Precio();
                String nomproducto = precios.getProductoBotica().getProducto().getDescripcion();
                String idproducto = precios.getProductoBotica().getProducto().getIdProducto();
                double pv = precios.getPrecio_Venta();
                cantidadproductos = jTable2.getRowCount();
                int indice = cantidadproductos;
                cantidadproductos++;

                miproducto = new Producto();
                miproducto.setEmpaque(empaque1);
                productoBotica = new Productos_Botica();
                productoBotica.setProducto(miproducto);
                productoBotica.setMostrador_Stock_Empaque(precios.getProductoBotica().getMostrador_Stock_Empaque());
                productoBotica.setMostrador_Stock_Fraccion(precios.getProductoBotica().getMostrador_Stock_Fraccion());
                objetostock = new ProductosPrecios();
                objetostock.setProductoBotica(productoBotica);

                productostock.add(indice, objetostock);
                Double montoDsctofraccion = 0.00;
                Double descuento2 = 0.00;
                Double descuento3 = 1.00;
                Integer recuperaUnidadesminimo = 0;
                int orden = 0;
                int cantidad = 0;
                ProductosPromociones obj = null;

                //if (BuscarProductos.isEspromo()) {
                if (var == 2) {
                    cantidad = objProducto.Verifica_PromocionPrecio(idproducto);
                    List<ListaDetalles> listPromocion = mantProduc.verificaPromocionPrecio(idproducto);

                    if (cantidad > 1) {
                        descuento2 = armarPromocion(listPromocion, idproducto, unidad);
                        recuperaUnidadesminimo = 1;
                    } else {
                        orden = listPromocion.get(0).getOrden();
                        //descuento2 = armarPromocion(listPromocion, idproducto, unidad);
                        descuento2 = descuento2;
                        recuperaUnidadesminimo = retornaUnidades(listPromocion, unidad);
                    }
                }

                listadetalle[0] = cantidadproductos;
                listadetalle[1] = idproducto;
                listadetalle[2] = nomproducto;
                listadetalle[3] = precios.getProductoBotica().getProducto().getLaboratorio().getId_Lab();
                listadetalle[4] = unidad;
                listadetalle[5] = fraccion;
                listadetalle[6] = pv;


                double desc = precios.getDescuento_Venta();
                BigDecimal bd8 = new BigDecimal(desc);
                bd8 = bd8.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                desc = bd8.doubleValue();

                descuento = Double.parseDouble(listadetalle[6].toString());
                PVPx = Double.parseDouble(String.valueOf(precios.getPVPX()));
                parcial = PVPx * unidad;

                if (empaque1 > 0) {
                    parcial1 = (fraccion * PVPx) / empaque1;
                }

                if (var == 2) {
                    parcial = (parcial + parcial1) * (-1);
                } else {
                    parcial = parcial + parcial1;
                }

                /********************************************
                CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                 *********************************************/
                BigDecimal bd = new BigDecimal(PVPx);
                bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);


                if (var == 2) {

                    PVPx = bd.doubleValue();
                    bdpromo = (bd.doubleValue()) * (-1);
                    BigDecimal bd4 = new BigDecimal(PVPx * (-1));
                    bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    String micodigo = mantProduc.Recupera_Promo_CodigoPrecio().toString().trim();
                    String[] recuperacadena = micodigo.split("@");
                    listadetalle[1] = recuperacadena[0]; //codigo promocion
                    listadetalle[2] = mantProduc.Recupera_Promo_NombrePrecio(recuperacadena[0]);
                    listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();//pv * (-1);
                    listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[8] = bdpromo;

                } else {
                    PVPx = bd.doubleValue();
                    //}

                    BigDecimal bd1 = new BigDecimal(parcial);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    parcial = bd1.doubleValue();

                    ss = Double.valueOf(descuento2);
                    descuento = ss;
                    montoDscto = (PVPx * (descuento)) / 100 * Double.valueOf(recuperaUnidadesminimo);

                    listadetalle[7] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[8] = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                }
                if (listadetalle[1].toString() != null) {
                    tablaproforma.addRow(listadetalle);
                }

                double igvaux = precios.getProductoBotica().getProducto().getIGV_Exonerado();
                CalculaMontos(igvaux, indice);

                if (ss > 0.00) {

                    indice = indice + 1;
                    String micodigo = mantProduc.Recupera_Promo_Codigo(idproducto).toString().trim();
                    listadetalle[0] = jTable2.getRowCount() + 1;
                    if (cantidad > 1) {
                        listadetalle[1] = obj.getCodPromocion();
                        listadetalle[2] = obj.getDescripPromocion();
                    } else {
                        listadetalle[1] = micodigo;
                        listadetalle[2] = mantProduc.Recupera_Promo_Nombre(idproducto);
                    }
                    listadetalle[4] = recuperaUnidadesminimo;
                    listadetalle[5] = 0;

                    if (fraccion > 0) {
                        montoDsctofraccion = (orden * PVPx) / empaque1;
                    }

                    if (orden == 1) {
                        montoDscto = 0.0;
                    }

                    montoDscto = montoDscto + montoDsctofraccion;
                    BigDecimal bd4 = new BigDecimal(montoDscto * (-1));
                    bd4 = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP);

                    listadetalle[6] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[7] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();
                    listadetalle[8] = bd4.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                    if (unidad > 0 && orden == 1) {
                    } else {
                        miproducto = new Producto();
                        miproducto.setEmpaque(mantProduc.Recupera_Empaque(micodigo));
                        productoBotica = new Productos_Botica();
                        productoBotica.setProducto(miproducto);
                        productoBotica.setMostrador_Stock_Empaque(1);
                        productoBotica.setMostrador_Stock_Fraccion(1);
                        objetostock = new ProductosPrecios();
                        objetostock.setProductoBotica(productoBotica);
                        productostock.add(indice, objetostock);
                        tablaproforma.addRow(listadetalle);
                        tablaproforma.setValueAt(1, indice, 4);
                    }

                    CalculaMontos(igvaux, indice);
                }

                jTable2.requestFocus();
                jTable2.changeSelection(indice, indice, false, false);

                if (igvaux < 1) {
                    lisProdSinIGV.add(idproducto);
                    col = jTable2.getColumnModel().getColumn(0);
                    col.setCellRenderer(new ColoredTableCellRenderer());
                    col = jTable2.getColumnModel().getColumn(1);
                    col.setCellRenderer(new ColoredTableCellRenderer());
                } else {
                    lisProdSinIGV.add(9999);
                }

            } catch (Exception ex) {
                System.out.println("AGREGA PRODUCTO" + ex.getMessage());
            }
        }
    }

    private Double armarPromocion(List<ListaDetalles> verificaPromocion, String CodProducto, Integer Cantidad) {

        Integer existePromocion = 0;
        Double Descuento = 0.00;

        if (verificaPromocion.get(0).getIdPromo() > 0) {

            for (Integer g = 0; g < nuevaPromocion.size(); g++) {
                if (nuevaPromocion.get(g) == verificaPromocion.get(0).getIdPromo()) {
                    existePromocion = 1;
                }
            }

            if (existePromocion == 0) {
                //Si no existe la promocion la agrego a mi actual Lista de Promociones
                nuevaPromocion.add(verificaPromocion.get(0).getIdPromo());
                cantidadElementos.add(verificaPromocion.get(0).getTotalPromocionales());
                DetallePromo.add(
                        new ListaDetalles(
                        verificaPromocion.get(0).getIdPromo(),
                        verificaPromocion.get(0).getTotalPromocionales(),
                        verificaPromocion.get(0).getDescuento(),
                        CodProducto,
                        Cantidad,
                        1));

                Descuento = objProducto.Recupera_Dscto(CodProducto, 0);

            } else {
                //En caso exista empiezo a agregarlo a los elementos
                Integer t = 1;
                //Integer t=0;

                for (Integer con = 1; con < DetallePromo.size(); con++) {
                    if (DetallePromo.get(con).getIdPromo() == verificaPromocion.get(0).getIdPromo()) {
                        t++;
                    }
                }

                if (verificaPromocion.get(0).getTotalPromocionales() < 3) {
                    t = t + 1;
                }

                if (t <= verificaPromocion.get(0).getTotalPromocionales()) {
                    DetallePromo.add(
                            new ListaDetalles(
                            verificaPromocion.get(0).getIdPromo(),
                            verificaPromocion.get(0).getTotalPromocionales(),
                            verificaPromocion.get(0).getDescuento(),
                            CodProducto,
                            Cantidad,
                            t));

                    Descuento = objProducto.Recupera_Dscto(CodProducto, t - 1);

                } else {
                    JOptionPane.showMessageDialog(this, "Se completo los cupos de esta promocion, genere otra venta por fv", "Promocion", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return Descuento;

    }

    private Integer retornaUnidades(List<ListaDetalles> verificaPromocion, int unidad) {
        Integer minimo = 0;

        for (Integer con = 0; con < DetallePromo.size(); con++) {
            if (DetallePromo.get(con).getIdPromo() == verificaPromocion.get(0).getIdPromo()) {//Verifico si es la promo q me interesa
                if (DetallePromo.get(con).getCantidadPro() < unidad) {
                    minimo = DetallePromo.get(con).getCantidadPro();
                } else {
                    minimo = unidad;
                }
            }
        }

        return minimo;
    }

    /*******************************************
    METODO QUE CALCULA EL MONTO TOTAL  A PAGAR
     ********************************************/
    private void CalculaMontos(double band_igv, int fila) {
        double auxparcial = 0.0;
        double valortabla = Double.parseDouble(String.valueOf(jTable2.getValueAt(fila, 8)));

        if (band_igv == 0) {
            total += valortabla;
            subtotal += valortabla;
            objsubtotalIgv = new ProductosPrecios(valortabla, band_igv);
            listsubtotales.add(fila, objsubtotalIgv);
        } else {
            if (IGV == 0) {
                CapturaIGV();
            }

            total += valortabla;
            auxparcial = (valortabla / (1 + (IGV / 100)));

            objsubtotalIgv = new ProductosPrecios(auxparcial, band_igv);
            listsubtotales.add(fila, objsubtotalIgv);
            subtotal += auxparcial;

        }

        BigDecimal bd1 = new BigDecimal(subtotal);
        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        subtotal = bd1.doubleValue();

        BigDecimal bd2 = new BigDecimal(total);
        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        total = bd2.doubleValue();

        this.jTextField21.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        this.jTextField8.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        double igvauxiliar = total - subtotal;

        BigDecimal bd3 = new BigDecimal(igvauxiliar);
        bd3 = bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        igvauxiliar = bd3.doubleValue();

        this.jTextField9.setText(bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

        if (listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago() == 1) {
            this.jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
            this.jTextField11.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        }
        if (listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago() == 20) {
            this.jTextField18.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
            this.jTextField11.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        }

    }

    private void BuscaTipoPrecio(ProductosPrecios precios) {

        if (VerificaStock(precios.getProductoBotica().getProducto().getIdProducto())) {
            AsignaPrecio(precios);
            if (jComboBox4.getSelectedIndex() > 0 && veces > 1) {
                EliminaFilaDescuento();
            }
        } else {
            JOptionPane.showMessageDialog(this, "ERROR NO HAY STOCK PARA ESTA VENTA", "Error", JOptionPane.ERROR_MESSAGE);
            BusquedaProducto();
        }
    }

    private void BuscaTipoPrecioPromocion(ProductosPrecios precios, int var) {

        if (VerificaStock(precios.getProductoBotica().getProducto().getIdProducto())) {
            AsignaPrecioPromocion(precios, var);
            if (jComboBox4.getSelectedIndex() > 0 && veces > 1) {
                EliminaFilaDescuento();
            }
        } else {
            JOptionPane.showMessageDialog(this, "ERROR NO HAY STOCK PARA ESTA VENTA", "Error", JOptionPane.ERROR_MESSAGE);
            BusquedaProducto();
        }
    }
    /*
     * METODO QUE CALCULA SI LO INGRESADO ES UNIDAD Y FRACCION
     */

    private boolean VerificaCantidad(String cantidad) {
        String unidad1 = "";
        String fraccion1 = "";
        int k = 0;
        boolean segundo = false;
        char car = 'F';
        int cantdef = 0;

        Character w;
        String valor = "";


        for (int i = 0; i < cantidad.length(); i++) {
            w = cantidad.charAt(i);
            if (w.isDigit(w) || w.isLetter(w)) {
                valor = valor + w;
            } else {
                return false;
            }

        }

        for (int i = 0; i < valor.length(); i++) {
            Character caracter = valor.charAt(i);

            if (caracter.isLetter(caracter)) {
                caracter = caracter.toUpperCase(caracter);
                cantdef++;
                if (caracter != car || cantdef > 1) {
                    return false;
                }

            }
            if (caracter.isDigit(caracter) && segundo == false) {
                unidad1 = unidad1 + caracter;
            } else {
                segundo = true;
                if (k == 1) {
                    if (caracter.isDigit(caracter)) {
                        fraccion1 = fraccion1 + caracter;
                    }
                }
                k = 1;
            }
        }

        if (unidad1.compareTo("") == 0) {
            unidad1 = "0";
        }
        if (fraccion1.compareTo("") == 0) {
            fraccion1 = "0";
        }

        unidad = Integer.valueOf(unidad1);
        fraccion = Integer.valueOf(fraccion1);
        return true;
    }

    private void CompletaTiposPagos() {

        int w = jComboBox1.getItemCount();

        if (w == 0) {
            listatipospagos = objfactura.Recupera_Tipos_Pagos(0);
            for (int i = 0; i < listatipospagos.size(); i++) {
                String descrp = listatipospagos.get(i).getId_TipoPago() + " " + listatipospagos.get(i).getDescripcion();
                jComboBox1.addItem(descrp);
            }
        }
    }

    private void CompletaTiposPago1() {

        int w = jComboBox1.getItemCount();

        if (w == 0) {
            listatipospagos = objfactura.Recupera_Tipos_Pagos(0);
            for (int i = 0; i < listatipospagos.size(); i++) {
                String descrp = listatipospagos.get(i).getId_TipoPago() + " " + listatipospagos.get(i).getDescripcion();
                jComboBox1.addItem(descrp);
            }
        }
    }

    public void MuestraClientes(NuevoCliente obj, int id_cliente) {

        jComboBox8.addItem(obj.getObjcliente().getDireccion());
        jTextField14.setText(obj.getObjcliente().getDNI());
        jTextField3.setText(obj.getObjcliente().getNombre_RazonSocial());
        jTextField4.setText(obj.getObjcliente().getRUC_DNI());
        idcliente = id_cliente;
        jTextField2.setText(String.valueOf(idcliente));
        jTextField3.requestFocus();

    }

    private void ModificaDatosCliente() {
        jTextField3.setRequestFocusEnabled(true);
        jTextField3.requestFocus();
        jTextField3.setRequestFocusEnabled(true);
        jTextField3.requestFocus();
    }

    private void ModificaMontos(Double valanterior, Double auxparcial, String codpro, int fila) {
        double aux = mantProduc.recupera_Igv_Exonerado(codpro);

        total = 0;

        for (int i = 0; i < jTable2.getRowCount(); i++) {
            total += Double.parseDouble(String.valueOf(jTable2.getValueAt(i, 8)));
        }


        if (aux > 0) //SI TIENE IGV
        {
            CapturaIGV();
            double auxparcial1 = (valanterior / (1 + (IGV / 100)));
            subtotal = subtotal - auxparcial1;

            double auxparcial2 = (auxparcial / (1 + (IGV / 100)));
            subtotal = subtotal + auxparcial2;

            objsubtotalIgv = new ProductosPrecios(auxparcial2, aux);
            listsubtotales.set(fila, objsubtotalIgv);
        } else {
            subtotal = subtotal - valanterior;
            subtotal = subtotal + auxparcial;

            objsubtotalIgv = new ProductosPrecios(auxparcial, aux);
            listsubtotales.set(fila, objsubtotalIgv);
        }
        BigDecimal bd1 = new BigDecimal(subtotal);
        bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        subtotal = bd1.doubleValue();

        BigDecimal bd2 = new BigDecimal(total);
        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        total = bd2.doubleValue();

        jTextField21.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        jTextField9.setText(String.valueOf(IGV));
        jTextField8.setText(bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

        if (listatipospagos.get(this.jComboBox1.getSelectedIndex()).getId_TipoPago() == 1) {
            jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
            jTextField11.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        }

    }

    private void ModificaCantidadPedida(int fila) {
        double anterior = 0;
        double parcial1 = 0;

        try {

            Laboratorios laboratorio = new Laboratorios();
            laboratorio.setId_Lab(jTable2.getValueAt(fila, 3).toString().trim());
            Producto miproducto = new Producto();
            miproducto.setLaboratorio(laboratorio);
            String codpro = jTable2.getValueAt(fila, 1).toString().trim();
            miproducto.setIdProducto(codpro);
            miproducto.setDescripcion(jTable2.getValueAt(fila, 2).toString().trim());
            Productos_Botica productoBotica = new Productos_Botica();
            productoBotica.setProducto(miproducto);
            ProductosPrecios precios = new ProductosPrecios();
            precios.setPVPX(Double.parseDouble(jTable2.getValueAt(fila, 7).toString().trim()));
            precios.setProductoBotica(productoBotica);
            new ProductoPedido(precios).setVisible(true);
            if (ProductoPedido.ingresadet) {
                String cantidad = ProductoPedido.getCantidad();
                if (cantidad != null) {
                    boolean resul = VerificaCantidad(cantidad);

                    if (resul) {
                        if (unidad == 0 && fraccion == 0) {
                            JOptionPane.showMessageDialog(this, " PORFAVOR DEBE DE INGRESAR ALGUNA CANTIDAD ", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            if (VerificaStock(String.valueOf(jTable2.getValueAt(this.jTable2.getSelectedRow(), 1)))) {

                                if (productostock.get(fila).getProductoBotica().getProducto().getEmpaque() == 0 && fraccion > 0) {
                                    JOptionPane.showMessageDialog(this, " LO SENTIMOS ESTE PRODUCTO \n NO SE PUEDE VENDER EN FRACCION ", "Error", JOptionPane.ERROR_MESSAGE);
                                } else {

                                    jTable2.setValueAt(unidad, fila, 4);
                                    jTable2.setValueAt(fraccion, fila, 5);

                                    anterior = Double.parseDouble(String.valueOf(jTable2.getValueAt(fila, 8)));
                                    PVP = Double.parseDouble(String.valueOf(jTable2.getValueAt(fila, 6)));
                                    unidad = Integer.valueOf(String.valueOf(this.jTable2.getValueAt(fila, 4)));
                                    fraccion = Integer.valueOf(String.valueOf(this.jTable2.getValueAt(fila, 5)));
                                    PVPx = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(fila, 7)));

                                    parcial = PVPx * unidad;

                                    int empaque1 = productostock.get(fila).getProductoBotica().getProducto().getEmpaque();

                                    if (empaque1 > 0) {
                                        parcial1 = (fraccion * PVPx) / empaque1;
                                    }

                                    parcial = parcial + parcial1;


                                    /********************************************
                                    CONVERTIR DOUBLE A DOS POSICIONES DECIMALES
                                     *********************************************/
                                    BigDecimal bd = new BigDecimal(PVPx);
                                    bd = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                    PVPx = bd.doubleValue();

                                    BigDecimal bd1 = new BigDecimal(parcial);
                                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                                    parcial = bd1.doubleValue();

                                    jTable2.setValueAt(bd.setScale(podecimal).toPlainString(), fila, 7);
                                    jTable2.setValueAt(bd1.setScale(podecimal).toPlainString(), fila, 8);

                                    Double val = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(fila, 8)));
                                    ModificaMontos(anterior, val, String.valueOf(this.jTable2.getValueAt(fila, 1)), fila);

                                }

                            } else {
                                JOptionPane.showMessageDialog(this, " NO HAYSTOCK PARA LA CANTIDAD INGRESADA ", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }

                    } //cierre de resul boolean
                    else {
                        JOptionPane.showMessageDialog(this, " PORFAVOR DEBE DE INGRESAR DATOS CORRECTOS ", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (Exception ex) {
            System.out.println("ERROR EN EL METODO CAPA VISTA METODO MODIFICACANTIDAD" + ex.toString());
        }

    }

    private boolean Verifica_Productos_Afectos() {
        boolean resul = true;
        int id = jComboBox4.getSelectedIndex() - 1;
        String idpro = ListDescuentos.get(id).getIdproductodesc();
        double aux = mantProduc.recupera_Igv_Exonerado(idpro);
        String idprodu;

        for (int i = 0; i < this.jTable2.getRowCount(); i++) {
            idprodu = jTable2.getValueAt(i, 1).toString().trim();
            double auxigv = mantProduc.recupera_Igv_Exonerado(idprodu);

            if (aux != auxigv) {
                resul = false;
            }
        }
        return resul;
    }

    private void EliminaFilaDescuento() {
        boolean existe = false;
        int fila = 0;
        int id = jComboBox4.getSelectedIndex();
        total = 0;
        subtotal = 0;
        int filaactual = jTable2.getRowCount();

        for (int i = 0; i < this.jTable2.getRowCount(); i++) {
            if (this.jTable2.getValueAt(i, 1).toString().charAt(0) != 'S') {
                total += Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 8)));
                String idproduc = "";

                for (int k = i; k < lisProdSinIGV.size(); k++) {
                    idproduc = lisProdSinIGV.get(k).toString();

                    if (idproduc.compareTo("9999") == 0) {
                        double parc = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 8)));
                        break;
                    } else {
                        break;
                    }
                }
            }
        }

        //VERIFICO SI ESXISTE UN DESCEUNTO DEL CLIENTE ESPECIAL
        for (int i = 0; i < jTable2.getRowCount(); i++) {
            for (int j = 0; j < ListDescuentos.size(); j++) {
                String idpro = ListDescuentos.get(j).getIdproductodesc();
                if (jTable2.getValueAt(i, 1).toString().trim().compareTo(idpro) == 0) {
                    existe = true;
                    codprodespec = ListDescuentos.get(j).getIdproductodesc();
                    fila = i;
                    i = jTable2.getRowCount();
                    break;
                }
            }
        }

        //SI ES QUE ES UNA FACTURA

        if (id > 0 && lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {

            double porcentaje = ListDescuentos.get(id - 1).get_pocen_descuento();
            double tot1 = ((total * porcentaje) / 100) * -1;
            BigDecimal bd = new BigDecimal(tot1);

            //SI NO EXISTE EL DESCUENTO LO AGREGO
            if (!existe) {

                objsubtotalIgv = new ProductosPrecios(0, 0);
                listsubtotales.add(filaactual, objsubtotalIgv);
                Producto miproducto;
                Productos_Botica productoBotica;

                miproducto = new Producto();
                miproducto.setEmpaque(0);
                productoBotica = new Productos_Botica();
                productoBotica.setProducto(miproducto);
                productoBotica.setMostrador_Stock_Empaque(0);
                productoBotica.setMostrador_Stock_Fraccion(0);
                objetostock = new ProductosPrecios();
                objetostock.setProductoBotica(productoBotica);
                productostock.add(filaactual, objetostock);
                cantidadproductos++;

                jTextField7.setText(bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                total = total + tot1;

                listadetalle[0] = jTable2.getRowCount() + 1;
                listadetalle[1] = ListDescuentos.get(id - 1).getIdproductodesc();
                listadetalle[2] = ListDescuentos.get(id - 1).getPorcen_descuento();
                listadetalle[3] = ListDescuentos.get(id - 1).getId_Laboratorio();
                listadetalle[4] = "1";
                listadetalle[5] = "0";
                listadetalle[6] = ListDescuentos.get(id - 1).getPrecio_venta();
                listadetalle[7] = ListDescuentos.get(id - 1).getDescuento_venta();
                listadetalle[8] = bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString();

                tablaproforma.addRow(listadetalle);

            } else {
                total = total + tot1;
                jTextField7.setText(bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                tablaproforma.setValueAt(ListDescuentos.get(id - 1).getIdproductodesc(), fila, 1);
                tablaproforma.setValueAt(ListDescuentos.get(id - 1).getPorcen_descuento(), fila, 2);
                tablaproforma.setValueAt(bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString(), fila, 8);

            }

        } else {

            if (existe)//LE QUITO EL DESCUENTO
            {
                jTextField8.setText("");
                tablaproforma.removeRow(fila);
                listsubtotales.remove(fila);
                productostock.remove(fila);
                jTextField7.setText("");
                cantidadproductos--;
            }
        }

        BigDecimal bd = new BigDecimal(total);
        subtotal = total / (1 + (IGV / 100));

        BigDecimal bd2 = new BigDecimal(subtotal);
        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
        subtotal = bd2.doubleValue();

        BigDecimal bd3 = new BigDecimal(total - subtotal);
        jTextField21.setText(bd.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        jTextField8.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
        jTextField9.setText(bd3.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

    }

    private void VerificaCreditoEspecial(int idcliente) {

        if (lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {

            ListDescuentos.removeAll(ListDescuentos);
            ListDescuentos = objClientes.Verifica_Descuento_Cliente(idcliente);

            if (ListDescuentos.size() > 0) {
                jComboBox4.addItem(" Seleccionar Descuento ");
                for (int i = 0; i < ListDescuentos.size(); i++) {
                    jComboBox4.addItem(ListDescuentos.get(i).getPorcen_descuento());
                }
            }
        }
    }

    public void GuardaVenta(String serie, String numero) {

        Venta objetoventa = null;
        ResultadoVenta objresultado = null;
        double subtotoal1 = 0.0;
        double total1 = 0.0;
        idcliente = Integer.parseInt(this.jTextField2.getText().trim());
        boolean ok = true;

        //BOTICAS CON TICKET REVISO SI HAY DUPLICIDAD DE SERIE Y NUMERO
        if (OpcionesMenu.getConfigBotica() == 1) {
            Venta objven = new Venta();
            objven.setId_Botica(idbotica);
            objven.setId_Caja(idcaja);
            objven.setId_Tipo_Venta(tipventa);
            objven.setSerie(serie);
            objven.setNumero(numero);
            ok = objguardaventa.Existe_Serie_Numero(objven);
        }

        if (ok) {
            //AHORA SE DEBERAN DE MANDAR DATOS PARA EL DETALLE DE LA VENTA

            double tot, pventa, desc;
            int unid, frac;
            listaventa.removeAll(listaventa);
            listVentaSinIGV.removeAll(listVentaSinIGV);

            String orden;
            for (int i = 0; i < this.jTable2.getRowCount(); i++) {
                Object[] valor = new Object[1];
                valor[0] = listaProductosVerifica.get(i);

                Object[] datos = new Object[12];
                datos = (Object[]) valor[0];

                orden = datos[11].toString();

                String idproducto = String.valueOf(this.jTable2.getValueAt(i, 1));
                tot = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 8)));
                unid = Integer.parseInt(String.valueOf(this.jTable2.getValueAt(i, 4)));
                frac = Integer.parseInt(String.valueOf(this.jTable2.getValueAt(i, 5)));
                pventa = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 6)));
                Venta enti = objProducto.Recupera_Descuento_Producto(idproducto, jTextField1.getText().trim(), Id_Tipo_Precio);
                desc = enti.getDescuento();
                parcial = Double.parseDouble(String.valueOf(this.jTable2.getValueAt(i, 8)));
                double auxigv = enti.getIGV();
                String descrip = String.valueOf(this.jTable2.getValueAt(i, 2));
                // orden = String.valueOf(this.jTable2.getValueAt(i, 9));

                if (auxigv == 0.0) {
                    listVentaSinIGV.add(new Venta(idbotica, Id_Tipo_Precio, tot, tot, idproducto, unid, frac, pventa, desc, descrip, orden));
                } else {
                    double sutot = tot / ((1 + (auxigv / 100)));
                    listaventa.add(new Venta(idbotica, Id_Tipo_Precio, tot, sutot, idproducto, unid, frac, pventa, desc, descrip, orden));
                }
            }

            objetoventa = new Venta(idproforma, idbotica, idcliente, idtipopago, tipventa, idmedico, colegiatura, idcaja, fecha, total1, subtotoal1, IGV, serie, numero, fecha, Id_Personal_Botica_Venta, id_personal, dniresponsable, jTextField4.getText().trim(), jTextField3.getText().trim().toUpperCase(), jTextField14.getText().trim(), jComboBox8.getSelectedItem().toString().trim().toUpperCase(), ventaDelivery);
            Proforma EntidadProforma = null;

            if (jComboBox4.getSelectedIndex() > 0) {
                int id = this.jComboBox4.getSelectedIndex();
                double mitotal = 0, misubtotal;
                String idpro = null;
                boolean existe = false;

                //VERIFICO SI ESXISTE UN DESCEUNTO DEL CLIENTE ESPECIAL
                for (int i = 0; i < jTable2.getRowCount(); i++) {
                    for (int j = 0; j < ListDescuentos.size(); j++) {
                        idpro = ListDescuentos.get(j).getIdproductodesc();
                        if (jTable2.getValueAt(i, 1).toString().trim().compareTo(idpro) == 0) {
                            existe = true;
                            codprodespec = ListDescuentos.get(j).getIdproductodesc();
                            mitotal = Double.parseDouble(jTable2.getValueAt(i, 8).toString().trim());
                            i = jTable2.getRowCount();
                            break;
                        }
                    }
                }

                if (existe) {
                    double auxigv = this.objProducto.VerificaIGVProducto(idpro);
                    mitotal = mitotal * -1;

                    if (auxigv == 0.0) {
                        misubtotal = mitotal;
                    } else {
                        misubtotal = mitotal / ((1 + (auxigv / 100)));
                    }

                    BigDecimal bd2 = new BigDecimal(misubtotal);
                    bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    misubtotal = bd2.doubleValue();

                    EntidadProforma = new Proforma(idbotica, Id_Tipo_Precio, misubtotal, mitotal - misubtotal, mitotal, Id_Personal_Botica_Venta, ListDescuentos.get(id - 1).getPrecio_venta(), ListDescuentos.get(id - 1).getDescuento_venta(), mitotal, mitotal, ListDescuentos.get(id - 1).getDescuento_adicional(), idpro);

                }
            }

            if (esCredito(idtipopago) && idcliente == def.getId_Cliente()) {
                JOptionPane.showMessageDialog(this, "PORFAVOR PARA UN CREDITO AL PERSONAL \n ES NECESARIO QUE SELECCIONE UN CLIENTE CORRECTO ", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                try {

                    String polizainical = this.jTextField5.getText();
                    String polizafinal = this.jTextField41.getText();
                    if (polizainical.equals("")) {
                        polizainical = "0";
                    } else {
                        polizainical = polizainical;
                    }

                    if (polizafinal.equals("")) {
                        polizafinal = "0";
                    } else {
                        polizafinal = polizafinal;
                    }

                    if (Integer.parseInt(polizainical) > Integer.parseInt(polizafinal)) {

                        JOptionPane.showMessageDialog(this, " YA NO CUENTA CON POLIZAS ASIGNADAS A SU BOTICA   ", "Error", JOptionPane.ERROR_MESSAGE);

                    } else {

                        //JOptionPane.showMessageDialog(this, listaventa.size(), "Error", JOptionPane.ERROR_MESSAGE);
                        String tipoDocValidar = "";
                        tipoDocValidar = String.valueOf(this.jComboBox3.getSelectedItem());
                        //String cantJTable = String.valueOf(jTable2.getRowCount());
                        int cantJTable1 = jTable2.getRowCount();
                        cantidad = objProducto.RetornaCantidadCompara(tipoDocValidar);

                        String[] lista;
                        String cadena = cantidad;
                        lista = cadena.split("/");

                        int canti = Integer.parseInt(lista[0]);      // recupera el numero de items por tipo de doc
                        String recTipDoc = String.valueOf(lista[1]); // recupera el id de tipo de doc

                        //if (listaventa != null){
                        //if (listaventa.size() > 0) {
                        int cantidaddoc = 0;
                        cantidaddoc =Integer.parseInt(lista[0]);
                        

                        int posicion = 1;
                        double suma = 0;

                        List<Venta> listaverifica = new ArrayList<Venta>();
                        Collections.sort(listaventa, new VentaComparatorByOrdenTotal());
                       
                       
                        List<Object> MyArray = new ArrayList<Object>();
                        if (listaventa.size() > 0) {
                            MyArray.add(listaventa);
                        }
                        if (listVentaSinIGV.size() > 0) {
                            MyArray.add(listVentaSinIGV);
                        }
                        int inthayerror = 0;
                        double intsuma = 0;
                        for (int pos = 0; pos < MyArray.size(); pos++) {

                            if(inthayerror == 1) {
                                break;
                            }

                            Object[] valor = new Object[1];
                            valor[0] = MyArray.get(pos);

                            listaverifica = (List<Venta>) valor[0];


                            String straux = "-1";
                            inthayerror = 0;
                            intsuma = 0;
                            int intposini = 0;

                            for (int i = 0; i < listaverifica.size(); i++) {
                                if (Integer.parseInt(straux) != Integer.parseInt(listaverifica.get(i).getOrden().toString())) {
                                    if (i != 0) {
                                        if (intsuma <= 0) {
                                            inthayerror = 1;
                                            break;
                                        }
                                    }
                                    straux = listaverifica.get(i).getOrden();
                                    intsuma = 0;
                                    intposini = 0;
                                }

                                if (Integer.parseInt(straux) == Integer.parseInt(listaverifica.get(i).getOrden().toString()) && intposini < cantidaddoc) {
                                    intsuma = intsuma + listaverifica.get(i).getTotal();
                                } else {

                                    if (intsuma <= 0) {
                                        inthayerror = 1;
                                        break;
                                    }

                                    intsuma = listaverifica.get(i).getTotal();
                                    intposini = 0;
                                }
                                straux = listaverifica.get(i).getOrden();
                                intposini = intposini + 1;
                            }
                        }
                        if (intsuma <= 0) {
                            inthayerror = 1;
                        }
//                    for (int i=0; i < listaverifica.size(); i++){
//                        if (posicion <= cantidaddoc){
//                            suma = suma + listaverifica.get(i).getTotal();
//                        }else{
//                            posicion = 1;
//                            if (suma < 1){
//                              JOptionPane.showMessageDialog(this,"EL MONTO DEL SIGUIENTE DOCUMENTO NO PUEDE SER NEGATIVO,\n POR FAVOR VERIFICAR LOS PRODUCTOS", "Error", JOptionPane.ERROR_MESSAGE);
//                            }
//                            suma = listaverifica.get(i).getTotal();
//                        }
//                        posicion = posicion +1;
//
//                    }
//                            if (suma < 1){
//                              JOptionPane.showMessageDialog(this,"EL MONTO DEL SIGUIENTE DOCUMENTO NO PUEDE SER NEGATIVO,\n POR FAVOR VERIFICAR LOS PRODUCTOS", "Error", JOptionPane.ERROR_MESSAGE);
//                            objresultado = null;
//                            }else

                        if (inthayerror == 1) {
                            JOptionPane.showMessageDialog(this, "EL MONTO DEL SIGUIENTE DOCUMENTO NO PUEDE SER NEGATIVO,\n POR FAVOR VERIFICAR LOS PRODUCTOS", "Error", JOptionPane.ERROR_MESSAGE);
                            objresultado = null;
                        } else {
                            ordenproducto = 1;
                            listaProductosVerifica.clear();
                            String VarPoliza = this.jTextField5.getText().trim().toString();
                            objresultado = objguardaventa.GuardarVenta(objetoventa, listVentaSinIGV, listaventa, lista_pagos, EntidadProforma, VarPoliza);
                        }

                        //  }
                        //}



                        if (objresultado.getIderror() == 1) {
                            JOptionPane.showMessageDialog(this, " LO SENTIMOS NO CUENTA CON STOCK SUFICIENTE DEL  PRODUCTO :  \n " + objresultado.getIdproducto() + " ", "Error", JOptionPane.ERROR_MESSAGE);
                            listVentaSinIGV.removeAll(listVentaSinIGV);
                            listaventa.removeAll(listaventa);
                        } else if (objresultado.getIderror() == 3) {
                            JOptionPane.showMessageDialog(this, "LA SERIE DE ESTE DOCUMENTO HA EXPIRADO \n PORRFAVOR DEBE DE REALIZAR APERTURA DE ESTE DOCUMENTO", "Error", JOptionPane.ERROR_MESSAGE);
                            listVentaSinIGV.removeAll(listVentaSinIGV);
                            listaventa.removeAll(listaventa);
                        } else {
                            if (objresultado.getIderror() == 2) {
                                JOptionPane.showMessageDialog(this, " LO SENTIMOS HUBO UN ERROR AL GENERAR LA VENTA ", "Error", JOptionPane.ERROR_MESSAGE);
                                listVentaSinIGV.removeAll(listVentaSinIGV);
                                listaventa.removeAll(listaventa);
                            }
                            if (objresultado == null) {
                                JOptionPane.showMessageDialog(this, " LO SENTIMOS HUBO UN ERROR AL GENERAR LA VENTA ", "Error", JOptionPane.ERROR_MESSAGE);
                                listVentaSinIGV.removeAll(listVentaSinIGV);
                                listaventa.removeAll(listaventa);
                            }
                            if (objresultado.getIderror() == 4) {
                                JOptionPane.showMessageDialog(this, " ERROR AL GUARDAR SU VENTA \n MOTNO DE VENTA NEGATIVO ", "Error", JOptionPane.ERROR_MESSAGE);
                                String correo = objlistabotica.ReornaCorreo(idbotica);
                                objmail.sendMail(correo, "ERROR DE VENTA", "PROBLEMA ENCONTRADO CON MONTO DE VENTA NEGATIVO \n  SE HIZO UN ROLLBACK PARA EL NUMERO DE PROFORMA : " + objresultado.getIdProforma() + "   \n BOTICA FELICIDAD  " + idbotica);
                            } else {
                                if (objresultado.getIderror() == 0) {
                                    limpiardatos();
                                    JOptionPane.showMessageDialog(this, " Venta Realizada Correctamente \n Caja : Caja " + idcaja + "  \n Cajero: " + objventa.getUsuario() + " ", " Venta Realizada   NORTFARMA S.A.C", JOptionPane.INFORMATION_MESSAGE);
                                    jTextField1.setText("");
                                    Recupera_Serie_Numero();
                                    RecuperaInterno();
                                    if (objresultado.isEsaporte()) {
                                        Proforma_Coasociado objpro = new Proforma_Coasociado(this.objetoventana, true, objresultado.getIdProforma(), this);
                                        objpro.pack();
                                        objpro.setVisible(true);
                                    }
                                }
                            }
                        }
                    } // FIN POLIZA
                } catch (Exception ex) {
                    System.out.println("ERROR AL REALIZAR SU VENTA" + ex.getMessage());
                    listaventa.removeAll(listaventa);
                    listVentaSinIGV.removeAll(listVentaSinIGV);
                }

            }
        }//FIN DE IF OK
        else {
            JOptionPane.showMessageDialog(this, " DOCUMENTO : " + serie + " - " + numero + "  DUPLICADO \n  PORFAVOR COMUNIQUESE CON INFORMATICA ", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void RecuperaInterno() {
        try {
            jTextField37.setText(objguardaventa.Recupera_Interno(idbotica));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void NuevaVenta() {
        int pe = JOptionPane.showConfirmDialog(null, " Deseas Realizar una Nueva Venta ?", "Confirmar",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (pe == JOptionPane.YES_OPTION) {
            limpiardatos();
            this.jTextField1.setText("");
        }
    }

    private void limpiardatos() {

        serie = "";
        numero = "";
        poscant = 0;
        IGV = 0.0;
        total = 0;
        idproforma = null;
        canttiposPagos = 1;
        cantpagos = 1;
        tipventa = 0;
        idmedico = "";
        subtotal = 0.0;
        cantidadproductos = 0;
        productostock.removeAll(productostock);
        jComboBox3.setSelectedIndex(0);
        listproforma.removeAll(listproforma);
        listproformaDetalle.removeAll(listproformaDetalle);
        listproformaDetalle.removeAll(listproformaDetalle);
        listsubtotales.removeAll(listsubtotales);
        listtipoprecio.removeAll(listtipoprecio);
        listaventa.removeAll(listaventa);
        listVentaSinIGV.removeAll(listVentaSinIGV);
        jLabel11.setText("");
        jTextField2.setText("");
        jTextField14.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jComboBox8.removeAllItems();
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField9.setText("");
        jTextField10.setText("");
        jTextField11.setText("");
        jTextField19.setText("");
        jTextField18.setText("");
        jTextField21.setText("");
        jTextField17.setText("");
        jTextField12.setText("");
        jTextField13.setText("");
        jButton1.setEnabled(false);
        jTextField1.requestFocus();
        jCheckBox4.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox2.setSelected(false);
        LimpiatTabla();
        jTextField1.requestFocus();
        lista_pagos.removeAll(lista_pagos);
        jComboBox1.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        HabilitaBotones(false);
        Habilita_Abono(false);
        jCheckBox1.setEnabled(true);
        jCheckBox1.setSelected(true);
        jTextField17.setEnabled(true);
        DetallePromo.removeAll(DetallePromo);
        nuevaPromocion.removeAll(nuevaPromocion);
        cantidadElementos.removeAll(cantidadElementos);
        Id_Tipo_Precio = "01";
        jLabel36.setText("");
        jLabel37.setText("");
        jTextField5.setVisible(false);
        jTextField5.setText("");
        jTextField41.setText("");
        jComboBox1.setEnabled(true);
    }

    private class MuestraVentana extends JFrame {

        private String idbotica;
        private int idcaja, tipoventa;
        GuardaVenta objpadre;
        private String monto;
        RealizaVenta obj;
        String serie;
        String numero;
        boolean banedra;
        private String documento;
        private int ventaDelivery;

        public MuestraVentana() {
        }

        public MuestraVentana(String idboti, int idca, int idven, String monto, String doc) {
            this.idbotica = idboti;
            this.idcaja = idca;
            this.tipoventa = idven;
            this.monto = monto;
            this.documento = doc;
        }

        public String getNumero() {
            return numero;
        }

        public void setNumero(String numero) {
            this.numero = numero;
        }

        public String getSerie() {
            return serie;
        }

        public void setSerie(String serie) {
            this.serie = serie;
        }

        public boolean isBanedra() {
            return banedra;
        }

        public void setBanedra(boolean banedra) {
            this.banedra = banedra;
        }

        public int getVentaDelivery() {
            return ventaDelivery;
        }

        public void setVentaDelivery(int ventaDelivery) {
            this.ventaDelivery = ventaDelivery;
        }

        public void AbrirVentana() {
            objpadre = new GuardaVenta(this, idbotica, idcaja, tipoventa, documento, monto, obj);
            objpadre.pack();
            objpadre.setVisible(true);
            setNumero(objpadre.getMnumero());
            setSerie(objpadre.getSerie());
            setBanedra(objpadre.isBandera());
            setVentaDelivery(objpadre.getVentaDelivery());
        }
    }

    @Action
    public void ModificarProducto() {
        jTable2.requestFocus();
    }

    @Action
    public void ModificaCliente() {
        ModificaDatosCliente();
    }

    class ColoredTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {
            setEnabled(table == null || table.isEnabled()); // see question above

            setBackground(Color.white);
            int tam = lisProdSinIGV.size();

            for (int i = 0; i < tam; i++) {
                Object codpro = table.getValueAt(row, column);
                if (lisProdSinIGV.get(i) == codpro) {
                    setBackground(Color.PINK);
                }

            }

            super.getTableCellRendererComponent(table, value, false, false, 2, column);

            return this;
        }
    }

    private void InformacionProducto() {
        int seleccionada = -1;
        seleccionada = jTable2.getSelectedRow();
        if (seleccionada >= 0) {
            String idproducto = String.valueOf(this.jTable2.getValueAt(seleccionada, 1));
            Productos_Botica obj = objProducto.InformacionProducto(this.idbotica, idproducto);

            if (obj != null) {
                this.jTextField15.setText(idproducto);
                this.jTextField16.setText(String.valueOf(this.jTable2.getValueAt(jTable2.getSelectedRow(), 2)));
                this.jTextField32.setText(String.valueOf(this.jTable2.getValueAt(jTable2.getSelectedRow(), 7)));
                this.jTextField20.setText(obj.getProducto().getLaboratorio().getDescripcion());
                this.jTextField22.setText(obj.getProducto().getIdFamilia().getDescripcion());
                this.jTextField23.setText(obj.getProducto().getIdGenerico().getDescripcionGenerico());
                this.jTextField24.setText(String.valueOf(obj.getProducto().getEmpaque()));
                this.jTextField25.setText(String.valueOf(obj.getAlmacen_Stock_Empaque()));
                this.jTextField26.setText(String.valueOf(obj.getAlmacen_Stock_Fraccion()));
                this.jTextField27.setText(String.valueOf(obj.getMostrador_Stock_Empaque()));
                this.jTextField28.setText(String.valueOf(obj.getMostrador_Stock_Fraccion()));
                this.jTextField34.setText(String.valueOf(obj.getNumero_Lote()));
                this.jTextField33.setText(String.valueOf(obj.getFecha_Vencimiento_Lote()));

            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jTextField29 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jTextField34 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jTextField33 = new javax.swing.JTextField();
        jTextField32 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextField26 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextField27 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField28 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField20 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jTextField21 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jComboBox8 = new javax.swing.JComboBox();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jTextField37 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jTextField30 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField35 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        jTextField36 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField17 = new javax.swing.JTextField();
        jCheckBox4 = new javax.swing.JCheckBox();
        jTextField19 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextField10 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jTextField18 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField11 = new javax.swing.JTextField();
        jComboBox5 = new javax.swing.JComboBox();
        jTextField6 = new javax.swing.JTextField();
        jCheckBox5 = new javax.swing.JCheckBox();
        jTextField39 = new javax.swing.JTextField();
        jComboBox7 = new javax.swing.JComboBox();
        jTextField38 = new javax.swing.JTextField();
        jTextField40 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sistemanortfarma.SistemaNortfarmaApp.class).getContext().getResourceMap(RealizaVenta.class);
        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenu1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu1KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenu1);

        jPopupMenu2.setName("jPopupMenu2"); // NOI18N

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem2);

        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem3);

        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFont(resourceMap.getFont("Form.font")); // NOI18N
        setMinimumSize(new java.awt.Dimension(280, 39));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(930, 630));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jTabbedPane1.setFont(resourceMap.getFont("jTabbedPane1.font")); // NOI18N
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1001, 82));

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setOpaque(false);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setBackground(resourceMap.getColor("jTable2.background")); // NOI18N
        jTable2.setFont(resourceMap.getFont("jTable2.font")); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº", "Codigo", "Producto", "Laboratorio", "  Unidad", "  Fraccion", "    PVP", "    PVPx", "    Parcial", "orden"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable2.setName("jTable2"); // NOI18N
        jTable2.setSelectionBackground(resourceMap.getColor("jTable2.selectionBackground")); // NOI18N
        jTable2.setSelectionForeground(resourceMap.getColor("jTable2.selectionForeground")); // NOI18N
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.getColumnModel().getColumn(0).setResizable(false);
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(5);
        jTable2.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable2.columnModel.title0")); // NOI18N
        jTable2.getColumnModel().getColumn(1).setResizable(false);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(27);
        jTable2.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable2.columnModel.title1")); // NOI18N
        jTable2.getColumnModel().getColumn(2).setResizable(false);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(445);
        jTable2.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable2.columnModel.title2")); // NOI18N
        jTable2.getColumnModel().getColumn(3).setResizable(false);
        jTable2.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTable2.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable2.columnModel.title6")); // NOI18N
        jTable2.getColumnModel().getColumn(4).setResizable(false);
        jTable2.getColumnModel().getColumn(4).setPreferredWidth(35);
        jTable2.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable2.columnModel.title3")); // NOI18N
        jTable2.getColumnModel().getColumn(5).setResizable(false);
        jTable2.getColumnModel().getColumn(5).setPreferredWidth(35);
        jTable2.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTable2.columnModel.title4")); // NOI18N
        jTable2.getColumnModel().getColumn(6).setResizable(false);
        jTable2.getColumnModel().getColumn(6).setPreferredWidth(50);
        jTable2.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("jTable2.columnModel.title5")); // NOI18N
        jTable2.getColumnModel().getColumn(7).setResizable(false);
        jTable2.getColumnModel().getColumn(7).setPreferredWidth(50);
        jTable2.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("jTable2.columnModel.title7")); // NOI18N
        jTable2.getColumnModel().getColumn(8).setResizable(false);
        jTable2.getColumnModel().getColumn(8).setPreferredWidth(50);
        jTable2.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("jTable2.columnModel.title8")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 978, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setOpaque(false);
        jPanel4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel4KeyPressed(evt);
            }
        });

        jTextField29.setText(resourceMap.getString("jTextField29.text")); // NOI18N
        jTextField29.setName("jTextField29"); // NOI18N
        jTextField29.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField29KeyPressed(evt);
            }
        });

        jPanel3.setFont(resourceMap.getFont("jPanel3.font")); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setOpaque(false);

        jLabel26.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel26.setText(resourceMap.getString("jLabel26.text")); // NOI18N
        jLabel26.setFocusable(false);
        jLabel26.setName("jLabel26"); // NOI18N

        jTextField34.setBackground(resourceMap.getColor("jTextField33.background")); // NOI18N
        jTextField34.setEditable(false);
        jTextField34.setFont(resourceMap.getFont("jTextField33.font")); // NOI18N
        jTextField34.setFocusable(false);
        jTextField34.setName("jTextField34"); // NOI18N

        jLabel32.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel32.setText(resourceMap.getString("jLabel32.text")); // NOI18N
        jLabel32.setFocusable(false);
        jLabel32.setName("jLabel32"); // NOI18N

        jTextField33.setBackground(resourceMap.getColor("jTextField33.background")); // NOI18N
        jTextField33.setEditable(false);
        jTextField33.setFont(resourceMap.getFont("jTextField33.font")); // NOI18N
        jTextField33.setText(resourceMap.getString("jTextField33.text")); // NOI18N
        jTextField33.setFocusable(false);
        jTextField33.setName("jTextField33"); // NOI18N

        jTextField32.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField32.setEditable(false);
        jTextField32.setFont(resourceMap.getFont("jTextField33.font")); // NOI18N
        jTextField32.setFocusable(false);
        jTextField32.setName("jTextField32"); // NOI18N

        jLabel31.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel31.setText(resourceMap.getString("jLabel31.text")); // NOI18N
        jLabel31.setFocusable(false);
        jLabel31.setName("jLabel31"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField32, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jTextField34, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jTextField33, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );

        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setOpaque(false);

        jLabel22.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setFocusable(false);
        jLabel22.setName("jLabel22"); // NOI18N

        jTextField25.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField25.setEditable(false);
        jTextField25.setFont(resourceMap.getFont("jTextField24.font")); // NOI18N
        jTextField25.setText(resourceMap.getString("jTextField25.text")); // NOI18N
        jTextField25.setFocusable(false);
        jTextField25.setName("jTextField25"); // NOI18N

        jLabel23.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setFocusable(false);
        jLabel23.setName("jLabel23"); // NOI18N

        jTextField26.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField26.setEditable(false);
        jTextField26.setFont(resourceMap.getFont("jTextField24.font")); // NOI18N
        jTextField26.setFocusable(false);
        jTextField26.setName("jTextField26"); // NOI18N

        jLabel24.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setFocusable(false);
        jLabel24.setName("jLabel24"); // NOI18N

        jTextField27.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField27.setEditable(false);
        jTextField27.setFont(resourceMap.getFont("jTextField24.font")); // NOI18N
        jTextField27.setFocusable(false);
        jTextField27.setName("jTextField27"); // NOI18N

        jLabel25.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel25.setText(resourceMap.getString("jLabel25.text")); // NOI18N
        jLabel25.setFocusable(false);
        jLabel25.setName("jLabel25"); // NOI18N

        jTextField28.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField28.setEditable(false);
        jTextField28.setFont(resourceMap.getFont("jTextField24.font")); // NOI18N
        jTextField28.setFocusable(false);
        jTextField28.setName("jTextField28"); // NOI18N

        jLabel20.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        jTextField24.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField24.setEditable(false);
        jTextField24.setFont(resourceMap.getFont("jTextField24.font")); // NOI18N
        jTextField24.setFocusable(false);
        jTextField24.setName("jTextField24"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                            .addGap(18, 18, 18)))
                                    .addGap(10, 10, 10))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel25)
                                    .addGap(26, 26, 26)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField28)
                                .addComponent(jTextField25)
                                .addComponent(jTextField27)
                                .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setName("jPanel6"); // NOI18N
        jPanel6.setOpaque(false);

        jLabel15.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        jTextField15.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField15.setEditable(false);
        jTextField15.setFont(resourceMap.getFont("jTextField23.font")); // NOI18N
        jTextField15.setText(resourceMap.getString("jTextField15.text")); // NOI18N
        jTextField15.setFocusable(false);
        jTextField15.setName("jTextField15"); // NOI18N
        jTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField15KeyPressed(evt);
            }
        });

        jLabel16.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jTextField16.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField16.setEditable(false);
        jTextField16.setFont(resourceMap.getFont("jTextField23.font")); // NOI18N
        jTextField16.setFocusable(false);
        jTextField16.setName("jTextField16"); // NOI18N

        jLabel17.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        jTextField20.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField20.setEditable(false);
        jTextField20.setFont(resourceMap.getFont("jTextField23.font")); // NOI18N
        jTextField20.setFocusable(false);
        jTextField20.setName("jTextField20"); // NOI18N

        jLabel18.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        jTextField22.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField22.setEditable(false);
        jTextField22.setFont(resourceMap.getFont("jTextField23.font")); // NOI18N
        jTextField22.setFocusable(false);
        jTextField22.setName("jTextField22"); // NOI18N

        jLabel19.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jTextField23.setBackground(resourceMap.getColor("jTextField31.background")); // NOI18N
        jTextField23.setEditable(false);
        jTextField23.setFont(resourceMap.getFont("jTextField23.font")); // NOI18N
        jTextField23.setFocusable(false);
        jTextField23.setName("jTextField23"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(jTextField22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(jTextField20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(jTextField16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(630, 630, 630)
                        .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(111, 111, 111))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sistemanortfarma.SistemaNortfarmaApp.class).getContext().getActionMap(RealizaVenta.class, this);
        jButton4.setAction(actionMap.get("ModificarProducto")); // NOI18N
        jButton4.setFont(resourceMap.getFont("jButton6.font")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setToolTipText(resourceMap.getString("jButton4.toolTipText")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.setMargin(new java.awt.Insets(2, 8, 2, 14));
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setPreferredSize(new java.awt.Dimension(115, 21));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jButton6.setFont(resourceMap.getFont("jButton6.font")); // NOI18N
        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton6.setName("jButton6"); // NOI18N
        jButton6.setPreferredSize(new java.awt.Dimension(115, 21));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(resourceMap.getColor("jPanel9.background")); // NOI18N
        jPanel9.setName("jPanel9"); // NOI18N
        jPanel9.setOpaque(false);

        jTextField21.setBackground(resourceMap.getColor("jTextField21.background")); // NOI18N
        jTextField21.setEditable(false);
        jTextField21.setFont(resourceMap.getFont("jTextField21.font")); // NOI18N
        jTextField21.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField21.setDisabledTextColor(resourceMap.getColor("jTextField21.disabledTextColor")); // NOI18N
        jTextField21.setFocusable(false);
        jTextField21.setName("jTextField21"); // NOI18N
        jTextField21.setPreferredSize(new java.awt.Dimension(95, 30));
        jTextField21.setRequestFocusEnabled(false);

        jLabel27.setFont(resourceMap.getFont("jLabel27.font")); // NOI18N
        jLabel27.setForeground(resourceMap.getColor("jLabel27.foreground")); // NOI18N
        jLabel27.setText(resourceMap.getString("jLabel27.text")); // NOI18N
        jLabel27.setFocusable(false);
        jLabel27.setName("jLabel27"); // NOI18N
        jLabel27.setRequestFocusEnabled(false);

        jLabel10.setFont(resourceMap.getFont("jLabel27.font")); // NOI18N
        jLabel10.setForeground(resourceMap.getColor("jLabel27.foreground")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setFocusable(false);
        jLabel10.setName("jLabel10"); // NOI18N
        jLabel10.setRequestFocusEnabled(false);

        jLabel8.setFont(resourceMap.getFont("jLabel27.font")); // NOI18N
        jLabel8.setForeground(resourceMap.getColor("jLabel27.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setFocusable(false);
        jLabel8.setName("jLabel8"); // NOI18N
        jLabel8.setRequestFocusEnabled(false);

        jLabel9.setFont(resourceMap.getFont("jLabel27.font")); // NOI18N
        jLabel9.setForeground(resourceMap.getColor("jLabel27.foreground")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setFocusable(false);
        jLabel9.setName("jLabel9"); // NOI18N
        jLabel9.setRequestFocusEnabled(false);

        jTextField7.setBackground(resourceMap.getColor("jTextField9.background")); // NOI18N
        jTextField7.setEditable(false);
        jTextField7.setFont(resourceMap.getFont("jTextField9.font")); // NOI18N
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField7.setText(resourceMap.getString("jTextField7.text")); // NOI18N
        jTextField7.setDisabledTextColor(resourceMap.getColor("jTextField7.disabledTextColor")); // NOI18N
        jTextField7.setFocusable(false);
        jTextField7.setName("jTextField7"); // NOI18N

        jTextField8.setBackground(resourceMap.getColor("jTextField9.background")); // NOI18N
        jTextField8.setEditable(false);
        jTextField8.setFont(resourceMap.getFont("jTextField9.font")); // NOI18N
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField8.setText(resourceMap.getString("jTextField8.text")); // NOI18N
        jTextField8.setDisabledTextColor(resourceMap.getColor("jTextField8.disabledTextColor")); // NOI18N
        jTextField8.setFocusable(false);
        jTextField8.setName("jTextField8"); // NOI18N

        jTextField9.setBackground(resourceMap.getColor("jTextField9.background")); // NOI18N
        jTextField9.setEditable(false);
        jTextField9.setFont(resourceMap.getFont("jTextField9.font")); // NOI18N
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField9.setText(resourceMap.getString("jTextField9.text")); // NOI18N
        jTextField9.setDisabledTextColor(resourceMap.getColor("jTextField9.disabledTextColor")); // NOI18N
        jTextField9.setFocusable(false);
        jTextField9.setName("jTextField9"); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(28, 28, 28)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField9)
                    .addComponent(jTextField8)
                    .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setFont(resourceMap.getFont("jLabel11.font")); // NOI18N
        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jPanel8.setBackground(resourceMap.getColor("jPanel8.background")); // NOI18N
        jPanel8.setMinimumSize(new java.awt.Dimension(250, 30));
        jPanel8.setName("jPanel8"); // NOI18N
        jPanel8.setOpaque(false);
        jPanel8.setPreferredSize(new java.awt.Dimension(650, 31));

        jSeparator1.setName("jSeparator1"); // NOI18N
        jPanel8.add(jSeparator1);

        jSeparator9.setName("jSeparator9"); // NOI18N
        jPanel8.add(jSeparator9);

        jButton2.setAction(actionMap.get("ModificaCliente")); // NOI18N
        jButton2.setFont(resourceMap.getFont("jButton6.font")); // NOI18N
        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setToolTipText(resourceMap.getString("jButton2.toolTipText")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setMargin(new java.awt.Insets(2, 8, 2, 14));
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setPreferredSize(new java.awt.Dimension(115, 21));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton9.setFont(resourceMap.getFont("jButton6.font")); // NOI18N
        jButton9.setIcon(resourceMap.getIcon("jButton9.icon")); // NOI18N
        jButton9.setText(resourceMap.getString("jButton9.text")); // NOI18N
        jButton9.setFocusable(false);
        jButton9.setName("jButton9"); // NOI18N
        jButton9.setPreferredSize(new java.awt.Dimension(115, 21));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel12.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel12.border.titleFont"), resourceMap.getColor("jPanel12.border.titleColor"))); // NOI18N
        jPanel12.setName("jPanel12"); // NOI18N
        jPanel12.setOpaque(false);
        jPanel12.setPreferredSize(new java.awt.Dimension(492, 126));

        jLabel2.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextField2.setBackground(resourceMap.getColor("jTextField3.background")); // NOI18N
        jTextField2.setEditable(false);
        jTextField2.setForeground(resourceMap.getColor("jTextField4.foreground")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N
        jTextField2.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel3.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField3.setBackground(resourceMap.getColor("jTextField3.background")); // NOI18N
        jTextField3.setForeground(resourceMap.getColor("jTextField4.foreground")); // NOI18N
        jTextField3.setName("jTextField3"); // NOI18N
        jTextField3.setPreferredSize(new java.awt.Dimension(210, 20));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jLabel6.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setFocusable(false);
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setRequestFocusEnabled(false);

        jLabel21.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel21.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        jTextField4.setBackground(resourceMap.getColor("jTextField4.background")); // NOI18N
        jTextField4.setForeground(resourceMap.getColor("jTextField4.foreground")); // NOI18N
        jTextField4.setName("jTextField4"); // NOI18N
        jTextField4.setNextFocusableComponent(jTextField14);
        jTextField4.setPreferredSize(new java.awt.Dimension(80, 20));
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField4FocusLost(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });

        jLabel4.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jTextField14.setBackground(resourceMap.getColor("jTextField4.background")); // NOI18N
        jTextField14.setForeground(resourceMap.getColor("jTextField4.foreground")); // NOI18N
        jTextField14.setName("jTextField14"); // NOI18N
        jTextField14.setNextFocusableComponent(jComboBox3);
        jTextField14.setPreferredSize(new java.awt.Dimension(100, 20));
        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });
        jTextField14.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField14FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField14FocusLost(evt);
            }
        });
        jTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField14KeyPressed(evt);
            }
        });

        jButton7.setFont(resourceMap.getFont("jButton7.font")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setComponentPopupMenu(jPopupMenu2);
        jButton7.setName("jButton7"); // NOI18N
        jButton7.setPreferredSize(new java.awt.Dimension(80, 17));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jComboBox8.setBackground(resourceMap.getColor("jComboBox8.background")); // NOI18N
        jComboBox8.setEditable(true);
        jComboBox8.setName("jComboBox8"); // NOI18N
        jComboBox8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox8KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addComponent(jComboBox8, 0, 394, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setName("jPanel13"); // NOI18N
        jPanel13.setOpaque(false);

        jLabel5.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setFocusable(false);
        jLabel5.setName("jLabel5"); // NOI18N

        jComboBox3.setBackground(resourceMap.getColor("jTextField6.background")); // NOI18N
        jComboBox3.setFont(resourceMap.getFont("jComboBox4.font")); // NOI18N
        jComboBox3.setForeground(resourceMap.getColor("jComboBox1.foreground")); // NOI18N
        jComboBox3.setName("jComboBox3"); // NOI18N
        jComboBox3.setNextFocusableComponent(jComboBox1);
        jComboBox3.setPreferredSize(new java.awt.Dimension(200, 19));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jComboBox3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox3FocusLost(evt);
            }
        });
        jComboBox3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox3KeyPressed(evt);
            }
        });

        jLabel7.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setFocusable(false);
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setRequestFocusEnabled(false);

        jComboBox1.setBackground(resourceMap.getColor("jTextField6.background")); // NOI18N
        jComboBox1.setFont(resourceMap.getFont("jComboBox4.font")); // NOI18N
        jComboBox1.setForeground(resourceMap.getColor("jComboBox1.foreground")); // NOI18N
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.setPreferredSize(new java.awt.Dimension(200, 19));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBox1MouseReleased(evt);
            }
        });
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox1FocusLost(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1KeyReleased(evt);
            }
        });

        jLabel14.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel14.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setFocusable(false);
        jLabel14.setName("jLabel14"); // NOI18N
        jLabel14.setRequestFocusEnabled(false);

        jComboBox4.setFont(resourceMap.getFont("jComboBox4.font")); // NOI18N
        jComboBox4.setForeground(resourceMap.getColor("jComboBox1.foreground")); // NOI18N
        jComboBox4.setName("jComboBox4"); // NOI18N
        jComboBox4.setPreferredSize(new java.awt.Dimension(200, 19));
        jComboBox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox4MouseEntered(evt);
            }
        });
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, 239, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jToolBar1.setBackground(resourceMap.getColor("jToolBar1.background")); // NOI18N
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jButton8.setBackground(resourceMap.getColor("jButton8.background")); // NOI18N
        jButton8.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton8.setIcon(resourceMap.getIcon("jButton8.icon")); // NOI18N
        jButton8.setText(resourceMap.getString("jButton8.text")); // NOI18N
        jButton8.setEnabled(false);
        jButton8.setFocusable(false);
        jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton8.setName("jButton8"); // NOI18N
        jButton8.setPreferredSize(new java.awt.Dimension(130, 23));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);

        jButton1.setBackground(resourceMap.getColor("jButton1.background")); // NOI18N
        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setMnemonic('G');
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setToolTipText(resourceMap.getString("jButton1.toolTipText")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.setMargin(new java.awt.Insets(2, 8, 2, 14));
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setPreferredSize(new java.awt.Dimension(110, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton3.setBackground(resourceMap.getColor("jButton3.background")); // NOI18N
        jButton3.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setMnemonic('C');
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setToolTipText(resourceMap.getString("jButton3.toolTipText")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton3.setMargin(new java.awt.Insets(2, 8, 2, 14));
        jButton3.setName("jButton3"); // NOI18N
        jButton3.setPreferredSize(new java.awt.Dimension(95, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jPanel16.setName("jPanel16"); // NOI18N
        jPanel16.setOpaque(false);

        jLabel12.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        jPanel16.add(jLabel12);

        jTextField1.setBackground(resourceMap.getColor("jTextField1.background")); // NOI18N
        jTextField1.setEditable(false);
        jTextField1.setFont(resourceMap.getFont("jTextField1.font")); // NOI18N
        jTextField1.setForeground(resourceMap.getColor("jTextField1.foreground")); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText(resourceMap.getString("jTextField1.toolTipText")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.setPreferredSize(new java.awt.Dimension(100, 22));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });
        jPanel16.add(jTextField1);

        jLabel34.setForeground(resourceMap.getColor("jLabel34.foreground")); // NOI18N
        jLabel34.setText(resourceMap.getString("jLabel34.text")); // NOI18N
        jLabel34.setName("jLabel34"); // NOI18N
        jPanel16.add(jLabel34);

        jTextField37.setBackground(resourceMap.getColor("jTextField37.background")); // NOI18N
        jTextField37.setEditable(false);
        jTextField37.setFont(resourceMap.getFont("jTextField37.font")); // NOI18N
        jTextField37.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField37.setText(resourceMap.getString("jTextField37.text")); // NOI18N
        jTextField37.setName("jTextField37"); // NOI18N
        jTextField37.setPreferredSize(new java.awt.Dimension(100, 22));
        jPanel16.add(jTextField37);

        jLabel29.setFont(resourceMap.getFont("jLabel29.font")); // NOI18N
        jLabel29.setForeground(resourceMap.getColor("jLabel29.foreground")); // NOI18N
        jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
        jLabel29.setFocusable(false);
        jLabel29.setName("jLabel29"); // NOI18N

        jTextField30.setBackground(resourceMap.getColor("jTextField6.background")); // NOI18N
        jTextField30.setEditable(false);
        jTextField30.setFont(resourceMap.getFont("jTextField30.font")); // NOI18N
        jTextField30.setForeground(resourceMap.getColor("jTextField30.foreground")); // NOI18N
        jTextField30.setText(resourceMap.getString("jTextField30.text")); // NOI18N
        jTextField30.setFocusable(false);
        jTextField30.setName("jTextField30"); // NOI18N

        jPanel7.setName("jPanel7"); // NOI18N
        jPanel7.setOpaque(false);

        jLabel28.setFont(resourceMap.getFont("jLabel28.font")); // NOI18N
        jLabel28.setText(resourceMap.getString("jLabel28.text")); // NOI18N
        jLabel28.setName("jLabel28"); // NOI18N
        jLabel28.setPreferredSize(new java.awt.Dimension(20, 15));
        jPanel7.add(jLabel28);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel7.add(jLabel1);

        jTextField31.setBackground(resourceMap.getColor("jTextField35.background")); // NOI18N
        jTextField31.setEditable(false);
        jTextField31.setFont(resourceMap.getFont("jTextField35.font")); // NOI18N
        jTextField31.setForeground(resourceMap.getColor("jTextField31.foreground")); // NOI18N
        jTextField31.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField31.setName("jTextField31"); // NOI18N
        jTextField31.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel7.add(jTextField31);

        jLabel13.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        jPanel7.add(jLabel13);

        jTextField35.setBackground(resourceMap.getColor("jTextField35.background")); // NOI18N
        jTextField35.setEditable(false);
        jTextField35.setFont(resourceMap.getFont("jTextField35.font")); // NOI18N
        jTextField35.setForeground(resourceMap.getColor("jTextField31.foreground")); // NOI18N
        jTextField35.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField35.setText(resourceMap.getString("jTextField35.text")); // NOI18N
        jTextField35.setName("jTextField35"); // NOI18N
        jTextField35.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jTextField35);

        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setPreferredSize(new java.awt.Dimension(30, 23));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton5);

        jLabel30.setText(resourceMap.getString("jLabel30.text")); // NOI18N
        jLabel30.setName("jLabel30"); // NOI18N

        jComboBox6.setName("jComboBox6"); // NOI18N

        jLabel33.setText(resourceMap.getString("jLabel33.text")); // NOI18N
        jLabel33.setName("jLabel33"); // NOI18N

        jTextField36.setBackground(resourceMap.getColor("jTextField36.background")); // NOI18N
        jTextField36.setEditable(false);
        jTextField36.setFont(resourceMap.getFont("jTextField36.font")); // NOI18N
        jTextField36.setForeground(resourceMap.getColor("jTextField36.foreground")); // NOI18N
        jTextField36.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField36.setText(resourceMap.getString("jTextField36.text")); // NOI18N
        jTextField36.setName("jTextField36"); // NOI18N

        jLabel35.setFont(resourceMap.getFont("jLabel35.font")); // NOI18N
        jLabel35.setText(resourceMap.getString("jLabel35.text")); // NOI18N
        jLabel35.setName("jLabel35"); // NOI18N

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane2.setName("jTabbedPane2"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel15.setBackground(resourceMap.getColor("jPanel15.background")); // NOI18N
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), resourceMap.getColor("jPanel15.border.titleColor"))); // NOI18N
        jPanel15.setName("jPanel15"); // NOI18N

        jCheckBox1.setFont(resourceMap.getFont("jCheckBox4.font")); // NOI18N
        jCheckBox1.setForeground(resourceMap.getColor("jCheckBox1.foreground")); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setToolTipText(resourceMap.getString("jCheckBox1.toolTipText")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N
        jCheckBox1.setOpaque(false);
        jCheckBox1.setPreferredSize(new java.awt.Dimension(100, 21));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextField17.setFont(resourceMap.getFont("jTextField10.font")); // NOI18N
        jTextField17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField17.setName("jTextField17"); // NOI18N
        jTextField17.setPreferredSize(new java.awt.Dimension(45, 20));
        jTextField17.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField17KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField17KeyReleased(evt);
            }
        });

        jCheckBox4.setFont(resourceMap.getFont("jCheckBox4.font")); // NOI18N
        jCheckBox4.setForeground(resourceMap.getColor("jCheckBox4.foreground")); // NOI18N
        jCheckBox4.setText(resourceMap.getString("jCheckBox4.text")); // NOI18N
        jCheckBox4.setToolTipText(resourceMap.getString("jCheckBox4.toolTipText")); // NOI18N
        jCheckBox4.setName("jCheckBox4"); // NOI18N
        jCheckBox4.setOpaque(false);
        jCheckBox4.setPreferredSize(new java.awt.Dimension(100, 21));
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jTextField19.setFont(resourceMap.getFont("jTextField10.font")); // NOI18N
        jTextField19.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField19.setEnabled(false);
        jTextField19.setName("jTextField19"); // NOI18N
        jTextField19.setPreferredSize(new java.awt.Dimension(45, 20));
        jTextField19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField19ActionPerformed(evt);
            }
        });
        jTextField19.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField19KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField19KeyReleased(evt);
            }
        });

        jCheckBox2.setBackground(resourceMap.getColor("jCheckBox2.background")); // NOI18N
        jCheckBox2.setFont(resourceMap.getFont("jCheckBox4.font")); // NOI18N
        jCheckBox2.setForeground(resourceMap.getColor("jCheckBox2.foreground")); // NOI18N
        jCheckBox2.setText(resourceMap.getString("jCheckBox2.text")); // NOI18N
        jCheckBox2.setToolTipText(resourceMap.getString("jCheckBox2.toolTipText")); // NOI18N
        jCheckBox2.setName("jCheckBox2"); // NOI18N
        jCheckBox2.setOpaque(false);
        jCheckBox2.setPreferredSize(new java.awt.Dimension(100, 21));
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jTextField10.setFont(resourceMap.getFont("jTextField10.font")); // NOI18N
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10.setToolTipText(resourceMap.getString("jTextField10.toolTipText")); // NOI18N
        jTextField10.setEnabled(false);
        jTextField10.setName("jTextField10"); // NOI18N
        jTextField10.setPreferredSize(new java.awt.Dimension(45, 20));
        jTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField10KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField10KeyReleased(evt);
            }
        });

        jTextField12.setFont(resourceMap.getFont("jTextField6.font")); // NOI18N
        jTextField12.setToolTipText(resourceMap.getString("jTextField12.toolTipText")); // NOI18N
        jTextField12.setEnabled(false);
        jTextField12.setName("jTextField12"); // NOI18N
        jTextField12.setPreferredSize(new java.awt.Dimension(110, 20));
        jTextField12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField12MouseClicked(evt);
            }
        });
        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField12KeyPressed(evt);
            }
        });

        jCheckBox3.setFont(resourceMap.getFont("jCheckBox4.font")); // NOI18N
        jCheckBox3.setForeground(resourceMap.getColor("jCheckBox3.foreground")); // NOI18N
        jCheckBox3.setText(resourceMap.getString("jCheckBox3.text")); // NOI18N
        jCheckBox3.setName("jCheckBox3"); // NOI18N
        jCheckBox3.setOpaque(false);
        jCheckBox3.setPreferredSize(new java.awt.Dimension(100, 21));
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jCheckBox3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox3KeyPressed(evt);
            }
        });

        jTextField18.setFont(resourceMap.getFont("jTextField10.font")); // NOI18N
        jTextField18.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField18.setEnabled(false);
        jTextField18.setName("jTextField18"); // NOI18N
        jTextField18.setPreferredSize(new java.awt.Dimension(45, 20));
        jTextField18.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField18KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField18KeyReleased(evt);
            }
        });

        jTextField13.setFont(resourceMap.getFont("jTextField6.font")); // NOI18N
        jTextField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField13.setToolTipText(resourceMap.getString("jTextField13.toolTipText")); // NOI18N
        jTextField13.setEnabled(false);
        jTextField13.setName("jTextField13"); // NOI18N
        jTextField13.setPreferredSize(new java.awt.Dimension(110, 20));
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField13KeyPressed(evt);
            }
        });

        jComboBox2.setFont(resourceMap.getFont("jComboBox2.font")); // NOI18N
        jComboBox2.setEnabled(false);
        jComboBox2.setName("jComboBox2"); // NOI18N
        jComboBox2.setPreferredSize(new java.awt.Dimension(110, 20));
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox2KeyPressed(evt);
            }
        });

        jTextField11.setBackground(resourceMap.getColor("jTextField11.background")); // NOI18N
        jTextField11.setEditable(false);
        jTextField11.setFont(resourceMap.getFont("jTextField11.font")); // NOI18N
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField11.setName("jTextField11"); // NOI18N
        jTextField11.setPreferredSize(new java.awt.Dimension(80, 25));

        jComboBox5.setEnabled(false);
        jComboBox5.setName("jComboBox5"); // NOI18N
        jComboBox5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox5KeyPressed(evt);
            }
        });

        jTextField6.setFont(resourceMap.getFont("jTextField6.font")); // NOI18N
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setText(resourceMap.getString("jTextField6.text")); // NOI18N
        jTextField6.setEnabled(false);
        jTextField6.setName("jTextField6"); // NOI18N
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField6KeyPressed(evt);
            }
        });

        jCheckBox5.setFont(resourceMap.getFont("jCheckBox5.font")); // NOI18N
        jCheckBox5.setForeground(resourceMap.getColor("jCheckBox5.foreground")); // NOI18N
        jCheckBox5.setText(resourceMap.getString("jCheckBox5.text")); // NOI18N
        jCheckBox5.setToolTipText(resourceMap.getString("jCheckBox5.toolTipText")); // NOI18N
        jCheckBox5.setName("jCheckBox5"); // NOI18N
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        jCheckBox5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox5KeyPressed(evt);
            }
        });

        jTextField39.setFont(resourceMap.getFont("jTextField10.font")); // NOI18N
        jTextField39.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField39.setToolTipText(resourceMap.getString("jTextField39.toolTipText")); // NOI18N
        jTextField39.setEnabled(false);
        jTextField39.setName("jTextField39"); // NOI18N
        jTextField39.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField39KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField39KeyReleased(evt);
            }
        });

        jComboBox7.setEnabled(false);
        jComboBox7.setName("jComboBox7"); // NOI18N
        jComboBox7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox7KeyPressed(evt);
            }
        });

        jTextField38.setFont(resourceMap.getFont("jTextField6.font")); // NOI18N
        jTextField38.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField38.setToolTipText(resourceMap.getString("jTextField38.toolTipText")); // NOI18N
        jTextField38.setEnabled(false);
        jTextField38.setName("jTextField38"); // NOI18N
        jTextField38.setPreferredSize(new java.awt.Dimension(45, 20));
        jTextField38.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField38KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField38KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jCheckBox4, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField18, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addComponent(jTextField17, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addComponent(jTextField19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jTextField39, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField6)
                    .addComponent(jTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBox7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox5)
                        .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jTextField40.setBackground(resourceMap.getColor("jTextField40.background")); // NOI18N
        jTextField40.setEditable(false);
        jTextField40.setFont(resourceMap.getFont("jTextField40.font")); // NOI18N
        jTextField40.setForeground(resourceMap.getColor("jTextField40.foreground")); // NOI18N
        jTextField40.setName("jTextField40"); // NOI18N

        jLabel36.setFont(resourceMap.getFont("jLabel36.font")); // NOI18N
        jLabel36.setForeground(resourceMap.getColor("jLabel36.foreground")); // NOI18N
        jLabel36.setText(resourceMap.getString("jLabel36.text")); // NOI18N
        jLabel36.setName("jLabel36"); // NOI18N

        jLabel37.setFont(resourceMap.getFont("jLabel37.font")); // NOI18N
        jLabel37.setForeground(resourceMap.getColor("jLabel37.foreground")); // NOI18N
        jLabel37.setText(resourceMap.getString("jLabel37.text")); // NOI18N
        jLabel37.setName("jLabel37"); // NOI18N

        jTextField5.setBackground(resourceMap.getColor("jTextField5.background")); // NOI18N
        jTextField5.setEditable(false);
        jTextField5.setFont(resourceMap.getFont("jTextField5.font")); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText(resourceMap.getString("jTextField5.text")); // NOI18N
        jTextField5.setName("jTextField5"); // NOI18N

        jTextField41.setEditable(false);
        jTextField41.setText(resourceMap.getString("jTextField41.text")); // NOI18N
        jTextField41.setName("jTextField41"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jTabbedPane1, 0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(4, 4, 4)
                            .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel29))
                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel30)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel36)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel37))
                                .addGap(1, 1, 1)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.jTextField2.getText().length() == 0) {
            Cliente_Comun();
            this.jTextField3.setEnabled(true);
            this.jTextField3.requestFocus();
        } else {
            new FormClientes(this, objetoventana, idbotica).show(true);
        }

}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        BusquedaProducto();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
}//GEN-LAST:event_jButton4KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        VerificaCaja();
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        CerrarVentana();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed

        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed

        RealizaOpciones(evt);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.jTextField14.requestFocus();
        }
}//GEN-LAST:event_jTextField3KeyPressed

    private void jComboBox1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseReleased
}//GEN-LAST:event_jComboBox1MouseReleased

    private void Habilita_Abono(boolean valor) {
        jCheckBox5.setEnabled(valor);
        jCheckBox5.setSelected(valor);
        jTextField38.setEnabled(valor);
        jTextField39.setEnabled(valor);
        jTextField38.setText("");
        jTextField39.setText("");
        jComboBox7.setEnabled(valor);
        RecuperaBancos_1();
    }

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

        int indice = jComboBox1.getSelectedIndex();
        idtipopago = listatipospagos.get(indice).getId_TipoPago();
        this.jLabel11.setText("");

        if (poscant > 0) {
            if (esCredito(idtipopago)) {
                DeshabilitaPagosDiversos(false);
                this.jCheckBox1.setSelected(false);
                this.jCheckBox4.setSelected(false);
                this.jCheckBox2.setSelected(false);
                this.jCheckBox3.setSelected(false);
                jTextField17.setEnabled(false);
                jTextField19.setEnabled(false);
                jTextField10.setEnabled(false);
                jTextField18.setEnabled(false);
                jTextField12.setEnabled(false);
                jTextField13.setEnabled(false);
                this.jComboBox2.setEnabled(false);
                this.jLabel11.setText("  VENTA CON CREDITO AL PERSONAL ");
                this.jComboBox5.setEnabled(false);
                this.jComboBox2.setEnabled(false);


            }
            if (idtipopago == 1) {
                this.jComboBox5.setEnabled(false);
                this.jTextField6.setEnabled(false);
                this.jComboBox2.setEnabled(false);
                this.jComboBox5.setEnabled(false);
            } else {
                this.jLabel11.setText("");
            }

            if (idtipopago == 23) {
                Habilita_Abono(true);
                RecuperaBancos_1();
                jTextField39.requestFocus();
            }

        }
        poscant++;

        if (indice >= 0 && this.jTable2.getRowCount() > 0) {
            VerificaPagoFraccionado(idtipopago);
            this.jTextField18.setText("");
            this.jTextField10.setText("");
            this.jTextField19.setText("");
        }


    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed

        RealizaOpciones(evt);
}//GEN-LAST:event_jComboBox1KeyPressed

    private void jComboBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyReleased
}//GEN-LAST:event_jComboBox1KeyReleased

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        // TODO add your handling code here:
        RealizaOpciones(evt);

        if (evt.getKeyCode() == 127) {
            int fila = jTable2.getSelectedRow();
            if (fila >= 0) {
                EliminaProducto(fila);

                if (this.idtipopago == 1) {
                    this.jTextField17.setText(String.valueOf(total));
                    this.jTextField11.setText(String.valueOf(total));
                }

                if (jComboBox4.getSelectedIndex() > 0 && veces > 1) {
                    EliminaFilaDescuento();
                }
            }
        }

        if (evt.getKeyText(evt.getKeyCode()).compareTo("F1") == 0) {
            InformacionProducto();
            this.jTabbedPane1.setEnabledAt(1, true);
            this.jTabbedPane1.setSelectedIndex(1);
            this.jTextField29.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (keypress) {

                filaseleccionado = jTable2.getSelectedRow();

                if (filaseleccionado >= 0) {
                    ModificaCantidadPedida(filaseleccionado);
                    CalculaMontoIngresado();
                    if (jComboBox4.getSelectedIndex() > 0 && veces > 1) {
                        EliminaFilaDescuento();
                    }
                    if (this.idtipopago == 1) {
                        this.jTextField17.setText(String.valueOf(total));
                        this.jTextField11.setText(String.valueOf(total));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "DEBE DE SELECCIONAR UN ITEM DE LA PROFORMA", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        }

    }//GEN-LAST:event_jTable2KeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        try {

            Recupera_Serie_Numero();
            if (lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 1) {
                EliminaFilaDescuento();
                ListDescuentos.removeAll(ListDescuentos);
                jComboBox4.removeAllItems();
                veces = 1;
                jLabel11.setText("");
            } else if (lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {
                jLabel11.setText(lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getDESCRIPCION());
            }



        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        this.jComboBox3.requestFocus();
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        jComboBox1.requestFocus();
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        String polizainical = this.jTextField5.getText();
        String polizafinal = this.jTextField41.getText();

        if (polizainical.length() > 0 && lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {
            JOptionPane.showMessageDialog(this, " ERROR : NO SE PUEDE APLICAR FACTURA A ESTE TIPO DE VENTA ", "Error", JOptionPane.ERROR_MESSAGE);
            jComboBox3.removeAllItems();
            RecuperaTipoVentas();
        } else if (polizainical.equals("") && lis_tipo_venta.get(jComboBox3.getSelectedIndex()).getId_Tipo_Venta() == 2) {
            VerificaCreditoEspecial(idcliente);

        } else {
            jComboBox4.removeAllItems();
            EliminaFilaDescuento();
            veces = 1;
        }


    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jTextField14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField14KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField14KeyPressed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed

        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField4KeyPressed

    private void jComboBox3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox3KeyPressed

        RealizaOpciones(evt);
    }//GEN-LAST:event_jComboBox3KeyPressed

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusGained
    }//GEN-LAST:event_jTextField3FocusGained

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
    }//GEN-LAST:event_jTextField3FocusLost

    private void jTextField14FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField14FocusGained
    }//GEN-LAST:event_jTextField14FocusGained

    private void jTextField14FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField14FocusLost
    }//GEN-LAST:event_jTextField14FocusLost

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusGained
    }//GEN-LAST:event_jTextField4FocusGained

    private void jTextField4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusLost
    }//GEN-LAST:event_jTextField4FocusLost

    private void jComboBox3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox3FocusGained
    }//GEN-LAST:event_jComboBox3FocusGained

    private void jComboBox3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox3FocusLost
    }//GEN-LAST:event_jComboBox3FocusLost

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
    }//GEN-LAST:event_jComboBox1FocusGained

    private void jComboBox1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusLost
    }//GEN-LAST:event_jComboBox1FocusLost

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        this.jComboBox8.requestFocus();
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jPanel4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel4KeyPressed
    }//GEN-LAST:event_jPanel4KeyPressed

    private void jTextField15KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField15KeyPressed
    }//GEN-LAST:event_jTextField15KeyPressed

    private void jTextField29KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField29KeyPressed
        if (evt.KEY_PRESSED == 401) {
            limpiarInformacion();
            this.jTabbedPane1.setEnabledAt(1, false);
            this.jTabbedPane1.setSelectedIndex(0);
            this.jTabbedPane1.setEnabledAt(1, false);
            this.jTable2.requestFocus();
        }
    }//GEN-LAST:event_jTextField29KeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
    }//GEN-LAST:event_jButton7ActionPerformed

    private void NuecoCliente() {
        MuestraVentana ven = new MuestraVentana();
        NuevoCliente obj = new NuevoCliente(this, ven);
        obj.show();
    }
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        NuevaVenta();

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        InformacionProducto();
        this.jTabbedPane1.setEnabledAt(1, true);
        this.jTabbedPane1.setSelectedIndex(1);
        this.jTextField29.requestFocus();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        ListadoProformas pe = new ListadoProformas(objetoventana, this, 1);
        pe.show(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu1KeyPressed
    }//GEN-LAST:event_jMenu1KeyPressed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        ListadoProformas pe = new ListadoProformas(objetoventana, this, 1);
        pe.show(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        RealizaOpciones(evt);
    }//GEN-LAST:event_formKeyReleased

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        if (jComboBox4.getSelectedIndex() > 0 && veces > 1) {
            if (Verifica_Productos_Afectos()) {
                EliminaFilaDescuento();
            } else {
                JOptionPane.showMessageDialog(this, " ERROR : DESCUENTO NO APLICABLE ", "Error", JOptionPane.ERROR_MESSAGE);
                Recupera_Posicion_Descuento();
            }

        }
        veces++;
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        NuecoCliente();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            ConsultaSaldo obsaldo = new ConsultaSaldo(objetoventana, idbotica, Integer.parseInt(this.jTextField2.getText()));
            obsaldo.show(true);
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField18KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField18KeyReleased
        try {
            if (this.jTextField18.getText().trim().compareTo("") != 0) {

                String val = this.jTextField18.getText().trim();
                double valor = Double.parseDouble(val);

                if (valor > total) {
                    JOptionPane.showMessageDialog(this, " LA CANTIDAD NO PUEDE EXCEDER AL MONTO DE PAGO ", "Error", JOptionPane.ERROR_MESSAGE);
                    this.jTextField18.setText("");
                    this.jTextField17.requestFocus();

                } else {
                    double sum = total - valor;
                    BigDecimal bd1 = new BigDecimal(sum);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    sum = bd1.doubleValue();

                    if (this.jCheckBox1.isSelected()) {
                        this.jTextField17.setText(String.valueOf(sum));
                    } else if (this.jCheckBox2.isSelected()) {
                        this.jTextField10.setText(String.valueOf(sum));
                    }

                    CalculaMontoIngresado();
                }

            }
        } catch (Exception ex) {
        }

}//GEN-LAST:event_jTextField18KeyReleased

    private void jTextField18KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField18KeyPressed
        RealizaOpciones(evt);
}//GEN-LAST:event_jTextField18KeyPressed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        try {

            int k = 0;
            Double mon = 0.0;

            if (this.jCheckBox3.isSelected()) {

                jTextField18.setEnabled(true);
                jTextField6.setEnabled(true);
                jComboBox2.setEnabled(true);
                RecuperaTarjetas();

                if (this.jCheckBox1.isSelected())//CASH
                {
                    cantpagos++;
                    k = 1;
                    this.jTextField17.setEnabled(true);
                }
                if (this.jCheckBox4.isSelected())//NOTA DE CREDITO
                {
                    cantpagos++;
                    k = 4;
                    this.jTextField12.setEnabled(true);
                }
                if (this.jCheckBox2.isSelected())//CHEQUE
                {
                    cantpagos++;
                    k = 2;
                    this.jTextField10.setEnabled(true);
                    this.jTextField13.setEnabled(true);
                }
                if (this.jCheckBox5.isSelected())//ABONO
                {
                    cantpagos++;
                    k = 5;
                    this.jTextField38.setEnabled(true);
                    this.jTextField39.setEnabled(true);
                    this.jComboBox7.setEnabled(true);
                }

                if (cantpagos > 2) {
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
                    cantpagos = 2;
                    this.jCheckBox3.setSelected(false);
                } else {

                    if (k == 1) {
                        if (this.jTextField17.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField17.getText().trim());
                        }
                    } else if (k == 4) {
                        if (this.jTextField19.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField19.getText().trim());
                        }
                    } else if (k == 2) {
                        if (this.jTextField10.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField10.getText().trim());
                        }
                    } else if (k == 5) {
                        if (this.jTextField39.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField39.getText().trim());
                        }
                    }

                    if (k > 0) {
                        Double restante = total - mon;
                        BigDecimal bd2 = new BigDecimal(restante);
                        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        this.jTextField18.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                    } else {
                        this.jTextField18.setText(String.valueOf(total));
                    }
                }

            } else {
                this.jTextField6.setEnabled(false);
                this.jTextField18.setEnabled(false);
                this.jComboBox2.setEnabled(false);
                this.jTextField18.setText("");
                this.jTextField6.setText("");
                cantpagos--;
            }

            CalculaMontoIngresado();

        } catch (Exception ex) {
        }
}//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jTextField10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField10KeyReleased
        try {


            if (this.jTextField10.getText().trim().compareTo("") != 0) {
                String val = this.jTextField10.getText().trim();
                double valor = Double.parseDouble(val);


                if (valor > total) {
                    JOptionPane.showMessageDialog(this, " LA CANTIDAD NO PUEDE EXCEDER AL MONTO DE PAGO ", "Error", JOptionPane.ERROR_MESSAGE);
                    this.jTextField10.setText("");
                    this.jTextField17.requestFocus();

                } else {
                    double sum = total - valor;
                    BigDecimal bd1 = new BigDecimal(sum);
                    bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                    sum = bd1.doubleValue();

                    if (this.jCheckBox1.isSelected()) {
                        this.jTextField17.setText(String.valueOf(sum));
                    } else if (this.jCheckBox3.isSelected()) {
                        this.jTextField18.setText(String.valueOf(sum));
                    }

                    CalculaMontoIngresado();

                }
            }

        } catch (Exception ex) {
        }
}//GEN-LAST:event_jTextField10KeyReleased

    private void jTextField10KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField10KeyPressed
        RealizaOpciones(evt);
}//GEN-LAST:event_jTextField10KeyPressed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        try {

            int k = 0;
            Double mon = 0.0;

            if (this.jCheckBox2.isSelected()) {

                jTextField10.setEnabled(true);
                jTextField13.setEnabled(true);
                jComboBox5.setEnabled(true);
                RecuperaBancos();

                if (this.jCheckBox1.isSelected()) //CASH
                {
                    cantpagos++;
                    k = 1;
                    this.jTextField17.setEnabled(true);
                }
                if (this.jCheckBox4.isSelected())//NOTA DE CREDITO
                {
                    cantpagos++;
                    k = 4;
                    this.jTextField19.setEnabled(true);
                    this.jTextField12.setEnabled(true);
                }
                if (this.jCheckBox3.isSelected())//CHEQUE
                {
                    cantpagos++;
                    k = 3;
                    this.jTextField18.setEnabled(true);
                    this.jTextField6.setEnabled(true);
                    this.jComboBox2.setEnabled(true);
                }
                if (this.jCheckBox5.isSelected())//ABONO
                {
                    cantpagos++;
                    k = 5;
                    this.jTextField38.setEnabled(true);
                    this.jTextField39.setEnabled(true);
                    this.jComboBox7.setEnabled(true);
                }


                if (cantpagos > 2) {
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
                    cantpagos = 2;
                    this.jCheckBox2.setSelected(false);
                } else {

                    if (k == 1) {
                        if (this.jTextField17.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField17.getText().trim());
                        }
                    } else if (k == 4) {
                        if (this.jTextField19.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField19.getText().trim());
                        }
                    } else if (k == 3) {
                        if (this.jTextField18.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField18.getText().trim());
                        }
                    } else if (k == 5) {
                        if (this.jTextField39.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField39.getText().trim());
                        }
                    }

                    if (k > 0) {
                        Double restante = total - mon;
                        BigDecimal bd2 = new BigDecimal(restante);
                        this.jTextField10.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                    }

                    this.jTextField10.requestFocus();
                }

            } else {
                this.jTextField10.setEnabled(false);
                this.jTextField13.setEnabled(false);
                this.jTextField10.setText("");
                this.jTextField13.setText("");
                this.jComboBox5.setEnabled(false);
                cantpagos--;
            }

            CalculaMontoIngresado();

        } catch (Exception ex) {
        }
}//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField12KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField12KeyPressed
        RealizaOpciones(evt);
}//GEN-LAST:event_jTextField12KeyPressed

    private void jTextField12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField12MouseClicked
        if (evt.getClickCount() % 2 == 0) {
            MuestraNota_Credito();
        }
}//GEN-LAST:event_jTextField12MouseClicked

    private void MuestraNota_Credito() {
        ListaNotasCreditos notadcr = new ListaNotasCreditos(objetoventana, idbotica);
        notadcr.pack();
        notadcr.setVisible(true);

        try {
            String document = notadcr.getNumero_Documento();
            if (document != null) {
                this.jTextField12.setText(notadcr.getNumero_Documento());
                this.jTextField19.setText(String.valueOf(notadcr.getTotal()));
                this.jTextField11.setText(String.valueOf(notadcr.getTotal()));
                CalculaMontoIngresado();
            }
        } catch (Exception ex) {
        }
    }

    private void jTextField19KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField19KeyReleased
}//GEN-LAST:event_jTextField19KeyReleased

    private void jTextField19KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField19KeyPressed
}//GEN-LAST:event_jTextField19KeyPressed

    private void jTextField19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField19ActionPerformed
}//GEN-LAST:event_jTextField19ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        try {

            int k = 0;
            Double mon = 0.0;

            if (this.jCheckBox4.isSelected()) {

                this.jTextField19.setEnabled(false);
                this.jTextField12.setEnabled(true);


                if (this.jCheckBox1.isSelected())//CASH
                {
                    cantpagos++;
                    k = 1;
                    this.jTextField17.setEnabled(true);

                }
                if (this.jCheckBox2.isSelected())//CHEQUE
                {
                    cantpagos++;
                    k = 2;
                    this.jTextField10.setEnabled(true);
                    this.jTextField13.setEnabled(true);
                    this.jComboBox5.setEnabled(true);
                }
                if (this.jCheckBox3.isSelected())//TARJETA
                {
                    cantpagos++;
                    k = 3;
                    this.jTextField6.setEnabled(true);
                    this.jTextField18.setEnabled(true);
                    this.jComboBox2.setEnabled(true);
                }

                if (this.jCheckBox5.isSelected())//ABONO
                {
                    cantpagos++;
                    k = 5;
                    this.jTextField38.setEnabled(true);
                    this.jTextField39.setEnabled(true);
                    this.jComboBox7.setEnabled(true);
                }

                if (cantpagos > 2) {
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
                    cantpagos = 2;
                    this.jCheckBox4.setSelected(false);
                } else {

                    this.jTextField12.setEnabled(true);
                    this.jTextField12.setEditable(true);
                    this.jTextField12.requestFocus();
                }
            } else {
                this.jTextField19.setEnabled(false);
                this.jTextField12.setEnabled(false);
                this.jTextField19.setText("");
                this.jTextField12.setText("");
                cantpagos--;
            }

            CalculaMontoIngresado();

        } catch (Exception ex) {
        }
}//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jTextField17KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField17KeyReleased

        try {

            if (jTextField17.getText().trim().compareTo("") != 0) {

                String val = this.jTextField17.getText().trim();
                double valor = Double.parseDouble(val);
                BigDecimal bd1 = new BigDecimal(valor);
                bd1 = bd1.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                valor = bd1.doubleValue();

                if (valor > total) {
                    JOptionPane.showMessageDialog(this, " LA CANTIDAD NO PUEDE EXCEDER AL MONTO DE PAGO ", "Error", JOptionPane.ERROR_MESSAGE);
                    this.jTextField17.setText("");
                    this.jTextField11.setText("");
                    this.jTextField17.requestFocus();
                } else {
                    CalculaMontoIngresado();

                }
                RealizaOpciones(evt);

            }

        } catch (Exception ex) {
        }

}//GEN-LAST:event_jTextField17KeyReleased

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed

        try {

            int k = 0;
            Double mon = 0.0;

            if (this.jCheckBox1.isSelected()) {

                jTextField17.setText("");
                jTextField17.setEnabled(true);

                if (this.jCheckBox4.isSelected()) ///NOTA DE CREDITO
                {
                    cantpagos++;
                    k = 4;
                    this.jTextField12.setEnabled(true);
                }
                if (this.jCheckBox2.isSelected())//CHEQUE
                {
                    cantpagos++;
                    k = 2;
                    this.jTextField10.setEnabled(true);
                    this.jTextField13.setEnabled(true);
                    this.jComboBox5.setEnabled(true);
                }

                if (this.jCheckBox3.isSelected())//TARJETA
                {
                    cantpagos++;
                    k = 3;
                    this.jTextField18.setEnabled(true);
                    this.jTextField6.setEnabled(true);
                    this.jComboBox2.setEnabled(true);
                }

                if (this.jCheckBox5.isSelected())//ABONO
                {
                    cantpagos++;
                    k = 5;
                    this.jTextField38.setEnabled(true);
                    this.jTextField39.setEnabled(true);
                    this.jComboBox7.setEnabled(true);
                }


                if (cantpagos > 2) {
                    JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
                    cantpagos = 2;
                    this.jCheckBox1.setSelected(false);
                } else {

                    if (k == 4) {
                        if (this.jTextField19.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField19.getText().trim());
                        }
                    } else if (k == 2) {
                        if (this.jTextField10.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField10.getText().trim());
                        }
                    } else if (k == 3) {
                        if (this.jTextField18.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField18.getText().trim());
                        }
                    } else if (k == 5) {
                        if (this.jTextField39.getText().trim().compareTo("") != 0) {
                            mon = Double.parseDouble(this.jTextField39.getText().trim());
                        }
                    }


                    if (k > 0) {
                        Double restante = total - mon;
                        BigDecimal bd2 = new BigDecimal(restante);
                        bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                        this.jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                    } else {
                        if (k == 0) {
                            Double restante = total;
                            BigDecimal bd2 = new BigDecimal(restante);
                            bd2 = bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP);
                            this.jTextField17.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());

                        }

                    }

                    this.jTextField17.setEnabled(true);
                    this.jTextField17.requestFocus();

                }

            } else {
                jTextField17.setEnabled(false);
                jTextField17.setText("");
                cantpagos--;
            }

            CalculaMontoIngresado();

        } catch (Exception ex) {
        }
}//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField6KeyPressed

    private void jTextField13KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField13KeyPressed

    private void jComboBox2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox2KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jComboBox2KeyPressed

    private void jComboBox5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox5KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jComboBox5KeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        FormEliminaNumeracion OBJ = new FormEliminaNumeracion(objventa, this);
        OBJ.pack();
        OBJ.setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        MuestraNota_Credito();
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jComboBox4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox4MouseEntered
    }//GEN-LAST:event_jComboBox4MouseEntered

    private void jTextField38KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField38KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField38KeyPressed

    private void jTextField38KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField38KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField38KeyReleased

    private void jTextField39KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField39KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField39KeyPressed

    private void jComboBox7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox7KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jComboBox7KeyPressed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed

        int k = 0;
        Double mon = 0.0;

        if (this.jCheckBox5.isSelected()) {

            jTextField39.setEnabled(true);
            jTextField38.setEnabled(true);
            jComboBox7.setEnabled(true);
            jTextField39.requestFocus();

            if (this.jCheckBox1.isSelected()) //CASH
            {
                cantpagos++;
                k = 1;
                this.jTextField17.setEnabled(true);
            }
            if (this.jCheckBox4.isSelected())//NOTA DE CREDITO
            {
                cantpagos++;
                k = 4;
                this.jTextField19.setEnabled(true);
                this.jTextField12.setEnabled(true);
            }
            if (this.jCheckBox3.isSelected())//SI ES TARJETA
            {
                cantpagos++;
                k = 3;
                this.jTextField18.setEnabled(true);
                this.jTextField6.setEnabled(true);
                this.jComboBox2.setEnabled(true);
            }

            if (this.jCheckBox2.isSelected())//ES CHEQUE
            {
                cantpagos++;
                k = 2;
                this.jTextField10.setEnabled(true);
                this.jTextField13.setEnabled(true);
                this.jComboBox5.setEnabled(true);
            }

            if (cantpagos > 2) {
                JOptionPane.showMessageDialog(this, " LO SENTIMOS \n SOLO SE ACEPTAN DOS TIPOS DE PAGOS ", "Error", JOptionPane.ERROR_MESSAGE);
                cantpagos = 2;
            } else {

                if (k == 1) {
                    if (this.jTextField17.getText().trim().compareTo("") != 0) {
                        mon = Double.parseDouble(this.jTextField17.getText().trim());
                    }
                } else if (k == 4) {
                    if (this.jTextField19.getText().trim().compareTo("") != 0) {
                        mon = Double.parseDouble(this.jTextField19.getText().trim());
                    }
                } else if (k == 3) {
                    if (this.jTextField18.getText().trim().compareTo("") != 0) {
                        mon = Double.parseDouble(this.jTextField18.getText().trim());
                    }
                } else if (k == 5) {
                    if (this.jTextField39.getText().trim().compareTo("") != 0) {
                        mon = Double.parseDouble(this.jTextField39.getText().trim());
                    }
                } else if (k == 2) {
                    if (this.jTextField10.getText().trim().compareTo("") != 0) {
                        mon = Double.parseDouble(this.jTextField10.getText().trim());
                    }
                }

                if (k > 0) {
                    Double restante = total - mon;
                    BigDecimal bd2 = new BigDecimal(restante);
                    this.jTextField39.setText(bd2.setScale(podecimal, BigDecimal.ROUND_HALF_UP).toPlainString());
                } else {
                    this.jTextField39.setText(String.valueOf(total));
                }

                this.jTextField39.requestFocus();
            }

        } else {
            this.jTextField38.setEnabled(false);
            this.jTextField39.setEnabled(false);
            this.jTextField38.setText("");
            this.jTextField39.setText("");
            this.jComboBox7.setEnabled(false);
            cantpagos--;
        }

        CalculaMontoIngresado();
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jComboBox8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox8KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jComboBox8KeyPressed

    private void jCheckBox5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox5KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jCheckBox5KeyPressed

    private void jCheckBox3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox3KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jCheckBox3KeyPressed

    private void jTextField39KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField39KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField39KeyReleased

    private void jTextField17KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField17KeyPressed
        RealizaOpciones(evt);
    }//GEN-LAST:event_jTextField17KeyPressed

    private void limpiarInformacion() {

        this.jTextField15.setText("");
        this.jTextField16.setText("");
        this.jTextField18.setText("");
        this.jTextField19.setText("");
        this.jTextField20.setText("");
        this.jTextField22.setText("");
        this.jTextField23.setText("");
        this.jTextField24.setText("");
        this.jTextField25.setText("");
        this.jTextField26.setText("");
        this.jTextField27.setText("");
        this.jTextField28.setText("");
        this.jTextField32.setText("");
        this.jTextField33.setText("");
        this.jTextField34.setText("");

    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
